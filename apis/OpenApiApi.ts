/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTRestUserRole,
  OpenAPI,
  Status,
  Tag,
  VersionAlias,
} from '../models';
import {
    BTRestUserRoleFromJSON,
    BTRestUserRoleToJSON,
    OpenAPIFromJSON,
    OpenAPIToJSON,
    StatusFromJSON,
    StatusToJSON,
    TagFromJSON,
    TagToJSON,
    VersionAliasFromJSON,
    VersionAliasToJSON,
} from '../models';

export interface GetOpenApiRequest {
    forceReload?: boolean;
    version?: string;
    versionAlias?: VersionAlias;
    noFilter?: boolean;
    includedTags?: Array<string>;
    excludedTags?: Array<string>;
    includeDeprecated?: boolean;
    onlyDeprecated?: boolean;
    documentationStatuses?: Array<Status>;
    restUserRole?: BTRestUserRole;
    operationIds?: Array<string>;
    excludedOperationIds?: Array<string>;
}

/**
 * 
 */
export class OpenApiApi extends runtime.BaseAPI {

    /**
     * The Onshape API OpenAPI specification is returned in the JSON format.
     * Get the OpenAPI specification for the Onshape REST API.
     */
    async getOpenApiRaw(requestParameters: GetOpenApiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAPI>> {
        const queryParameters: any = {};

        if (requestParameters.forceReload !== undefined) {
            queryParameters['forceReload'] = requestParameters.forceReload;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.versionAlias !== undefined) {
            queryParameters['versionAlias'] = requestParameters.versionAlias;
        }

        if (requestParameters.noFilter !== undefined) {
            queryParameters['noFilter'] = requestParameters.noFilter;
        }

        if (requestParameters.includedTags) {
            queryParameters['includedTags'] = requestParameters.includedTags;
        }

        if (requestParameters.excludedTags) {
            queryParameters['excludedTags'] = requestParameters.excludedTags;
        }

        if (requestParameters.includeDeprecated !== undefined) {
            queryParameters['includeDeprecated'] = requestParameters.includeDeprecated;
        }

        if (requestParameters.onlyDeprecated !== undefined) {
            queryParameters['onlyDeprecated'] = requestParameters.onlyDeprecated;
        }

        if (requestParameters.documentationStatuses) {
            queryParameters['documentationStatuses'] = requestParameters.documentationStatuses;
        }

        if (requestParameters.restUserRole !== undefined) {
            queryParameters['restUserRole'] = requestParameters.restUserRole;
        }

        if (requestParameters.operationIds) {
            queryParameters['operationIds'] = requestParameters.operationIds;
        }

        if (requestParameters.excludedOperationIds) {
            queryParameters['excludedOperationIds'] = requestParameters.excludedOperationIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/openapi`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAPIFromJSON(jsonValue));
    }

    /**
     * The Onshape API OpenAPI specification is returned in the JSON format.
     * Get the OpenAPI specification for the Onshape REST API.
     */
    async getOpenApi(requestParameters: GetOpenApiRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAPI> {
        const response = await this.getOpenApiRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Tags are used to group operations. For example, `Document` groups operations on documents.
     * Get the list of tags in the Onshape OpenAPI specification.
     */
    async getTagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tag>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/openapi/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
    }

    /**
     * Tags are used to group operations. For example, `Document` groups operations on documents.
     * Get the list of tags in the Onshape OpenAPI specification.
     */
    async getTags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tag>> {
        const response = await this.getTagsRaw(initOverrides);
        return await response.value();
    }

}
