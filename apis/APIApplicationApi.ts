/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTAPIApplicationExtensionInfo,
  BTUserAppSettingsInfo,
  BTUserAppSettingsParams,
} from '../models';
import {
    BTAPIApplicationExtensionInfoFromJSON,
    BTAPIApplicationExtensionInfoToJSON,
    BTUserAppSettingsInfoFromJSON,
    BTUserAppSettingsInfoToJSON,
    BTUserAppSettingsParamsFromJSON,
    BTUserAppSettingsParamsToJSON,
} from '../models';

export interface DeleteAppSettingsRequest {
    uid: string;
    cid: string;
    key?: Array<string>;
}

export interface DeleteCompanyAppSettingsRequest {
    cpid: string;
    cid: string;
    key?: Array<string>;
}

export interface GetApplicableExtensionsForClientRequest {
    uid: string;
    cid: string;
    validPurchases?: boolean;
}

export interface GetCompanyAppSettingsRequest {
    cpid: string;
    cid: string;
    documentId?: string;
    key?: Array<string>;
}

export interface GetUserAppSettingsRequest {
    uid: string;
    cid: string;
    key?: Array<string>;
}

export interface UpdateAppCompanySettingsRequest {
    cpid: string;
    cid: string;
    bTUserAppSettingsParams: BTUserAppSettingsParams;
}

export interface UpdateAppSettingsRequest {
    uid: string;
    cid: string;
    bTUserAppSettingsParams: BTUserAppSettingsParams;
}

/**
 * 
 */
export class APIApplicationApi extends runtime.BaseAPI {

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Delete a user\'s application preference settings.
     */
    async deleteAppSettingsRaw(requestParameters: DeleteAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling deleteAppSettings.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling deleteAppSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.key) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/clients/{cid}/settings/users/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Delete a user\'s application preference settings.
     */
    async deleteAppSettings(requestParameters: DeleteAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAppSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Delete a company\'s application preference settings.
     */
    async deleteCompanyAppSettingsRaw(requestParameters: DeleteCompanyAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.cpid === null || requestParameters.cpid === undefined) {
            throw new runtime.RequiredError('cpid','Required parameter requestParameters.cpid was null or undefined when calling deleteCompanyAppSettings.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling deleteCompanyAppSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.key) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/clients/{cid}/settings/companies/{cpid}`.replace(`{${"cpid"}}`, encodeURIComponent(String(requestParameters.cpid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Delete a company\'s application preference settings.
     */
    async deleteCompanyAppSettings(requestParameters: DeleteCompanyAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteCompanyAppSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the client extensions the specified user has granted/accepted terms for.
     */
    async getApplicableExtensionsForClientRaw(requestParameters: GetApplicableExtensionsForClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BTAPIApplicationExtensionInfo>>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling getApplicableExtensionsForClient.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getApplicableExtensionsForClient.');
        }

        const queryParameters: any = {};

        if (requestParameters.validPurchases !== undefined) {
            queryParameters['validPurchases'] = requestParameters.validPurchases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2ReadPII"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/extensions/user/{uid}/client/{cid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BTAPIApplicationExtensionInfoFromJSON));
    }

    /**
     * Get a list of the client extensions the specified user has granted/accepted terms for.
     */
    async getApplicableExtensionsForClient(requestParameters: GetApplicableExtensionsForClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BTAPIApplicationExtensionInfo>> {
        const response = await this.getApplicableExtensionsForClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Get company-level preference settings for an application.
     */
    async getCompanyAppSettingsRaw(requestParameters: GetCompanyAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTUserAppSettingsInfo>> {
        if (requestParameters.cpid === null || requestParameters.cpid === undefined) {
            throw new runtime.RequiredError('cpid','Required parameter requestParameters.cpid was null or undefined when calling getCompanyAppSettings.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getCompanyAppSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.documentId !== undefined) {
            queryParameters['documentId'] = requestParameters.documentId;
        }

        if (requestParameters.key) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/clients/{cid}/settings/companies/{cpid}`.replace(`{${"cpid"}}`, encodeURIComponent(String(requestParameters.cpid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTUserAppSettingsInfoFromJSON(jsonValue));
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Get company-level preference settings for an application.
     */
    async getCompanyAppSettings(requestParameters: GetCompanyAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTUserAppSettingsInfo> {
        const response = await this.getCompanyAppSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Get user-level preference settings for an application.
     */
    async getUserAppSettingsRaw(requestParameters: GetUserAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTUserAppSettingsInfo>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling getUserAppSettings.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getUserAppSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.key) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/clients/{cid}/settings/users/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTUserAppSettingsInfoFromJSON(jsonValue));
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.
     * Get user-level preference settings for an application.
     */
    async getUserAppSettings(requestParameters: GetUserAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTUserAppSettingsInfo> {
        const response = await this.getUserAppSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.  * Add or update a setting identified by key with value.  * Operation and field may optionally be specified when updating Map type settings.  * Field specifies the key of the setting Map to update.  * Operation may be one of:      * `ADD`: Add or update an existing field of the settings Map.      * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.      * `REMOVE`: Remove the field from the settings Map.  
     * Update company preference settings for an application.
     */
    async updateAppCompanySettingsRaw(requestParameters: UpdateAppCompanySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.cpid === null || requestParameters.cpid === undefined) {
            throw new runtime.RequiredError('cpid','Required parameter requestParameters.cpid was null or undefined when calling updateAppCompanySettings.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling updateAppCompanySettings.');
        }

        if (requestParameters.bTUserAppSettingsParams === null || requestParameters.bTUserAppSettingsParams === undefined) {
            throw new runtime.RequiredError('bTUserAppSettingsParams','Required parameter requestParameters.bTUserAppSettingsParams was null or undefined when calling updateAppCompanySettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/clients/{cid}/settings/companies/{cpid}`.replace(`{${"cpid"}}`, encodeURIComponent(String(requestParameters.cpid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTUserAppSettingsParamsToJSON(requestParameters.bTUserAppSettingsParams),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.  * Add or update a setting identified by key with value.  * Operation and field may optionally be specified when updating Map type settings.  * Field specifies the key of the setting Map to update.  * Operation may be one of:      * `ADD`: Add or update an existing field of the settings Map.      * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.      * `REMOVE`: Remove the field from the settings Map.  
     * Update company preference settings for an application.
     */
    async updateAppCompanySettings(requestParameters: UpdateAppCompanySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateAppCompanySettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.  * Add or update a setting identified by key with value.  * Operation and field may optionally be specified when updating Map type settings.  * Field specifies the key of the setting Map to update.  * Operation may be one of:      * `ADD`: Add or update an existing field of the settings Map.      * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.      * `REMOVE`: Remove the field from the settings Map.  
     * Update a user\'s application preference settings.
     */
    async updateAppSettingsRaw(requestParameters: UpdateAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling updateAppSettings.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling updateAppSettings.');
        }

        if (requestParameters.bTUserAppSettingsParams === null || requestParameters.bTUserAppSettingsParams === undefined) {
            throw new runtime.RequiredError('bTUserAppSettingsParams','Required parameter requestParameters.bTUserAppSettingsParams was null or undefined when calling updateAppSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/applications/clients/{cid}/settings/users/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTUserAppSettingsParamsToJSON(requestParameters.bTUserAppSettingsParams),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This API is only usable with an OAuth token and only by the current user or admin.  * Add or update a setting identified by key with value.  * Operation and field may optionally be specified when updating Map type settings.  * Field specifies the key of the setting Map to update.  * Operation may be one of:      * `ADD`: Add or update an existing field of the settings Map.      * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.      * `REMOVE`: Remove the field from the settings Map.  
     * Update a user\'s application preference settings.
     */
    async updateAppSettings(requestParameters: UpdateAppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateAppSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
