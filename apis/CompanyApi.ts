/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTCompanyInfo,
  BTCompanyUserInfo,
  BTCompanyUserParams,
  BTDocumentSummaryInfo,
  BTListResponseBTCompanyInfo,
} from '../models';
import {
    BTCompanyInfoFromJSON,
    BTCompanyInfoToJSON,
    BTCompanyUserInfoFromJSON,
    BTCompanyUserInfoToJSON,
    BTCompanyUserParamsFromJSON,
    BTCompanyUserParamsToJSON,
    BTDocumentSummaryInfoFromJSON,
    BTDocumentSummaryInfoToJSON,
    BTListResponseBTCompanyInfoFromJSON,
    BTListResponseBTCompanyInfoToJSON,
} from '../models';

export interface AddUserToCompanyRequest {
    cid: string;
    bTCompanyUserParams: BTCompanyUserParams;
}

export interface FindCompanyRequest {
    uid?: string;
    activeOnly?: boolean;
    includeAll?: boolean;
}

export interface GetCompanyRequest {
    cid: string;
}

export interface GetDocumentsByNameRequest {
    cid: string;
    name: string;
}

export interface RemoveUserFromCompanyRequest {
    cid: string;
    uid: string;
    removeFromTeams?: boolean;
    removeDirectShares?: boolean;
}

export interface UpdateCompanyUserRequest {
    cid: string;
    uid: string;
    bTCompanyUserParams: BTCompanyUserParams;
}

/**
 * 
 */
export class CompanyApi extends runtime.BaseAPI {

    /**
     * Returns the company user info.
     * Add a user to a company.
     */
    async addUserToCompanyRaw(requestParameters: AddUserToCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTCompanyUserInfo>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling addUserToCompany.');
        }

        if (requestParameters.bTCompanyUserParams === null || requestParameters.bTCompanyUserParams === undefined) {
            throw new runtime.RequiredError('bTCompanyUserParams','Required parameter requestParameters.bTCompanyUserParams was null or undefined when calling addUserToCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/companies/{cid}/users`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTCompanyUserParamsToJSON(requestParameters.bTCompanyUserParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTCompanyUserInfoFromJSON(jsonValue));
    }

    /**
     * Returns the company user info.
     * Add a user to a company.
     */
    async addUserToCompany(requestParameters: AddUserToCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTCompanyUserInfo> {
        const response = await this.addUserToCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If no user is specified, will return all companies associated with the current user.
     * Get all companies to which the specified user belongs.
     */
    async findCompanyRaw(requestParameters: FindCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTListResponseBTCompanyInfo>> {
        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        if (requestParameters.activeOnly !== undefined) {
            queryParameters['activeOnly'] = requestParameters.activeOnly;
        }

        if (requestParameters.includeAll !== undefined) {
            queryParameters['includeAll'] = requestParameters.includeAll;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTListResponseBTCompanyInfoFromJSON(jsonValue));
    }

    /**
     * If no user is specified, will return all companies associated with the current user.
     * Get all companies to which the specified user belongs.
     */
    async findCompany(requestParameters: FindCompanyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTListResponseBTCompanyInfo> {
        const response = await this.findCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get company information by company ID.
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTCompanyInfo>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/companies/{cid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTCompanyInfoFromJSON(jsonValue));
    }

    /**
     * Get company information by company ID.
     */
    async getCompany(requestParameters: GetCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTCompanyInfo> {
        const response = await this.getCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can only be called by company admins. Use the `name` field for the exact document name string.
     * Get document by exact document name.
     */
    async getDocumentsByNameRaw(requestParameters: GetDocumentsByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BTDocumentSummaryInfo>>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getDocumentsByName.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getDocumentsByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/companies/{cid}/documentsbyname`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BTDocumentSummaryInfoFromJSON));
    }

    /**
     * This API can only be called by company admins. Use the `name` field for the exact document name string.
     * Get document by exact document name.
     */
    async getDocumentsByName(requestParameters: GetDocumentsByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BTDocumentSummaryInfo>> {
        const response = await this.getDocumentsByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from a company, company teams, and all the direct shares.
     */
    async removeUserFromCompanyRaw(requestParameters: RemoveUserFromCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling removeUserFromCompany.');
        }

        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling removeUserFromCompany.');
        }

        const queryParameters: any = {};

        if (requestParameters.removeFromTeams !== undefined) {
            queryParameters['removeFromTeams'] = requestParameters.removeFromTeams;
        }

        if (requestParameters.removeDirectShares !== undefined) {
            queryParameters['removeDirectShares'] = requestParameters.removeDirectShares;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Delete"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/companies/{cid}/users/{uid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a user from a company, company teams, and all the direct shares.
     */
    async removeUserFromCompany(requestParameters: RemoveUserFromCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeUserFromCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns updated company user info. Global permissions can only be updated by the company admin.
     * Update the company\'s information for a user.
     */
    async updateCompanyUserRaw(requestParameters: UpdateCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTCompanyUserInfo>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling updateCompanyUser.');
        }

        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling updateCompanyUser.');
        }

        if (requestParameters.bTCompanyUserParams === null || requestParameters.bTCompanyUserParams === undefined) {
            throw new runtime.RequiredError('bTCompanyUserParams','Required parameter requestParameters.bTCompanyUserParams was null or undefined when calling updateCompanyUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/companies/{cid}/users/{uid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTCompanyUserParamsToJSON(requestParameters.bTCompanyUserParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTCompanyUserInfoFromJSON(jsonValue));
    }

    /**
     * Returns updated company user info. Global permissions can only be updated by the company admin.
     * Update the company\'s information for a user.
     */
    async updateCompanyUser(requestParameters: UpdateCompanyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTCompanyUserInfo> {
        const response = await this.updateCompanyUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
