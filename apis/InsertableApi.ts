/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTListResponseBTInsertableInfo,
} from '../models';
import {
    BTListResponseBTInsertableInfoFromJSON,
    BTListResponseBTInsertableInfoToJSON,
} from '../models';

export interface GetLatestInDocumentRequest {
    did: string;
    includeParts?: boolean;
    includeSurfaces?: boolean;
    includeSketches?: boolean;
    includeReferenceFeatures?: boolean;
    includeAssemblies?: boolean;
    includeFeatureStudios?: boolean;
    includeBlobs?: boolean;
    allowedBlobMimeTypes?: string;
    excludeNewerFSVersions?: boolean;
    maxFeatureScriptVersion?: number;
    includePartStudios?: boolean;
    includeFeatures?: boolean;
    includeMeshes?: boolean;
    includeWires?: boolean;
    includeFlattenedBodies?: boolean;
    includeApplications?: boolean;
    allowedApplicationMimeTypes?: string;
    includeCompositeParts?: boolean;
    includeFSTables?: boolean;
    includeFSComputedPartPropertyFunctions?: boolean;
    includeVariables?: boolean;
    includeVariableStudios?: boolean;
    allowedBlobExtensions?: string;
}

/**
 * 
 */
export class InsertableApi extends runtime.BaseAPI {

    /**
     * * Returns only the latest revision of released insertables.  * Use the document ID (`did`) parameter to specify the source document, not the insertion target.  * For example, you can insert a custom Feature library into another custom Feature library, insert Parts into an Assembly or a Drawing, etc.
     * Get a list of things in this document that can be inserted elsewhere.
     */
    async getLatestInDocumentRaw(requestParameters: GetLatestInDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTListResponseBTInsertableInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getLatestInDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeParts !== undefined) {
            queryParameters['includeParts'] = requestParameters.includeParts;
        }

        if (requestParameters.includeSurfaces !== undefined) {
            queryParameters['includeSurfaces'] = requestParameters.includeSurfaces;
        }

        if (requestParameters.includeSketches !== undefined) {
            queryParameters['includeSketches'] = requestParameters.includeSketches;
        }

        if (requestParameters.includeReferenceFeatures !== undefined) {
            queryParameters['includeReferenceFeatures'] = requestParameters.includeReferenceFeatures;
        }

        if (requestParameters.includeAssemblies !== undefined) {
            queryParameters['includeAssemblies'] = requestParameters.includeAssemblies;
        }

        if (requestParameters.includeFeatureStudios !== undefined) {
            queryParameters['includeFeatureStudios'] = requestParameters.includeFeatureStudios;
        }

        if (requestParameters.includeBlobs !== undefined) {
            queryParameters['includeBlobs'] = requestParameters.includeBlobs;
        }

        if (requestParameters.allowedBlobMimeTypes !== undefined) {
            queryParameters['allowedBlobMimeTypes'] = requestParameters.allowedBlobMimeTypes;
        }

        if (requestParameters.excludeNewerFSVersions !== undefined) {
            queryParameters['excludeNewerFSVersions'] = requestParameters.excludeNewerFSVersions;
        }

        if (requestParameters.maxFeatureScriptVersion !== undefined) {
            queryParameters['maxFeatureScriptVersion'] = requestParameters.maxFeatureScriptVersion;
        }

        if (requestParameters.includePartStudios !== undefined) {
            queryParameters['includePartStudios'] = requestParameters.includePartStudios;
        }

        if (requestParameters.includeFeatures !== undefined) {
            queryParameters['includeFeatures'] = requestParameters.includeFeatures;
        }

        if (requestParameters.includeMeshes !== undefined) {
            queryParameters['includeMeshes'] = requestParameters.includeMeshes;
        }

        if (requestParameters.includeWires !== undefined) {
            queryParameters['includeWires'] = requestParameters.includeWires;
        }

        if (requestParameters.includeFlattenedBodies !== undefined) {
            queryParameters['includeFlattenedBodies'] = requestParameters.includeFlattenedBodies;
        }

        if (requestParameters.includeApplications !== undefined) {
            queryParameters['includeApplications'] = requestParameters.includeApplications;
        }

        if (requestParameters.allowedApplicationMimeTypes !== undefined) {
            queryParameters['allowedApplicationMimeTypes'] = requestParameters.allowedApplicationMimeTypes;
        }

        if (requestParameters.includeCompositeParts !== undefined) {
            queryParameters['includeCompositeParts'] = requestParameters.includeCompositeParts;
        }

        if (requestParameters.includeFSTables !== undefined) {
            queryParameters['includeFSTables'] = requestParameters.includeFSTables;
        }

        if (requestParameters.includeFSComputedPartPropertyFunctions !== undefined) {
            queryParameters['includeFSComputedPartPropertyFunctions'] = requestParameters.includeFSComputedPartPropertyFunctions;
        }

        if (requestParameters.includeVariables !== undefined) {
            queryParameters['includeVariables'] = requestParameters.includeVariables;
        }

        if (requestParameters.includeVariableStudios !== undefined) {
            queryParameters['includeVariableStudios'] = requestParameters.includeVariableStudios;
        }

        if (requestParameters.allowedBlobExtensions !== undefined) {
            queryParameters['allowedBlobExtensions'] = requestParameters.allowedBlobExtensions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/insertables/d/{did}/latest`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTListResponseBTInsertableInfoFromJSON(jsonValue));
    }

    /**
     * * Returns only the latest revision of released insertables.  * Use the document ID (`did`) parameter to specify the source document, not the insertion target.  * For example, you can insert a custom Feature library into another custom Feature library, insert Parts into an Assembly or a Drawing, etc.
     * Get a list of things in this document that can be inserted elsewhere.
     */
    async getLatestInDocument(requestParameters: GetLatestInDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTListResponseBTInsertableInfo> {
        const response = await this.getLatestInDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
