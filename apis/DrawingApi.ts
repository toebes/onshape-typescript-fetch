/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTAppArrayInfoBTAppDrawingViewInfo,
  BTAppModificationRequestInfo,
  BTDocumentElementInfo,
  BTDrawingModificationParams,
  BTDrawingParams,
  BTModelFormatInfo,
  BTTranslateFormatParams,
  BTTranslationRequestInfo,
} from '../models';
import {
    BTAppArrayInfoBTAppDrawingViewInfoFromJSON,
    BTAppArrayInfoBTAppDrawingViewInfoToJSON,
    BTAppModificationRequestInfoFromJSON,
    BTAppModificationRequestInfoToJSON,
    BTDocumentElementInfoFromJSON,
    BTDocumentElementInfoToJSON,
    BTDrawingModificationParamsFromJSON,
    BTDrawingModificationParamsToJSON,
    BTDrawingParamsFromJSON,
    BTDrawingParamsToJSON,
    BTModelFormatInfoFromJSON,
    BTModelFormatInfoToJSON,
    BTTranslateFormatParamsFromJSON,
    BTTranslateFormatParamsToJSON,
    BTTranslationRequestInfoFromJSON,
    BTTranslationRequestInfoToJSON,
} from '../models';

export interface CreateDrawingAppElementRequest {
    did: string;
    wid: string;
    bTDrawingParams: BTDrawingParams;
}

export interface CreateDrawingTranslationRequest {
    did: string;
    wv: string;
    wvid: string;
    eid: string;
    bTTranslateFormatParams: BTTranslateFormatParams;
}

export interface GetDrawingTranslatorFormatsRequest {
    did: string;
    wid: string;
    eid: string;
}

export interface GetDrawingViewJsonGeometry1Request {
    did: string;
    wvm: GetDrawingViewJsonGeometry1WvmEnum;
    wvmid: string;
    eid: string;
    viewid: string;
    linkDocumentId?: string;
    transactionId?: string;
    changeId?: string;
    scale?: number;
}

export interface GetDrawingViews1Request {
    did: string;
    wvm: GetDrawingViews1WvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    transactionId?: string;
    changeId?: string;
}

export interface GetModificationStatusRequest {
    mrid: string;
}

export interface ModifyDrawingRequest {
    did: string;
    wid: string;
    eid: string;
    bTDrawingModificationParams: BTDrawingModificationParams;
    linkDocumentId?: string;
}

/**
 * 
 */
export class DrawingApi extends runtime.BaseAPI {

    /**
     * This endpoint takes a JSON Schema as input. See the schema docs below for details, and see [API Guide: Drawings](https://onshape-public.github.io/docs/api-adv/drawings/) for more information.
     * Create a new drawing in a document.
     */
    async createDrawingAppElementRaw(requestParameters: CreateDrawingAppElementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTDocumentElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createDrawingAppElement.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling createDrawingAppElement.');
        }

        if (requestParameters.bTDrawingParams === null || requestParameters.bTDrawingParams === undefined) {
            throw new runtime.RequiredError('bTDrawingParams','Required parameter requestParameters.bTDrawingParams was null or undefined when calling createDrawingAppElement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/drawings/d/{did}/w/{wid}/create`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTDrawingParamsToJSON(requestParameters.bTDrawingParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTDocumentElementInfoFromJSON(jsonValue));
    }

    /**
     * This endpoint takes a JSON Schema as input. See the schema docs below for details, and see [API Guide: Drawings](https://onshape-public.github.io/docs/api-adv/drawings/) for more information.
     * Create a new drawing in a document.
     */
    async createDrawingAppElement(requestParameters: CreateDrawingAppElementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTDocumentElementInfo> {
        const response = await this.createDrawingAppElementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export a drawing to a different format within a document. Use `getDrawingTranslatorFormats` for a list of supported translation (i.e., import/export) formats. See [API Guide: Translations](https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json) for more information.
     * Translate (export) a drawing to a different format.
     */
    async createDrawingTranslationRaw(requestParameters: CreateDrawingTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTranslationRequestInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createDrawingTranslation.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling createDrawingTranslation.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling createDrawingTranslation.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling createDrawingTranslation.');
        }

        if (requestParameters.bTTranslateFormatParams === null || requestParameters.bTTranslateFormatParams === undefined) {
            throw new runtime.RequiredError('bTTranslateFormatParams','Required parameter requestParameters.bTTranslateFormatParams was null or undefined when calling createDrawingTranslation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/drawings/d/{did}/{wv}/{wvid}/e/{eid}/translations`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTTranslateFormatParamsToJSON(requestParameters.bTTranslateFormatParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTranslationRequestInfoFromJSON(jsonValue));
    }

    /**
     * Export a drawing to a different format within a document. Use `getDrawingTranslatorFormats` for a list of supported translation (i.e., import/export) formats. See [API Guide: Translations](https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json) for more information.
     * Translate (export) a drawing to a different format.
     */
    async createDrawingTranslation(requestParameters: CreateDrawingTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTranslationRequestInfo> {
        const response = await this.createDrawingTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Translations](https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json) for more information.
     * Get a list of all valid formats the drawing can be translated (exported) to.
     */
    async getDrawingTranslatorFormatsRaw(requestParameters: GetDrawingTranslatorFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BTModelFormatInfo>>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getDrawingTranslatorFormats.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling getDrawingTranslatorFormats.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getDrawingTranslatorFormats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/drawings/d/{did}/w/{wid}/e/{eid}/translationformats`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BTModelFormatInfoFromJSON));
    }

    /**
     * See [API Guide: Translations](https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json) for more information.
     * Get a list of all valid formats the drawing can be translated (exported) to.
     */
    async getDrawingTranslatorFormats(requestParameters: GetDrawingTranslatorFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BTModelFormatInfo>> {
        const response = await this.getDrawingTranslatorFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get view geometry of a drawing view in JSON format.
     */
    async getDrawingViewJsonGeometry1Raw(requestParameters: GetDrawingViewJsonGeometry1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getDrawingViewJsonGeometry1.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getDrawingViewJsonGeometry1.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getDrawingViewJsonGeometry1.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getDrawingViewJsonGeometry1.');
        }

        if (requestParameters.viewid === null || requestParameters.viewid === undefined) {
            throw new runtime.RequiredError('viewid','Required parameter requestParameters.viewid was null or undefined when calling getDrawingViewJsonGeometry1.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.transactionId !== undefined) {
            queryParameters['transactionId'] = requestParameters.transactionId;
        }

        if (requestParameters.changeId !== undefined) {
            queryParameters['changeId'] = requestParameters.changeId;
        }

        if (requestParameters.scale !== undefined) {
            queryParameters['scale'] = requestParameters.scale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/drawings/d/{did}/{wvm}/{wvmid}/e/{eid}/views/{viewid}/jsongeometry`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"viewid"}}`, encodeURIComponent(String(requestParameters.viewid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get view geometry of a drawing view in JSON format.
     */
    async getDrawingViewJsonGeometry1(requestParameters: GetDrawingViewJsonGeometry1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getDrawingViewJsonGeometry1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of all drawing views.
     */
    async getDrawingViews1Raw(requestParameters: GetDrawingViews1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTAppArrayInfoBTAppDrawingViewInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getDrawingViews1.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getDrawingViews1.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getDrawingViews1.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getDrawingViews1.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.transactionId !== undefined) {
            queryParameters['transactionId'] = requestParameters.transactionId;
        }

        if (requestParameters.changeId !== undefined) {
            queryParameters['changeId'] = requestParameters.changeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/drawings/d/{did}/{wvm}/{wvmid}/e/{eid}/views`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTAppArrayInfoBTAppDrawingViewInfoFromJSON(jsonValue));
    }

    /**
     * Get details of all drawing views.
     */
    async getDrawingViews1(requestParameters: GetDrawingViews1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTAppArrayInfoBTAppDrawingViewInfo> {
        const response = await this.getDrawingViews1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the status of a drawing modification operation.
     */
    async getModificationStatusRaw(requestParameters: GetModificationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTAppModificationRequestInfo>> {
        if (requestParameters.mrid === null || requestParameters.mrid === undefined) {
            throw new runtime.RequiredError('mrid','Required parameter requestParameters.mrid was null or undefined when calling getModificationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/drawings/modify/status/{mrid}`.replace(`{${"mrid"}}`, encodeURIComponent(String(requestParameters.mrid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTAppModificationRequestInfoFromJSON(jsonValue));
    }

    /**
     * Get the status of a drawing modification operation.
     */
    async getModificationStatus(requestParameters: GetModificationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTAppModificationRequestInfo> {
        const response = await this.getModificationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Drawings](https://onshape-public.github.io/docs/api-adv/drawings/) for more information.
     * Modify a drawing via JSON payload.
     */
    async modifyDrawingRaw(requestParameters: ModifyDrawingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTAppModificationRequestInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling modifyDrawing.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling modifyDrawing.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling modifyDrawing.');
        }

        if (requestParameters.bTDrawingModificationParams === null || requestParameters.bTDrawingModificationParams === undefined) {
            throw new runtime.RequiredError('bTDrawingModificationParams','Required parameter requestParameters.bTDrawingModificationParams was null or undefined when calling modifyDrawing.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/drawings/d/{did}/w/{wid}/e/{eid}/modify`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTDrawingModificationParamsToJSON(requestParameters.bTDrawingModificationParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTAppModificationRequestInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Drawings](https://onshape-public.github.io/docs/api-adv/drawings/) for more information.
     * Modify a drawing via JSON payload.
     */
    async modifyDrawing(requestParameters: ModifyDrawingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTAppModificationRequestInfo> {
        const response = await this.modifyDrawingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetDrawingViewJsonGeometry1WvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetDrawingViewJsonGeometry1WvmEnum = typeof GetDrawingViewJsonGeometry1WvmEnum[keyof typeof GetDrawingViewJsonGeometry1WvmEnum];
/**
 * @export
 */
export const GetDrawingViews1WvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetDrawingViews1WvmEnum = typeof GetDrawingViews1WvmEnum[keyof typeof GetDrawingViews1WvmEnum];
