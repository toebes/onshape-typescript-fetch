/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTListResponseBTWebhookInfo,
  BTWebhookInfo,
  BTWebhookParams,
} from '../models';
import {
    BTListResponseBTWebhookInfoFromJSON,
    BTListResponseBTWebhookInfoToJSON,
    BTWebhookInfoFromJSON,
    BTWebhookInfoToJSON,
    BTWebhookParamsFromJSON,
    BTWebhookParamsToJSON,
} from '../models';

export interface CreateWebhookRequest {
    bTWebhookParams?: BTWebhookParams;
}

export interface GetWebhookRequest {
    webhookid: string;
}

export interface GetWebhooksRequest {
    company?: string;
    user?: string;
    offset?: number;
    limit?: number;
}

export interface PingWebhookRequest {
    webhookid: string;
}

export interface UnregisterWebhookRequest {
    webhookid: string;
    blockNotification?: boolean;
}

export interface UpdateWebhookRequest {
    webhookid: string;
    bTWebhookParams?: BTWebhookParams;
}

/**
 * 
 */
export class WebhookApi extends runtime.BaseAPI {

    /**
     * Click **Callbacks** below for a list of events your app can subscribe to. See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Create a new webhook.
     */
    async createWebhookRaw(requestParameters: CreateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTWebhookInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/webhooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTWebhookParamsToJSON(requestParameters.bTWebhookParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTWebhookInfoFromJSON(jsonValue));
    }

    /**
     * Click **Callbacks** below for a list of events your app can subscribe to. See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Create a new webhook.
     */
    async createWebhook(requestParameters: CreateWebhookRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTWebhookInfo> {
        const response = await this.createWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Get webhook info by webhook ID.
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTWebhookInfo>> {
        if (requestParameters.webhookid === null || requestParameters.webhookid === undefined) {
            throw new runtime.RequiredError('webhookid','Required parameter requestParameters.webhookid was null or undefined when calling getWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/webhooks/{webhookid}`.replace(`{${"webhookid"}}`, encodeURIComponent(String(requestParameters.webhookid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTWebhookInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Get webhook info by webhook ID.
     */
    async getWebhook(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTWebhookInfo> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Get a list of all webhooks registered by a user or company.
     */
    async getWebhooksRaw(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTListResponseBTWebhookInfo>> {
        const queryParameters: any = {};

        if (requestParameters.company !== undefined) {
            queryParameters['company'] = requestParameters.company;
        }

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/webhooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTListResponseBTWebhookInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Get a list of all webhooks registered by a user or company.
     */
    async getWebhooks(requestParameters: GetWebhooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTListResponseBTWebhookInfo> {
        const response = await this.getWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Ping a webhook.
     */
    async pingWebhookRaw(requestParameters: PingWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.webhookid === null || requestParameters.webhookid === undefined) {
            throw new runtime.RequiredError('webhookid','Required parameter requestParameters.webhookid was null or undefined when calling pingWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/webhooks/{webhookid}/ping`.replace(`{${"webhookid"}}`, encodeURIComponent(String(requestParameters.webhookid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Ping a webhook.
     */
    async pingWebhook(requestParameters: PingWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.pingWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Unregister a webhook.
     */
    async unregisterWebhookRaw(requestParameters: UnregisterWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.webhookid === null || requestParameters.webhookid === undefined) {
            throw new runtime.RequiredError('webhookid','Required parameter requestParameters.webhookid was null or undefined when calling unregisterWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.blockNotification !== undefined) {
            queryParameters['blockNotification'] = requestParameters.blockNotification;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/webhooks/{webhookid}`.replace(`{${"webhookid"}}`, encodeURIComponent(String(requestParameters.webhookid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Unregister a webhook.
     */
    async unregisterWebhook(requestParameters: UnregisterWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unregisterWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Update a webhook.
     */
    async updateWebhookRaw(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTWebhookInfo>> {
        if (requestParameters.webhookid === null || requestParameters.webhookid === undefined) {
            throw new runtime.RequiredError('webhookid','Required parameter requestParameters.webhookid was null or undefined when calling updateWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/webhooks/{webhookid}`.replace(`{${"webhookid"}}`, encodeURIComponent(String(requestParameters.webhookid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTWebhookParamsToJSON(requestParameters.bTWebhookParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTWebhookInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
     * Update a webhook.
     */
    async updateWebhook(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTWebhookInfo> {
        const response = await this.updateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
