/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTAssemblyItemMetadataInfo,
  BTMetadataObjectInfo,
  BTMetadataObjectListInfoBTMetadataElementInfo,
  BTMetadataObjectListInfoBTMetadataPartInfo,
} from '../models';
import {
    BTAssemblyItemMetadataInfoFromJSON,
    BTAssemblyItemMetadataInfoToJSON,
    BTMetadataObjectInfoFromJSON,
    BTMetadataObjectInfoToJSON,
    BTMetadataObjectListInfoBTMetadataElementInfoFromJSON,
    BTMetadataObjectListInfoBTMetadataElementInfoToJSON,
    BTMetadataObjectListInfoBTMetadataPartInfoFromJSON,
    BTMetadataObjectListInfoBTMetadataPartInfoToJSON,
} from '../models';

export interface GetFullAssemblyMetadataRequest {
    did: string;
    wvm: GetFullAssemblyMetadataWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
}

export interface GetVEOPStandardContentMetadataRequest {
    did: string;
    vid: string;
    eid: string;
    pid: string;
    _configuration?: string;
    linkDocumentId?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEMetadataRequest {
    did: string;
    wvm: GetWMVEMetadataWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    inferMetadataOwner?: boolean;
    depth?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEPMetadataRequest {
    did: string;
    wvm: GetWMVEPMetadataWvmEnum;
    wvmid: string;
    eid: string;
    iden: GetWMVEPMetadataIdenEnum;
    pid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    inferMetadataOwner?: boolean;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEPsMetadataRequest {
    did: string;
    wvm: GetWMVEPsMetadataWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    inferMetadataOwner?: boolean;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWMVEsMetadataRequest {
    did: string;
    wvm: string;
    wvmid: string;
    linkDocumentId?: string;
    inferMetadataOwner?: boolean;
    depth?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface GetWVMetadataRequest {
    did: string;
    wv: string;
    wvid: string;
    linkDocumentId?: string;
    inferMetadataOwner?: boolean;
    depth?: string;
    includeComputedProperties?: boolean;
    includeComputedAssemblyProperties?: boolean;
    thumbnail?: boolean;
}

export interface UpdateVEOPStandardContentPartMetadataRequest {
    did: string;
    linkDocumentId: string;
    body: string;
}

export interface UpdateWVEMetadataRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    body: string;
    _configuration?: string;
}

export interface UpdateWVEPMetadataRequest {
    did: string;
    wvm: UpdateWVEPMetadataWvmEnum;
    wvmid: string;
    eid: string;
    iden: UpdateWVEPMetadataIdenEnum;
    pid: string;
    body: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
}

export interface UpdateWVMetadataRequest {
    did: string;
    wv: string;
    wvid: string;
    body: string;
}

/**
 * 
 */
export class MetadataApi extends runtime.BaseAPI {

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.  * `configuration` optional query parameter defaults to default configuration.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for an assembly, including supporting metadata.
     */
    async getFullAssemblyMetadataRaw(requestParameters: GetFullAssemblyMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTAssemblyItemMetadataInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getFullAssemblyMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getFullAssemblyMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getFullAssemblyMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getFullAssemblyMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/assembly-debug`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTAssemblyItemMetadataInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.  * `configuration` optional query parameter defaults to default configuration.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for an assembly, including supporting metadata.
     */
    async getFullAssemblyMetadata(requestParameters: GetFullAssemblyMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTAssemblyItemMetadataInfo> {
        const response = await this.getFullAssemblyMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `pid` path parameter.  * The `configuration` and `linkDocumentId` query parameters are required.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for a standard content part.
     */
    async getVEOPStandardContentMetadataRaw(requestParameters: GetVEOPStandardContentMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        if (requestParameters.vid === null || requestParameters.vid === undefined) {
            throw new runtime.RequiredError('vid','Required parameter requestParameters.vid was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling getVEOPStandardContentMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/p/{pid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"vid"}}`, encodeURIComponent(String(requestParameters.vid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `pid` path parameter.  * The `configuration` and `linkDocumentId` query parameters are required.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for a standard content part.
     */
    async getVEOPStandardContentMetadata(requestParameters: GetVEOPStandardContentMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getVEOPStandardContentMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.  * `configuration` optional query parameter defaults to default configuration.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for an element.
     */
    async getWMVEMetadataRaw(requestParameters: GetWMVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getWMVEMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.  * `configuration` optional query parameter defaults to default configuration.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for an element.
     */
    async getWMVEMetadata(requestParameters: GetWMVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getWMVEMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `iden` or `pid` path parameter.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for a part.
     */
    async getWMVEPMetadataRaw(requestParameters: GetWMVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.iden === null || requestParameters.iden === undefined) {
            throw new runtime.RequiredError('iden','Required parameter requestParameters.iden was null or undefined when calling getWMVEPMetadata.');
        }

        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling getWMVEPMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"iden"}}`, encodeURIComponent(String(requestParameters.iden))).replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `iden` or `pid` path parameter.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for a part.
     */
    async getWMVEPMetadata(requestParameters: GetWMVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getWMVEPMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for all parts in a document.
     */
    async getWMVEPsMetadataRaw(requestParameters: GetWMVEPsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectListInfoBTMetadataPartInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEPsMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEPsMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEPsMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getWMVEPsMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectListInfoBTMetadataPartInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for all parts in a document.
     */
    async getWMVEPsMetadata(requestParameters: GetWMVEPsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectListInfoBTMetadataPartInfo> {
        const response = await this.getWMVEPsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * You can specify the optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for all elements in a document.
     */
    async getWMVEsMetadataRaw(requestParameters: GetWMVEsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectListInfoBTMetadataElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWMVEsMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getWMVEsMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getWMVEsMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectListInfoBTMetadataElementInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * You can specify the optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for all elements in a document.
     */
    async getWMVEsMetadata(requestParameters: GetWMVEsMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectListInfoBTMetadataElementInfo> {
        const response = await this.getWMVEsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for a workspace or version.
     */
    async getWVMetadataRaw(requestParameters: GetWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMetadataObjectInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getWVMetadata.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getWVMetadata.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getWVMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.inferMetadataOwner !== undefined) {
            queryParameters['inferMetadataOwner'] = requestParameters.inferMetadataOwner;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        if (requestParameters.includeComputedProperties !== undefined) {
            queryParameters['includeComputedProperties'] = requestParameters.includeComputedProperties;
        }

        if (requestParameters.includeComputedAssemblyProperties !== undefined) {
            queryParameters['includeComputedAssemblyProperties'] = requestParameters.includeComputedAssemblyProperties;
        }

        if (requestParameters.thumbnail !== undefined) {
            queryParameters['thumbnail'] = requestParameters.thumbnail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wv}/{wvid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMetadataObjectInfoFromJSON(jsonValue));
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
     * Get the metadata for a workspace or version.
     */
    async getWVMetadata(requestParameters: GetWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMetadataObjectInfo> {
        const response = await this.getWVMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the document ID to update in the `did` path param.  * Specify the document in which you have inserted the standard content part in the `linkDocumentId` query param.  * Specify the property metadata to update in the Request body.
     * Update the metadata for a standard content part.
     */
    async updateVEOPStandardContentPartMetadataRaw(requestParameters: UpdateVEOPStandardContentPartMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }

        if (requestParameters.linkDocumentId === null || requestParameters.linkDocumentId === undefined) {
            throw new runtime.RequiredError('linkDocumentId','Required parameter requestParameters.linkDocumentId was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateVEOPStandardContentPartMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/standardcontent/d/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the document ID to update in the `did` path param.  * Specify the document in which you have inserted the standard content part in the `linkDocumentId` query param.  * Specify the property metadata to update in the Request body.
     * Update the metadata for a standard content part.
     */
    async updateVEOPStandardContentPartMetadata(requestParameters: UpdateVEOPStandardContentPartMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateVEOPStandardContentPartMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Microversion (`m`) in `wvm` path parameter option is not supported.  * Specify the property metadata to update in the Request body.
     * Update the metadata for an element.
     */
    async updateWVEMetadataRaw(requestParameters: UpdateWVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updateWVEMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWVEMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Microversion (`m`) in `wvm` path parameter option is not supported.  * Specify the property metadata to update in the Request body.
     * Update the metadata for an element.
     */
    async updateWVEMetadata(requestParameters: UpdateWVEMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateWVEMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `iden` or `pid` path parameter.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * Specify the property metadata to update in the Request body.
     * Update the metadata for a part.
     */
    async updateWVEPMetadataRaw(requestParameters: UpdateWVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.iden === null || requestParameters.iden === undefined) {
            throw new runtime.RequiredError('iden','Required parameter requestParameters.iden was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling updateWVEPMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWVEPMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"iden"}}`, encodeURIComponent(String(requestParameters.iden))).replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `iden` or `pid` path parameter.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * Specify the property metadata to update in the Request body.
     * Update the metadata for a part.
     */
    async updateWVEPMetadata(requestParameters: UpdateWVEPMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateWVEPMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
     * Update the metadata for a workspace or version.
     */
    async updateWVMetadataRaw(requestParameters: UpdateWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateWVMetadata.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling updateWVMetadata.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling updateWVMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWVMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/metadata/d/{did}/{wv}/{wvid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
     * Update the metadata for a workspace or version.
     */
    async updateWVMetadata(requestParameters: UpdateWVMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateWVMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFullAssemblyMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetFullAssemblyMetadataWvmEnum = typeof GetFullAssemblyMetadataWvmEnum[keyof typeof GetFullAssemblyMetadataWvmEnum];
/**
 * @export
 */
export const GetWMVEMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetWMVEMetadataWvmEnum = typeof GetWMVEMetadataWvmEnum[keyof typeof GetWMVEMetadataWvmEnum];
/**
 * @export
 */
export const GetWMVEPMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetWMVEPMetadataWvmEnum = typeof GetWMVEPMetadataWvmEnum[keyof typeof GetWMVEPMetadataWvmEnum];
/**
 * @export
 */
export const GetWMVEPMetadataIdenEnum = {
    P: 'p',
    Pi: 'pi'
} as const;
export type GetWMVEPMetadataIdenEnum = typeof GetWMVEPMetadataIdenEnum[keyof typeof GetWMVEPMetadataIdenEnum];
/**
 * @export
 */
export const GetWMVEPsMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetWMVEPsMetadataWvmEnum = typeof GetWMVEPsMetadataWvmEnum[keyof typeof GetWMVEPsMetadataWvmEnum];
/**
 * @export
 */
export const UpdateWVEPMetadataWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type UpdateWVEPMetadataWvmEnum = typeof UpdateWVEPMetadataWvmEnum[keyof typeof UpdateWVEPMetadataWvmEnum];
/**
 * @export
 */
export const UpdateWVEPMetadataIdenEnum = {
    P: 'p',
    Pi: 'pi'
} as const;
export type UpdateWVEPMetadataIdenEnum = typeof UpdateWVEPMetadataIdenEnum[keyof typeof UpdateWVEPMetadataIdenEnum];
