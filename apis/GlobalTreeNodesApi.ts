/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTGlobalTreeNodesInfo,
} from '../models';
import {
    BTGlobalTreeNodesInfoFromJSON,
    BTGlobalTreeNodesInfoToJSON,
} from '../models';

export interface GlobalTreeNodesFolderRequest {
    fid: string;
    getPathToRoot?: boolean;
    offset?: number;
    limit?: number;
    sortColumn?: string;
    sortOrder?: string;
}

export interface GlobalTreeNodesFolderInsertablesRequest {
    fid: string;
    includeParts?: boolean;
    includeSurfaces?: boolean;
    includeSketches?: boolean;
    includeReferenceFeatures?: boolean;
    includeAssemblies?: boolean;
    includeFeatureStudios?: boolean;
    includeBlobs?: boolean;
    allowedBlobMimeTypes?: string;
    includePartStudios?: boolean;
    includeFeatures?: boolean;
    includeWires?: boolean;
    includeFlattenedBodies?: boolean;
    includeApplications?: boolean;
    allowedApplicationMimeTypes?: string;
    includeFSTables?: boolean;
    includeFSComputedPartPropertyFunctions?: boolean;
    includeVariables?: boolean;
    includeVariableStudios?: boolean;
    allowedBlobExtensions?: string;
    excludeNewerFSVersions?: boolean;
    maxFeatureScriptVersion?: number;
    includeMeshes?: boolean;
    includeCompositeParts?: boolean;
    getPathToRoot?: boolean;
    offset?: number;
    limit?: number;
    sortColumn?: string;
    sortOrder?: string;
}

export interface GlobalTreeNodesMagicRequest {
    mid: string;
    getPathToRoot?: boolean;
    offset?: number;
    limit?: number;
    sortColumn?: string;
    sortOrder?: string;
    includeParts?: boolean;
    includeSurfaces?: boolean;
    includeSketches?: boolean;
    includeReferenceFeatures?: boolean;
    includeAssemblies?: boolean;
    includeFeatureStudios?: boolean;
    includeBlobs?: boolean;
    allowedBlobMimeTypes?: string;
    includePartStudios?: boolean;
    includeFeatures?: boolean;
    includeWires?: boolean;
    includeFlattenedBodies?: boolean;
    includeApplications?: boolean;
    allowedApplicationMimeTypes?: string;
    includeFSTables?: boolean;
    includeFSComputedPartPropertyFunctions?: boolean;
    includeVariables?: boolean;
    includeVariableStudios?: boolean;
    allowedBlobExtensions?: string;
    excludeNewerFSVersions?: boolean;
    maxFeatureScriptVersion?: number;
    includeMeshes?: boolean;
    includeCompositeParts?: boolean;
}

export interface GlobalTreeNodesTeamRequest {
    teamId: string;
    getPathToRoot?: boolean;
    offset?: number;
    limit?: number;
    sortColumn?: string;
    sortOrder?: string;
}

export interface GlobalTreeNodesTeamInsertablesRequest {
    teamId: string;
    includeParts?: boolean;
    includeSurfaces?: boolean;
    includeSketches?: boolean;
    includeReferenceFeatures?: boolean;
    includeAssemblies?: boolean;
    includeFeatureStudios?: boolean;
    includeBlobs?: boolean;
    allowedBlobMimeTypes?: string;
    includePartStudios?: boolean;
    includeFeatures?: boolean;
    includeWires?: boolean;
    includeFlattenedBodies?: boolean;
    includeApplications?: boolean;
    allowedApplicationMimeTypes?: string;
    includeFSTables?: boolean;
    includeFSComputedPartPropertyFunctions?: boolean;
    includeVariables?: boolean;
    includeVariableStudios?: boolean;
    allowedBlobExtensions?: string;
    excludeNewerFSVersions?: boolean;
    maxFeatureScriptVersion?: number;
    includeMeshes?: boolean;
    includeCompositeParts?: boolean;
    getPathToRoot?: boolean;
    offset?: number;
    limit?: number;
    sortColumn?: string;
    sortOrder?: string;
}

/**
 * 
 */
export class GlobalTreeNodesApi extends runtime.BaseAPI {

    /**
     * Get Searchable Trees
     */
    async globalTreeNodesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTGlobalTreeNodesInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/globaltreenodes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTGlobalTreeNodesInfoFromJSON(jsonValue));
    }

    /**
     * Get Searchable Trees
     */
    async globalTreeNodes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTGlobalTreeNodesInfo> {
        const response = await this.globalTreeNodesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Tree Node List
     */
    async globalTreeNodesFolderRaw(requestParameters: GlobalTreeNodesFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTGlobalTreeNodesInfo>> {
        if (requestParameters.fid === null || requestParameters.fid === undefined) {
            throw new runtime.RequiredError('fid','Required parameter requestParameters.fid was null or undefined when calling globalTreeNodesFolder.');
        }

        const queryParameters: any = {};

        if (requestParameters.getPathToRoot !== undefined) {
            queryParameters['getPathToRoot'] = requestParameters.getPathToRoot;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortColumn !== undefined) {
            queryParameters['sortColumn'] = requestParameters.sortColumn;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/globaltreenodes/folder/{fid}`.replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters.fid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTGlobalTreeNodesInfoFromJSON(jsonValue));
    }

    /**
     * Get Tree Node List
     */
    async globalTreeNodesFolder(requestParameters: GlobalTreeNodesFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTGlobalTreeNodesInfo> {
        const response = await this.globalTreeNodesFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve insertables by folder id.
     */
    async globalTreeNodesFolderInsertablesRaw(requestParameters: GlobalTreeNodesFolderInsertablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTGlobalTreeNodesInfo>> {
        if (requestParameters.fid === null || requestParameters.fid === undefined) {
            throw new runtime.RequiredError('fid','Required parameter requestParameters.fid was null or undefined when calling globalTreeNodesFolderInsertables.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeParts !== undefined) {
            queryParameters['includeParts'] = requestParameters.includeParts;
        }

        if (requestParameters.includeSurfaces !== undefined) {
            queryParameters['includeSurfaces'] = requestParameters.includeSurfaces;
        }

        if (requestParameters.includeSketches !== undefined) {
            queryParameters['includeSketches'] = requestParameters.includeSketches;
        }

        if (requestParameters.includeReferenceFeatures !== undefined) {
            queryParameters['includeReferenceFeatures'] = requestParameters.includeReferenceFeatures;
        }

        if (requestParameters.includeAssemblies !== undefined) {
            queryParameters['includeAssemblies'] = requestParameters.includeAssemblies;
        }

        if (requestParameters.includeFeatureStudios !== undefined) {
            queryParameters['includeFeatureStudios'] = requestParameters.includeFeatureStudios;
        }

        if (requestParameters.includeBlobs !== undefined) {
            queryParameters['includeBlobs'] = requestParameters.includeBlobs;
        }

        if (requestParameters.allowedBlobMimeTypes !== undefined) {
            queryParameters['allowedBlobMimeTypes'] = requestParameters.allowedBlobMimeTypes;
        }

        if (requestParameters.includePartStudios !== undefined) {
            queryParameters['includePartStudios'] = requestParameters.includePartStudios;
        }

        if (requestParameters.includeFeatures !== undefined) {
            queryParameters['includeFeatures'] = requestParameters.includeFeatures;
        }

        if (requestParameters.includeWires !== undefined) {
            queryParameters['includeWires'] = requestParameters.includeWires;
        }

        if (requestParameters.includeFlattenedBodies !== undefined) {
            queryParameters['includeFlattenedBodies'] = requestParameters.includeFlattenedBodies;
        }

        if (requestParameters.includeApplications !== undefined) {
            queryParameters['includeApplications'] = requestParameters.includeApplications;
        }

        if (requestParameters.allowedApplicationMimeTypes !== undefined) {
            queryParameters['allowedApplicationMimeTypes'] = requestParameters.allowedApplicationMimeTypes;
        }

        if (requestParameters.includeFSTables !== undefined) {
            queryParameters['includeFSTables'] = requestParameters.includeFSTables;
        }

        if (requestParameters.includeFSComputedPartPropertyFunctions !== undefined) {
            queryParameters['includeFSComputedPartPropertyFunctions'] = requestParameters.includeFSComputedPartPropertyFunctions;
        }

        if (requestParameters.includeVariables !== undefined) {
            queryParameters['includeVariables'] = requestParameters.includeVariables;
        }

        if (requestParameters.includeVariableStudios !== undefined) {
            queryParameters['includeVariableStudios'] = requestParameters.includeVariableStudios;
        }

        if (requestParameters.allowedBlobExtensions !== undefined) {
            queryParameters['allowedBlobExtensions'] = requestParameters.allowedBlobExtensions;
        }

        if (requestParameters.excludeNewerFSVersions !== undefined) {
            queryParameters['excludeNewerFSVersions'] = requestParameters.excludeNewerFSVersions;
        }

        if (requestParameters.maxFeatureScriptVersion !== undefined) {
            queryParameters['maxFeatureScriptVersion'] = requestParameters.maxFeatureScriptVersion;
        }

        if (requestParameters.includeMeshes !== undefined) {
            queryParameters['includeMeshes'] = requestParameters.includeMeshes;
        }

        if (requestParameters.includeCompositeParts !== undefined) {
            queryParameters['includeCompositeParts'] = requestParameters.includeCompositeParts;
        }

        if (requestParameters.getPathToRoot !== undefined) {
            queryParameters['getPathToRoot'] = requestParameters.getPathToRoot;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortColumn !== undefined) {
            queryParameters['sortColumn'] = requestParameters.sortColumn;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/globaltreenodes/insertable/folder/{fid}`.replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters.fid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTGlobalTreeNodesInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve insertables by folder id.
     */
    async globalTreeNodesFolderInsertables(requestParameters: GlobalTreeNodesFolderInsertablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTGlobalTreeNodesInfo> {
        const response = await this.globalTreeNodesFolderInsertablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all the elements in one of several globally defined lists. Known values include: | MAGIC ID | TITLE | USAGE | |-|-|-| | 0 | Recently Opened | Most recently opened documents | | 1 | My Onshape | Root folder and contents | | 2 | Created by Me | Documents created by the logged in user | | 3 | Public | All public documents (a very long list) | | 4 | Trash | Trashcan for the logged in user | | 5 | Tutorials & Samples | Desktop Tutorials | | 6 | FeatureScript samples |  FeatureScript samples (found when you select Other documents while adding a custom feature) | | 7 | Community spotlight | Community spotlight (found when you select Other documents while adding a custom feature) | | 8 | Tutorials | IOS Tutorials | | 9 | Tutorials | Android Tutorials | | 10 | Labels | Labels created by the user  | | 11 | Teams | Teams that the user is connected to | | 12 | Shared with me | Documents shared with the user | | 13 | Cloud Storage | Visual list of cloud accounts associated with the logged in user | | 14 | Custom table samples | Custom table samples (found when you select Other documents while adding a custom table) | 
     * Get Tree Node List
     */
    async globalTreeNodesMagicRaw(requestParameters: GlobalTreeNodesMagicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTGlobalTreeNodesInfo>> {
        if (requestParameters.mid === null || requestParameters.mid === undefined) {
            throw new runtime.RequiredError('mid','Required parameter requestParameters.mid was null or undefined when calling globalTreeNodesMagic.');
        }

        const queryParameters: any = {};

        if (requestParameters.getPathToRoot !== undefined) {
            queryParameters['getPathToRoot'] = requestParameters.getPathToRoot;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortColumn !== undefined) {
            queryParameters['sortColumn'] = requestParameters.sortColumn;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.includeParts !== undefined) {
            queryParameters['includeParts'] = requestParameters.includeParts;
        }

        if (requestParameters.includeSurfaces !== undefined) {
            queryParameters['includeSurfaces'] = requestParameters.includeSurfaces;
        }

        if (requestParameters.includeSketches !== undefined) {
            queryParameters['includeSketches'] = requestParameters.includeSketches;
        }

        if (requestParameters.includeReferenceFeatures !== undefined) {
            queryParameters['includeReferenceFeatures'] = requestParameters.includeReferenceFeatures;
        }

        if (requestParameters.includeAssemblies !== undefined) {
            queryParameters['includeAssemblies'] = requestParameters.includeAssemblies;
        }

        if (requestParameters.includeFeatureStudios !== undefined) {
            queryParameters['includeFeatureStudios'] = requestParameters.includeFeatureStudios;
        }

        if (requestParameters.includeBlobs !== undefined) {
            queryParameters['includeBlobs'] = requestParameters.includeBlobs;
        }

        if (requestParameters.allowedBlobMimeTypes !== undefined) {
            queryParameters['allowedBlobMimeTypes'] = requestParameters.allowedBlobMimeTypes;
        }

        if (requestParameters.includePartStudios !== undefined) {
            queryParameters['includePartStudios'] = requestParameters.includePartStudios;
        }

        if (requestParameters.includeFeatures !== undefined) {
            queryParameters['includeFeatures'] = requestParameters.includeFeatures;
        }

        if (requestParameters.includeWires !== undefined) {
            queryParameters['includeWires'] = requestParameters.includeWires;
        }

        if (requestParameters.includeFlattenedBodies !== undefined) {
            queryParameters['includeFlattenedBodies'] = requestParameters.includeFlattenedBodies;
        }

        if (requestParameters.includeApplications !== undefined) {
            queryParameters['includeApplications'] = requestParameters.includeApplications;
        }

        if (requestParameters.allowedApplicationMimeTypes !== undefined) {
            queryParameters['allowedApplicationMimeTypes'] = requestParameters.allowedApplicationMimeTypes;
        }

        if (requestParameters.includeFSTables !== undefined) {
            queryParameters['includeFSTables'] = requestParameters.includeFSTables;
        }

        if (requestParameters.includeFSComputedPartPropertyFunctions !== undefined) {
            queryParameters['includeFSComputedPartPropertyFunctions'] = requestParameters.includeFSComputedPartPropertyFunctions;
        }

        if (requestParameters.includeVariables !== undefined) {
            queryParameters['includeVariables'] = requestParameters.includeVariables;
        }

        if (requestParameters.includeVariableStudios !== undefined) {
            queryParameters['includeVariableStudios'] = requestParameters.includeVariableStudios;
        }

        if (requestParameters.allowedBlobExtensions !== undefined) {
            queryParameters['allowedBlobExtensions'] = requestParameters.allowedBlobExtensions;
        }

        if (requestParameters.excludeNewerFSVersions !== undefined) {
            queryParameters['excludeNewerFSVersions'] = requestParameters.excludeNewerFSVersions;
        }

        if (requestParameters.maxFeatureScriptVersion !== undefined) {
            queryParameters['maxFeatureScriptVersion'] = requestParameters.maxFeatureScriptVersion;
        }

        if (requestParameters.includeMeshes !== undefined) {
            queryParameters['includeMeshes'] = requestParameters.includeMeshes;
        }

        if (requestParameters.includeCompositeParts !== undefined) {
            queryParameters['includeCompositeParts'] = requestParameters.includeCompositeParts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/globaltreenodes/magic/{mid}`.replace(`{${"mid"}}`, encodeURIComponent(String(requestParameters.mid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTGlobalTreeNodesInfoFromJSON(jsonValue));
    }

    /**
     * Returns a list of all the elements in one of several globally defined lists. Known values include: | MAGIC ID | TITLE | USAGE | |-|-|-| | 0 | Recently Opened | Most recently opened documents | | 1 | My Onshape | Root folder and contents | | 2 | Created by Me | Documents created by the logged in user | | 3 | Public | All public documents (a very long list) | | 4 | Trash | Trashcan for the logged in user | | 5 | Tutorials & Samples | Desktop Tutorials | | 6 | FeatureScript samples |  FeatureScript samples (found when you select Other documents while adding a custom feature) | | 7 | Community spotlight | Community spotlight (found when you select Other documents while adding a custom feature) | | 8 | Tutorials | IOS Tutorials | | 9 | Tutorials | Android Tutorials | | 10 | Labels | Labels created by the user  | | 11 | Teams | Teams that the user is connected to | | 12 | Shared with me | Documents shared with the user | | 13 | Cloud Storage | Visual list of cloud accounts associated with the logged in user | | 14 | Custom table samples | Custom table samples (found when you select Other documents while adding a custom table) | 
     * Get Tree Node List
     */
    async globalTreeNodesMagic(requestParameters: GlobalTreeNodesMagicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTGlobalTreeNodesInfo> {
        const response = await this.globalTreeNodesMagicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve List of folders by Team id.
     */
    async globalTreeNodesTeamRaw(requestParameters: GlobalTreeNodesTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTGlobalTreeNodesInfo>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling globalTreeNodesTeam.');
        }

        const queryParameters: any = {};

        if (requestParameters.getPathToRoot !== undefined) {
            queryParameters['getPathToRoot'] = requestParameters.getPathToRoot;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortColumn !== undefined) {
            queryParameters['sortColumn'] = requestParameters.sortColumn;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/globaltreenodes/team/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTGlobalTreeNodesInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve List of folders by Team id.
     */
    async globalTreeNodesTeam(requestParameters: GlobalTreeNodesTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTGlobalTreeNodesInfo> {
        const response = await this.globalTreeNodesTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve insertables by Team id.
     */
    async globalTreeNodesTeamInsertablesRaw(requestParameters: GlobalTreeNodesTeamInsertablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTGlobalTreeNodesInfo>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling globalTreeNodesTeamInsertables.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeParts !== undefined) {
            queryParameters['includeParts'] = requestParameters.includeParts;
        }

        if (requestParameters.includeSurfaces !== undefined) {
            queryParameters['includeSurfaces'] = requestParameters.includeSurfaces;
        }

        if (requestParameters.includeSketches !== undefined) {
            queryParameters['includeSketches'] = requestParameters.includeSketches;
        }

        if (requestParameters.includeReferenceFeatures !== undefined) {
            queryParameters['includeReferenceFeatures'] = requestParameters.includeReferenceFeatures;
        }

        if (requestParameters.includeAssemblies !== undefined) {
            queryParameters['includeAssemblies'] = requestParameters.includeAssemblies;
        }

        if (requestParameters.includeFeatureStudios !== undefined) {
            queryParameters['includeFeatureStudios'] = requestParameters.includeFeatureStudios;
        }

        if (requestParameters.includeBlobs !== undefined) {
            queryParameters['includeBlobs'] = requestParameters.includeBlobs;
        }

        if (requestParameters.allowedBlobMimeTypes !== undefined) {
            queryParameters['allowedBlobMimeTypes'] = requestParameters.allowedBlobMimeTypes;
        }

        if (requestParameters.includePartStudios !== undefined) {
            queryParameters['includePartStudios'] = requestParameters.includePartStudios;
        }

        if (requestParameters.includeFeatures !== undefined) {
            queryParameters['includeFeatures'] = requestParameters.includeFeatures;
        }

        if (requestParameters.includeWires !== undefined) {
            queryParameters['includeWires'] = requestParameters.includeWires;
        }

        if (requestParameters.includeFlattenedBodies !== undefined) {
            queryParameters['includeFlattenedBodies'] = requestParameters.includeFlattenedBodies;
        }

        if (requestParameters.includeApplications !== undefined) {
            queryParameters['includeApplications'] = requestParameters.includeApplications;
        }

        if (requestParameters.allowedApplicationMimeTypes !== undefined) {
            queryParameters['allowedApplicationMimeTypes'] = requestParameters.allowedApplicationMimeTypes;
        }

        if (requestParameters.includeFSTables !== undefined) {
            queryParameters['includeFSTables'] = requestParameters.includeFSTables;
        }

        if (requestParameters.includeFSComputedPartPropertyFunctions !== undefined) {
            queryParameters['includeFSComputedPartPropertyFunctions'] = requestParameters.includeFSComputedPartPropertyFunctions;
        }

        if (requestParameters.includeVariables !== undefined) {
            queryParameters['includeVariables'] = requestParameters.includeVariables;
        }

        if (requestParameters.includeVariableStudios !== undefined) {
            queryParameters['includeVariableStudios'] = requestParameters.includeVariableStudios;
        }

        if (requestParameters.allowedBlobExtensions !== undefined) {
            queryParameters['allowedBlobExtensions'] = requestParameters.allowedBlobExtensions;
        }

        if (requestParameters.excludeNewerFSVersions !== undefined) {
            queryParameters['excludeNewerFSVersions'] = requestParameters.excludeNewerFSVersions;
        }

        if (requestParameters.maxFeatureScriptVersion !== undefined) {
            queryParameters['maxFeatureScriptVersion'] = requestParameters.maxFeatureScriptVersion;
        }

        if (requestParameters.includeMeshes !== undefined) {
            queryParameters['includeMeshes'] = requestParameters.includeMeshes;
        }

        if (requestParameters.includeCompositeParts !== undefined) {
            queryParameters['includeCompositeParts'] = requestParameters.includeCompositeParts;
        }

        if (requestParameters.getPathToRoot !== undefined) {
            queryParameters['getPathToRoot'] = requestParameters.getPathToRoot;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortColumn !== undefined) {
            queryParameters['sortColumn'] = requestParameters.sortColumn;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/globaltreenodes/insertable/team/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTGlobalTreeNodesInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve insertables by Team id.
     */
    async globalTreeNodesTeamInsertables(requestParameters: GlobalTreeNodesTeamInsertablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTGlobalTreeNodesInfo> {
        const response = await this.globalTreeNodesTeamInsertablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
