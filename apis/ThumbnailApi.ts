/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTApplicationElementThumbnailParamsArray,
  BTThumbnailInfo,
} from '../models';
import {
    BTApplicationElementThumbnailParamsArrayFromJSON,
    BTApplicationElementThumbnailParamsArrayToJSON,
    BTThumbnailInfoFromJSON,
    BTThumbnailInfoToJSON,
} from '../models';

export interface DeleteApplicationThumbnailsRequest {
    did: string;
    wv: DeleteApplicationThumbnailsWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
}

export interface GetDocumentDefaultThumbnailWithSizeRequest {
    did: string;
    sz: string;
    t?: string;
    skipDefaultImage?: string;
}

export interface GetDocumentThumbnailRequest {
    did: string;
    wid: string;
}

export interface GetDocumentThumbnailWithSizeRequest {
    did: string;
    wid: string;
    sz: string;
    t?: string;
    skipDefaultImage?: string;
}

export interface GetElementThumbnailRequest {
    did: string;
    wv: GetElementThumbnailWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
}

export interface GetElementThumbnailWithApiConfigurationRequest {
    did: string;
    wid: string;
    eid: string;
    cid: string;
    sz: string;
    linkDocumentId?: string;
    t?: string;
    skipDefaultImage?: string;
    rejectEmpty?: boolean;
    requireConfigMatch?: boolean;
}

export interface GetElementThumbnailWithSizeRequest {
    did: string;
    wv: GetElementThumbnailWithSizeWvEnum;
    wvid: string;
    eid: string;
    sz: string;
    linkDocumentId?: string;
    t?: string;
    skipDefaultImage?: string;
    rejectEmpty?: boolean;
}

export interface GetThumbnailForDocumentRequest {
    did: string;
}

export interface GetThumbnailForDocumentAndVersionRequest {
    did: string;
    vid: string;
    linkDocumentId?: string;
}

export interface GetThumbnailForDocumentAndVersionOldRequest {
    did: string;
    vid: string;
}

export interface GetThumbnailForDocumentOldRequest {
    did: string;
}

export interface SetApplicationElementThumbnailRequest {
    did: string;
    wv: SetApplicationElementThumbnailWvEnum;
    wvid: string;
    eid: string;
    bTApplicationElementThumbnailParamsArray: BTApplicationElementThumbnailParamsArray;
    linkDocumentId?: string;
    overwrite?: boolean;
}

/**
 * 
 */
export class ThumbnailApi extends runtime.BaseAPI {

    /**
     * Deletes an application element\'s thumbnail and images for the given document, workspace or version, and element combination.
     * Delete an element\'s thumbnail.
     */
    async deleteApplicationThumbnailsRaw(requestParameters: DeleteApplicationThumbnailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling deleteApplicationThumbnails.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling deleteApplicationThumbnails.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling deleteApplicationThumbnails.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling deleteApplicationThumbnails.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes an application element\'s thumbnail and images for the given document, workspace or version, and element combination.
     * Delete an element\'s thumbnail.
     */
    async deleteApplicationThumbnails(requestParameters: DeleteApplicationThumbnailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteApplicationThumbnailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve default thumbnail information for a document, with a specified size in pixels by document ID.
     */
    async getDocumentDefaultThumbnailWithSizeRaw(requestParameters: GetDocumentDefaultThumbnailWithSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getDocumentDefaultThumbnailWithSize.');
        }

        if (requestParameters.sz === null || requestParameters.sz === undefined) {
            throw new runtime.RequiredError('sz','Required parameter requestParameters.sz was null or undefined when calling getDocumentDefaultThumbnailWithSize.');
        }

        const queryParameters: any = {};

        if (requestParameters.t !== undefined) {
            queryParameters['t'] = requestParameters.t;
        }

        if (requestParameters.skipDefaultImage !== undefined) {
            queryParameters['skipDefaultImage'] = requestParameters.skipDefaultImage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/s/{sz}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"sz"}}`, encodeURIComponent(String(requestParameters.sz))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve default thumbnail information for a document, with a specified size in pixels by document ID.
     */
    async getDocumentDefaultThumbnailWithSize(requestParameters: GetDocumentDefaultThumbnailWithSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getDocumentDefaultThumbnailWithSizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail info for a workspace.
     */
    async getDocumentThumbnailRaw(requestParameters: GetDocumentThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTThumbnailInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getDocumentThumbnail.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling getDocumentThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/w/{wid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTThumbnailInfoFromJSON(jsonValue));
    }

    /**
     * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail info for a workspace.
     */
    async getDocumentThumbnail(requestParameters: GetDocumentThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTThumbnailInfo> {
        const response = await this.getDocumentThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * By default, returns thumbnail image for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail image with the given size for a document.
     */
    async getDocumentThumbnailWithSizeRaw(requestParameters: GetDocumentThumbnailWithSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getDocumentThumbnailWithSize.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling getDocumentThumbnailWithSize.');
        }

        if (requestParameters.sz === null || requestParameters.sz === undefined) {
            throw new runtime.RequiredError('sz','Required parameter requestParameters.sz was null or undefined when calling getDocumentThumbnailWithSize.');
        }

        const queryParameters: any = {};

        if (requestParameters.t !== undefined) {
            queryParameters['t'] = requestParameters.t;
        }

        if (requestParameters.skipDefaultImage !== undefined) {
            queryParameters['skipDefaultImage'] = requestParameters.skipDefaultImage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/w/{wid}/s/{sz}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"sz"}}`, encodeURIComponent(String(requestParameters.sz))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * * By default, returns thumbnail image for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail image with the given size for a document.
     */
    async getDocumentThumbnailWithSize(requestParameters: GetDocumentThumbnailWithSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getDocumentThumbnailWithSizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns thumbnail info for the given document, workspace or version, and element.
     * Get the thumbnail info structure for an element.
     */
    async getElementThumbnailRaw(requestParameters: GetElementThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTThumbnailInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getElementThumbnail.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getElementThumbnail.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getElementThumbnail.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getElementThumbnail.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTThumbnailInfoFromJSON(jsonValue));
    }

    /**
     * Returns thumbnail info for the given document, workspace or version, and element.
     * Get the thumbnail info structure for an element.
     */
    async getElementThumbnail(requestParameters: GetElementThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTThumbnailInfo> {
        const response = await this.getElementThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the thumbnail image for an element at a specified version, with the given configuration.
     * Get the thumbnail image with the given configuration for an element.
     */
    async getElementThumbnailWithApiConfigurationRaw(requestParameters: GetElementThumbnailWithApiConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getElementThumbnailWithApiConfiguration.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling getElementThumbnailWithApiConfiguration.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getElementThumbnailWithApiConfiguration.');
        }

        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getElementThumbnailWithApiConfiguration.');
        }

        if (requestParameters.sz === null || requestParameters.sz === undefined) {
            throw new runtime.RequiredError('sz','Required parameter requestParameters.sz was null or undefined when calling getElementThumbnailWithApiConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.t !== undefined) {
            queryParameters['t'] = requestParameters.t;
        }

        if (requestParameters.skipDefaultImage !== undefined) {
            queryParameters['skipDefaultImage'] = requestParameters.skipDefaultImage;
        }

        if (requestParameters.rejectEmpty !== undefined) {
            queryParameters['rejectEmpty'] = requestParameters.rejectEmpty;
        }

        if (requestParameters.requireConfigMatch !== undefined) {
            queryParameters['requireConfigMatch'] = requestParameters.requireConfigMatch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/w/{wid}/e/{eid}/ac/{cid}/s/{sz}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"sz"}}`, encodeURIComponent(String(requestParameters.sz))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the thumbnail image for an element at a specified version, with the given configuration.
     * Get the thumbnail image with the given configuration for an element.
     */
    async getElementThumbnailWithApiConfiguration(requestParameters: GetElementThumbnailWithApiConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getElementThumbnailWithApiConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the thumbnail image with the given size for an element.
     */
    async getElementThumbnailWithSizeRaw(requestParameters: GetElementThumbnailWithSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getElementThumbnailWithSize.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getElementThumbnailWithSize.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getElementThumbnailWithSize.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getElementThumbnailWithSize.');
        }

        if (requestParameters.sz === null || requestParameters.sz === undefined) {
            throw new runtime.RequiredError('sz','Required parameter requestParameters.sz was null or undefined when calling getElementThumbnailWithSize.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.t !== undefined) {
            queryParameters['t'] = requestParameters.t;
        }

        if (requestParameters.skipDefaultImage !== undefined) {
            queryParameters['skipDefaultImage'] = requestParameters.skipDefaultImage;
        }

        if (requestParameters.rejectEmpty !== undefined) {
            queryParameters['rejectEmpty'] = requestParameters.rejectEmpty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}/s/{sz}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"sz"}}`, encodeURIComponent(String(requestParameters.sz))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the thumbnail image with the given size for an element.
     */
    async getElementThumbnailWithSize(requestParameters: GetElementThumbnailWithSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getElementThumbnailWithSizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * The default workspace may vary by user; the image served depends on the signed-in user. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail info for a document in the default workspace.
     */
    async getThumbnailForDocumentRaw(requestParameters: GetThumbnailForDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTThumbnailInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getThumbnailForDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTThumbnailInfoFromJSON(jsonValue));
    }

    /**
     * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * The default workspace may vary by user; the image served depends on the signed-in user. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail info for a document in the default workspace.
     */
    async getThumbnailForDocument(requestParameters: GetThumbnailForDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTThumbnailInfo> {
        const response = await this.getThumbnailForDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail info for a version of a document.
     */
    async getThumbnailForDocumentAndVersionRaw(requestParameters: GetThumbnailForDocumentAndVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTThumbnailInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getThumbnailForDocumentAndVersion.');
        }

        if (requestParameters.vid === null || requestParameters.vid === undefined) {
            throw new runtime.RequiredError('vid','Required parameter requestParameters.vid was null or undefined when calling getThumbnailForDocumentAndVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/v/{vid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"vid"}}`, encodeURIComponent(String(requestParameters.vid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTThumbnailInfoFromJSON(jsonValue));
    }

    /**
     * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace. * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
     * Get the thumbnail info for a version of a document.
     */
    async getThumbnailForDocumentAndVersion(requestParameters: GetThumbnailForDocumentAndVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTThumbnailInfo> {
        const response = await this.getThumbnailForDocumentAndVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.
     * This endpoint will be deprecated soon. Use `getThumbnailForDocumentAndVersion` instead.
     */
    async getThumbnailForDocumentAndVersionOldRaw(requestParameters: GetThumbnailForDocumentAndVersionOldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTThumbnailInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getThumbnailForDocumentAndVersionOld.');
        }

        if (requestParameters.vid === null || requestParameters.vid === undefined) {
            throw new runtime.RequiredError('vid','Required parameter requestParameters.vid was null or undefined when calling getThumbnailForDocumentAndVersionOld.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/document/{did}/version/{vid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"vid"}}`, encodeURIComponent(String(requestParameters.vid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTThumbnailInfoFromJSON(jsonValue));
    }

    /**
     * This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.
     * This endpoint will be deprecated soon. Use `getThumbnailForDocumentAndVersion` instead.
     */
    async getThumbnailForDocumentAndVersionOld(requestParameters: GetThumbnailForDocumentAndVersionOldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTThumbnailInfo> {
        const response = await this.getThumbnailForDocumentAndVersionOldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.
     * This endpoint will be deprecated soon. Use `getThumbnailForDocument` instead.
     */
    async getThumbnailForDocumentOldRaw(requestParameters: GetThumbnailForDocumentOldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTThumbnailInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getThumbnailForDocumentOld.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/document/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTThumbnailInfoFromJSON(jsonValue));
    }

    /**
     * This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.
     * This endpoint will be deprecated soon. Use `getThumbnailForDocument` instead.
     */
    async getThumbnailForDocumentOld(requestParameters: GetThumbnailForDocumentOldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTThumbnailInfo> {
        const response = await this.getThumbnailForDocumentOldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Allows 3rd-party applications to set thumbnails for their elements.  * Application elements can have both primary and secondary thumbnails. A primary thumbnail represents the top-level of the element. A secondary thumbnail can represent sub-components of the element (e.g., a drawing sheet). * To update one or more thumbnails, you must set the overwrite query param to `true` and supply the entire set of thumbnails. All previous thumbnails will be deleted prior to updating the element with the latest images.
     * Set the thumbnail image for an application element.
     */
    async setApplicationElementThumbnailRaw(requestParameters: SetApplicationElementThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling setApplicationElementThumbnail.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling setApplicationElementThumbnail.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling setApplicationElementThumbnail.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling setApplicationElementThumbnail.');
        }

        if (requestParameters.bTApplicationElementThumbnailParamsArray === null || requestParameters.bTApplicationElementThumbnailParamsArray === undefined) {
            throw new runtime.RequiredError('bTApplicationElementThumbnailParamsArray','Required parameter requestParameters.bTApplicationElementThumbnailParamsArray was null or undefined when calling setApplicationElementThumbnail.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.overwrite !== undefined) {
            queryParameters['overwrite'] = requestParameters.overwrite;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTApplicationElementThumbnailParamsArrayToJSON(requestParameters.bTApplicationElementThumbnailParamsArray),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * * Allows 3rd-party applications to set thumbnails for their elements.  * Application elements can have both primary and secondary thumbnails. A primary thumbnail represents the top-level of the element. A secondary thumbnail can represent sub-components of the element (e.g., a drawing sheet). * To update one or more thumbnails, you must set the overwrite query param to `true` and supply the entire set of thumbnails. All previous thumbnails will be deleted prior to updating the element with the latest images.
     * Set the thumbnail image for an application element.
     */
    async setApplicationElementThumbnail(requestParameters: SetApplicationElementThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setApplicationElementThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteApplicationThumbnailsWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type DeleteApplicationThumbnailsWvEnum = typeof DeleteApplicationThumbnailsWvEnum[keyof typeof DeleteApplicationThumbnailsWvEnum];
/**
 * @export
 */
export const GetElementThumbnailWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetElementThumbnailWvEnum = typeof GetElementThumbnailWvEnum[keyof typeof GetElementThumbnailWvEnum];
/**
 * @export
 */
export const GetElementThumbnailWithSizeWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetElementThumbnailWithSizeWvEnum = typeof GetElementThumbnailWithSizeWvEnum[keyof typeof GetElementThumbnailWithSizeWvEnum];
/**
 * @export
 */
export const SetApplicationElementThumbnailWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type SetApplicationElementThumbnailWvEnum = typeof SetApplicationElementThumbnailWvEnum[keyof typeof SetApplicationElementThumbnailWvEnum];
