/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTLoginParams,
  BTUserOAuth2SummaryInfo,
  BTUserSettingsInfo,
} from '../models';
import {
    BTLoginParamsFromJSON,
    BTLoginParamsToJSON,
    BTUserOAuth2SummaryInfoFromJSON,
    BTUserOAuth2SummaryInfoToJSON,
    BTUserSettingsInfoFromJSON,
    BTUserSettingsInfoToJSON,
} from '../models';

export interface GetUserSettingsRequest {
    uid: string;
    includematerials?: boolean;
}

export interface GetUserSettingsCurrentLoggedInUserRequest {
    includematerials?: boolean;
}

export interface SessionRequest {
    bTLoginParams: BTLoginParams;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * * Mouse button settings are contained in `reverseScrollWheelZoomDirection` and `viewManipulationMouseKeyMapping`.  * For each action in `viewManipulationMouseKeyMapping`, an array of modifier key/mouse combos is provided that performs that action.  * Possible modifier keys include `SHIFT` and `CTRL`.  * Possible mouse buttons include `MMB` (middle mouse button), `RMB` (right mouse button), and `SCROLLWHEEL`.  * Scrolling forward zooms in, unless `reverseScrollWheelZoomDirection` is set to `true`.
     * Get the user settings for any user in your organization (admins only).
     */
    async getUserSettingsRaw(requestParameters: GetUserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTUserSettingsInfo>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling getUserSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.includematerials !== undefined) {
            queryParameters['includematerials'] = requestParameters.includematerials;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/users/{uid}/settings`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTUserSettingsInfoFromJSON(jsonValue));
    }

    /**
     * * Mouse button settings are contained in `reverseScrollWheelZoomDirection` and `viewManipulationMouseKeyMapping`.  * For each action in `viewManipulationMouseKeyMapping`, an array of modifier key/mouse combos is provided that performs that action.  * Possible modifier keys include `SHIFT` and `CTRL`.  * Possible mouse buttons include `MMB` (middle mouse button), `RMB` (right mouse button), and `SCROLLWHEEL`.  * Scrolling forward zooms in, unless `reverseScrollWheelZoomDirection` is set to `true`.
     * Get the user settings for any user in your organization (admins only).
     */
    async getUserSettings(requestParameters: GetUserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTUserSettingsInfo> {
        const response = await this.getUserSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Non-admins can call this API for their own user ID.  * Mouse button settings are contained in `reverseScrollWheelZoomDirection` and `viewManipulationMouseKeyMapping`.  * For each action in `viewManipulationMouseKeyMapping`, an array of modifier key/mouse combos is provided that performs that action.  * Possible modifier keys include `SHIFT` and `CTRL`.  * Possible mouse buttons include `MMB` (middle mouse button), `RMB` (right mouse button), and `SCROLLWHEEL`.  * Scrolling forward zooms in, unless `reverseScrollWheelZoomDirection` is set to `true`.
     * Get the user settings for the signed-in user (i.e., you) for the current session.
     */
    async getUserSettingsCurrentLoggedInUserRaw(requestParameters: GetUserSettingsCurrentLoggedInUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTUserSettingsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.includematerials !== undefined) {
            queryParameters['includematerials'] = requestParameters.includematerials;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/users/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTUserSettingsInfoFromJSON(jsonValue));
    }

    /**
     * * Non-admins can call this API for their own user ID.  * Mouse button settings are contained in `reverseScrollWheelZoomDirection` and `viewManipulationMouseKeyMapping`.  * For each action in `viewManipulationMouseKeyMapping`, an array of modifier key/mouse combos is provided that performs that action.  * Possible modifier keys include `SHIFT` and `CTRL`.  * Possible mouse buttons include `MMB` (middle mouse button), `RMB` (right mouse button), and `SCROLLWHEEL`.  * Scrolling forward zooms in, unless `reverseScrollWheelZoomDirection` is set to `true`.
     * Get the user settings for the signed-in user (i.e., you) for the current session.
     */
    async getUserSettingsCurrentLoggedInUser(requestParameters: GetUserSettingsCurrentLoggedInUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTUserSettingsInfo> {
        const response = await this.getUserSettingsCurrentLoggedInUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returned information depends on caller\'s `OAuth2ReadPll` scope.
     * Authenticate a user\'s Onshape credentials, and create a session.
     */
    async sessionRaw(requestParameters: SessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.bTLoginParams === null || requestParameters.bTLoginParams === undefined) {
            throw new runtime.RequiredError('bTLoginParams','Required parameter requestParameters.bTLoginParams was null or undefined when calling session.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/users/session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTLoginParamsToJSON(requestParameters.bTLoginParams),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returned information depends on caller\'s `OAuth2ReadPll` scope.
     * Authenticate a user\'s Onshape credentials, and create a session.
     */
    async session(requestParameters: SessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.sessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returned information depends on caller\'s `OAuth2ReadPll` scope.
     * Get the session information for an authenticated (signed-in) user.
     */
    async sessionInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTUserOAuth2SummaryInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/users/sessioninfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTUserOAuth2SummaryInfoFromJSON(jsonValue));
    }

    /**
     * Returned information depends on caller\'s `OAuth2ReadPll` scope.
     * Get the session information for an authenticated (signed-in) user.
     */
    async sessionInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTUserOAuth2SummaryInfo> {
        const response = await this.sessionInfoRaw(initOverrides);
        return await response.value();
    }

}
