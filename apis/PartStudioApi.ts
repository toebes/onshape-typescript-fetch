/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTApiTableList1223,
  BTBoundingBoxInfo,
  BTDocumentElementInfo,
  BTExportModelBodiesResponse734,
  BTExportTessellatedEdgesResponse327,
  BTExportTessellatedFacesResponse898,
  BTFeatureApiBase1430,
  BTFeatureDefinitionCall1406,
  BTFeatureDefinitionResponse1617,
  BTFeatureListResponse2457,
  BTFeatureScriptEvalCall2377,
  BTFeatureScriptEvalResponse1859,
  BTFeatureSpecsResponse664,
  BTIdTranslationInfo,
  BTIdTranslationParams,
  BTMassPropertiesBulkInfo,
  BTModelElementParams,
  BTNamedViewsInfo,
  BTPModule234,
  BTRootDiffInfo,
  BTSetFeatureRollbackResponse1042,
  BTShadedViewsInfo,
  BTTranslateFormatParams,
  BTTranslationRequestInfo,
  BTUpdateFeaturesCall1748,
  BTUpdateFeaturesResponse1333,
  GlTF,
} from '../models';
import {
    BTApiTableList1223FromJSON,
    BTApiTableList1223ToJSON,
    BTBoundingBoxInfoFromJSON,
    BTBoundingBoxInfoToJSON,
    BTDocumentElementInfoFromJSON,
    BTDocumentElementInfoToJSON,
    BTExportModelBodiesResponse734FromJSON,
    BTExportModelBodiesResponse734ToJSON,
    BTExportTessellatedEdgesResponse327FromJSON,
    BTExportTessellatedEdgesResponse327ToJSON,
    BTExportTessellatedFacesResponse898FromJSON,
    BTExportTessellatedFacesResponse898ToJSON,
    BTFeatureApiBase1430FromJSON,
    BTFeatureApiBase1430ToJSON,
    BTFeatureDefinitionCall1406FromJSON,
    BTFeatureDefinitionCall1406ToJSON,
    BTFeatureDefinitionResponse1617FromJSON,
    BTFeatureDefinitionResponse1617ToJSON,
    BTFeatureListResponse2457FromJSON,
    BTFeatureListResponse2457ToJSON,
    BTFeatureScriptEvalCall2377FromJSON,
    BTFeatureScriptEvalCall2377ToJSON,
    BTFeatureScriptEvalResponse1859FromJSON,
    BTFeatureScriptEvalResponse1859ToJSON,
    BTFeatureSpecsResponse664FromJSON,
    BTFeatureSpecsResponse664ToJSON,
    BTIdTranslationInfoFromJSON,
    BTIdTranslationInfoToJSON,
    BTIdTranslationParamsFromJSON,
    BTIdTranslationParamsToJSON,
    BTMassPropertiesBulkInfoFromJSON,
    BTMassPropertiesBulkInfoToJSON,
    BTModelElementParamsFromJSON,
    BTModelElementParamsToJSON,
    BTNamedViewsInfoFromJSON,
    BTNamedViewsInfoToJSON,
    BTPModule234FromJSON,
    BTPModule234ToJSON,
    BTRootDiffInfoFromJSON,
    BTRootDiffInfoToJSON,
    BTSetFeatureRollbackResponse1042FromJSON,
    BTSetFeatureRollbackResponse1042ToJSON,
    BTShadedViewsInfoFromJSON,
    BTShadedViewsInfoToJSON,
    BTTranslateFormatParamsFromJSON,
    BTTranslateFormatParamsToJSON,
    BTTranslationRequestInfoFromJSON,
    BTTranslationRequestInfoToJSON,
    BTUpdateFeaturesCall1748FromJSON,
    BTUpdateFeaturesCall1748ToJSON,
    BTUpdateFeaturesResponse1333FromJSON,
    BTUpdateFeaturesResponse1333ToJSON,
    GlTFFromJSON,
    GlTFToJSON,
} from '../models';

export interface AddPartStudioFeatureRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    bTFeatureDefinitionCall1406?: BTFeatureDefinitionCall1406;
}

export interface ComparePartStudiosRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    workspaceId?: string;
    versionId?: string;
    microversionId?: string;
    sourceConfiguration?: string;
    targetConfiguration?: string;
    linkDocumentId?: string;
}

export interface CreatePartStudioRequest {
    did: string;
    wid: string;
    bTModelElementParams: BTModelElementParams;
}

export interface CreatePartStudioTranslationRequest {
    did: string;
    wv: string;
    wvid: string;
    eid: string;
    bTTranslateFormatParams: BTTranslateFormatParams;
}

export interface DeletePartStudioFeatureRequest {
    did: string;
    wid: string;
    eid: string;
    fid: string;
}

export interface EvalFeatureScriptRequest {
    did: string;
    wvm: EvalFeatureScriptWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    bTFeatureScriptEvalCall2377?: BTFeatureScriptEvalCall2377;
}

export interface ExportParasolidRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    partIds?: string;
    version?: string;
    includeExportIds?: boolean;
    _configuration?: string;
    linkDocumentId?: string;
    binaryExport?: boolean;
}

export interface ExportPartStudioGltfRequest {
    did: string;
    wvm: ExportPartStudioGltfWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    partId?: Array<string>;
    angleTolerance?: number;
    chordTolerance?: number;
    precomputedLevelOfDetail?: string;
    outputSeparateFaceNodes?: boolean;
    faceId?: Array<string>;
    outputFaceAppearances?: boolean;
    maxFacetWidth?: number;
}

export interface ExportPartStudioStlRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    partIds?: string;
    mode?: string;
    grouping?: boolean;
    scale?: number;
    units?: string;
    angleTolerance?: number;
    chordTolerance?: number;
    maxFacetWidth?: number;
    minFacetWidth?: number;
    _configuration?: string;
    linkDocumentId?: string;
}

export interface GetFeatureScriptRepresentationRequest {
    did: string;
    wvm: GetFeatureScriptRepresentationWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
}

export interface GetFeatureScriptTableRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    tableType: string;
    _configuration?: string;
    tableNamespace?: string;
    tableParameters?: string;
    partId?: string;
    linkDocumentId?: string;
}

export interface GetPartStudioBodyDetailsRequest {
    did: string;
    wvm: GetPartStudioBodyDetailsWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    partIds?: Array<string>;
    includeSurfaces?: boolean;
    includeCompositeParts?: boolean;
    includeGeometricData?: boolean;
}

export interface GetPartStudioBoundingBoxesRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    includeHidden?: boolean;
    includeWireBodies?: boolean;
    _configuration?: string;
    linkDocumentId?: string;
}

export interface GetPartStudioEdgesRequest {
    did: string;
    wvm: GetPartStudioEdgesWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    partId?: Array<string>;
    angleTolerance?: number;
    chordTolerance?: number;
    precomputedLevelOfDetail?: string;
    edgeId?: Array<string>;
}

export interface GetPartStudioFacesRequest {
    did: string;
    wvm: GetPartStudioFacesWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    partId?: Array<string>;
    angleTolerance?: number;
    chordTolerance?: number;
    precomputedLevelOfDetail?: string;
    faceId?: Array<string>;
    outputFaceAppearances?: boolean;
    maxFacetWidth?: number;
    outputVertexNormals?: boolean;
    outputFacetNormals?: boolean;
    outputTextureCoordinates?: boolean;
    outputIndexTable?: boolean;
    outputErrorFaces?: boolean;
    combineCompositePartConstituents?: boolean;
}

export interface GetPartStudioFeatureSpecsRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
}

export interface GetPartStudioFeaturesRequest {
    did: string;
    wvm: GetPartStudioFeaturesWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    includeGeometryIds?: boolean;
    featureId?: Array<string>;
    noSketchGeometry?: boolean;
}

export interface GetPartStudioMassPropertiesRequest {
    did: string;
    wvm: GetPartStudioMassPropertiesWvmEnum;
    wvmid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    rollbackBarIndex?: number;
    elementMicroversionId?: string;
    partId?: Array<string>;
    massAsGroup?: boolean;
    useMassPropertyOverrides?: boolean;
}

export interface GetPartStudioNamedViewsRequest {
    did: string;
    eid: string;
    linkDocumentId?: string;
    skipPerspective?: boolean;
    includeSectionCutViews?: boolean;
}

export interface GetPartStudioShadedViewsRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    viewMatrix?: string;
    outputHeight?: number;
    outputWidth?: number;
    pixelSize?: number;
    edges?: string;
    showAllParts?: boolean;
    includeSurfaces?: boolean;
    useAntiAliasing?: boolean;
    includeWires?: boolean;
    _configuration?: string;
    linkDocumentId?: string;
}

export interface TranslateIdsRequest {
    did: string;
    wvm: string;
    wvmid: string;
    eid: string;
    bTIdTranslationParams: BTIdTranslationParams;
}

export interface UpdateFeaturesRequest {
    did: string;
    wid: string;
    eid: string;
    bTUpdateFeaturesCall1748?: BTUpdateFeaturesCall1748;
}

export interface UpdatePartStudioFeatureRequest {
    did: string;
    wid: string;
    eid: string;
    fid: string;
    bTFeatureDefinitionCall1406?: BTFeatureDefinitionCall1406;
}

export interface UpdateRollbackRequest {
    did: string;
    wid: string;
    eid: string;
    body: string;
}

/**
 * 
 */
export class PartStudioApi extends runtime.BaseAPI {

    /**
     * The feature is added immediately before the rollback bar. Any geometry IDs specified in the feature must be valid at that point in the feature tree.    See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Add a feature to the Part Studio\'s Feature List.
     */
    async addPartStudioFeatureRaw(requestParameters: AddPartStudioFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureDefinitionResponse1617>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling addPartStudioFeature.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling addPartStudioFeature.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling addPartStudioFeature.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling addPartStudioFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTFeatureDefinitionCall1406ToJSON(requestParameters.bTFeatureDefinitionCall1406),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureDefinitionResponse1617FromJSON(jsonValue));
    }

    /**
     * The feature is added immediately before the rollback bar. Any geometry IDs specified in the feature must be valid at that point in the feature tree.    See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Add a feature to the Part Studio\'s Feature List.
     */
    async addPartStudioFeature(requestParameters: AddPartStudioFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureDefinitionResponse1617> {
        const response = await this.addPartStudioFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the differences between two Part Studios in a single document.
     */
    async comparePartStudiosRaw(requestParameters: ComparePartStudiosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTRootDiffInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling comparePartStudios.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling comparePartStudios.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling comparePartStudios.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling comparePartStudios.');
        }

        const queryParameters: any = {};

        if (requestParameters.workspaceId !== undefined) {
            queryParameters['workspaceId'] = requestParameters.workspaceId;
        }

        if (requestParameters.versionId !== undefined) {
            queryParameters['versionId'] = requestParameters.versionId;
        }

        if (requestParameters.microversionId !== undefined) {
            queryParameters['microversionId'] = requestParameters.microversionId;
        }

        if (requestParameters.sourceConfiguration !== undefined) {
            queryParameters['sourceConfiguration'] = requestParameters.sourceConfiguration;
        }

        if (requestParameters.targetConfiguration !== undefined) {
            queryParameters['targetConfiguration'] = requestParameters.targetConfiguration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/compare`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTRootDiffInfoFromJSON(jsonValue));
    }

    /**
     * Get the differences between two Part Studios in a single document.
     */
    async comparePartStudios(requestParameters: ComparePartStudiosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTRootDiffInfo> {
        const response = await this.comparePartStudiosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Create a new Part Studio in a document.
     */
    async createPartStudioRaw(requestParameters: CreatePartStudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTDocumentElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createPartStudio.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling createPartStudio.');
        }

        if (requestParameters.bTModelElementParams === null || requestParameters.bTModelElementParams === undefined) {
            throw new runtime.RequiredError('bTModelElementParams','Required parameter requestParameters.bTModelElementParams was null or undefined when calling createPartStudio.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/w/{wid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTModelElementParamsToJSON(requestParameters.bTModelElementParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTDocumentElementInfoFromJSON(jsonValue));
    }

    /**
     * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Create a new Part Studio in a document.
     */
    async createPartStudio(requestParameters: CreatePartStudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTDocumentElementInfo> {
        const response = await this.createPartStudioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Use `formatName` in the JSON request body to specify the export file type. Use [Translations/getAllTranslatorFormats](https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats) to get a list of valid export file formats. ` * Set `storeInDocument` to `true` to export to a data file. Set to `false` to export to a blob element in the same document.  * See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
     * Export a Part Studio to another format.
     */
    async createPartStudioTranslationRaw(requestParameters: CreatePartStudioTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTranslationRequestInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createPartStudioTranslation.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling createPartStudioTranslation.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling createPartStudioTranslation.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling createPartStudioTranslation.');
        }

        if (requestParameters.bTTranslateFormatParams === null || requestParameters.bTTranslateFormatParams === undefined) {
            throw new runtime.RequiredError('bTTranslateFormatParams','Required parameter requestParameters.bTTranslateFormatParams was null or undefined when calling createPartStudioTranslation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/translations`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTTranslateFormatParamsToJSON(requestParameters.bTTranslateFormatParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTranslationRequestInfoFromJSON(jsonValue));
    }

    /**
     * * Use `formatName` in the JSON request body to specify the export file type. Use [Translations/getAllTranslatorFormats](https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats) to get a list of valid export file formats. ` * Set `storeInDocument` to `true` to export to a data file. Set to `false` to export to a blob element in the same document.  * See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
     * Export a Part Studio to another format.
     */
    async createPartStudioTranslation(requestParameters: CreatePartStudioTranslationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTranslationRequestInfo> {
        const response = await this.createPartStudioTranslationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Delete a Part Studio feature.
     */
    async deletePartStudioFeatureRaw(requestParameters: DeletePartStudioFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureApiBase1430>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling deletePartStudioFeature.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling deletePartStudioFeature.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling deletePartStudioFeature.');
        }

        if (requestParameters.fid === null || requestParameters.fid === undefined) {
            throw new runtime.RequiredError('fid','Required parameter requestParameters.fid was null or undefined when calling deletePartStudioFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters.fid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureApiBase1430FromJSON(jsonValue));
    }

    /**
     * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Delete a Part Studio feature.
     */
    async deletePartStudioFeature(requestParameters: DeletePartStudioFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureApiBase1430> {
        const response = await this.deletePartStudioFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Evaluate the FeatureScript snippet for a Part Studio.
     */
    async evalFeatureScriptRaw(requestParameters: EvalFeatureScriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureScriptEvalResponse1859>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling evalFeatureScript.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling evalFeatureScript.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling evalFeatureScript.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling evalFeatureScript.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescript`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTFeatureScriptEvalCall2377ToJSON(requestParameters.bTFeatureScriptEvalCall2377),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureScriptEvalResponse1859FromJSON(jsonValue));
    }

    /**
     * Evaluate the FeatureScript snippet for a Part Studio.
     */
    async evalFeatureScript(requestParameters: EvalFeatureScriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureScriptEvalResponse1859> {
        const response = await this.evalFeatureScriptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a 307 redirect from which to download the exported file. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
     * Export the Part Studio as a Parasolid file.
     */
    async exportParasolidRaw(requestParameters: ExportParasolidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling exportParasolid.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling exportParasolid.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling exportParasolid.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling exportParasolid.');
        }

        const queryParameters: any = {};

        if (requestParameters.partIds !== undefined) {
            queryParameters['partIds'] = requestParameters.partIds;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.includeExportIds !== undefined) {
            queryParameters['includeExportIds'] = requestParameters.includeExportIds;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.binaryExport !== undefined) {
            queryParameters['binaryExport'] = requestParameters.binaryExport;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/parasolid`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns a 307 redirect from which to download the exported file. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
     * Export the Part Studio as a Parasolid file.
     */
    async exportParasolid(requestParameters: ExportParasolidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.exportParasolidRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the glTF representation. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/)
     * Export the Part Studio as a glTF file.
     */
    async exportPartStudioGltfRaw(requestParameters: ExportPartStudioGltfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlTF>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling exportPartStudioGltf.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling exportPartStudioGltf.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling exportPartStudioGltf.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling exportPartStudioGltf.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.partId) {
            queryParameters['partId'] = requestParameters.partId;
        }

        if (requestParameters.angleTolerance !== undefined) {
            queryParameters['angleTolerance'] = requestParameters.angleTolerance;
        }

        if (requestParameters.chordTolerance !== undefined) {
            queryParameters['chordTolerance'] = requestParameters.chordTolerance;
        }

        if (requestParameters.precomputedLevelOfDetail !== undefined) {
            queryParameters['precomputedLevelOfDetail'] = requestParameters.precomputedLevelOfDetail;
        }

        if (requestParameters.outputSeparateFaceNodes !== undefined) {
            queryParameters['outputSeparateFaceNodes'] = requestParameters.outputSeparateFaceNodes;
        }

        if (requestParameters.faceId) {
            queryParameters['faceId'] = requestParameters.faceId;
        }

        if (requestParameters.outputFaceAppearances !== undefined) {
            queryParameters['outputFaceAppearances'] = requestParameters.outputFaceAppearances;
        }

        if (requestParameters.maxFacetWidth !== undefined) {
            queryParameters['maxFacetWidth'] = requestParameters.maxFacetWidth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/gltf`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlTFFromJSON(jsonValue));
    }

    /**
     * Returns the glTF representation. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/)
     * Export the Part Studio as a glTF file.
     */
    async exportPartStudioGltf(requestParameters: ExportPartStudioGltfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlTF> {
        const response = await this.exportPartStudioGltfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a 307 redirect from which to download the exported file. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/)
     * Export the Part Studio as an STL file.
     */
    async exportPartStudioStlRaw(requestParameters: ExportPartStudioStlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling exportPartStudioStl.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling exportPartStudioStl.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling exportPartStudioStl.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling exportPartStudioStl.');
        }

        const queryParameters: any = {};

        if (requestParameters.partIds !== undefined) {
            queryParameters['partIds'] = requestParameters.partIds;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.grouping !== undefined) {
            queryParameters['grouping'] = requestParameters.grouping;
        }

        if (requestParameters.scale !== undefined) {
            queryParameters['scale'] = requestParameters.scale;
        }

        if (requestParameters.units !== undefined) {
            queryParameters['units'] = requestParameters.units;
        }

        if (requestParameters.angleTolerance !== undefined) {
            queryParameters['angleTolerance'] = requestParameters.angleTolerance;
        }

        if (requestParameters.chordTolerance !== undefined) {
            queryParameters['chordTolerance'] = requestParameters.chordTolerance;
        }

        if (requestParameters.maxFacetWidth !== undefined) {
            queryParameters['maxFacetWidth'] = requestParameters.maxFacetWidth;
        }

        if (requestParameters.minFacetWidth !== undefined) {
            queryParameters['minFacetWidth'] = requestParameters.minFacetWidth;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/stl`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns a 307 redirect from which to download the exported file. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/)
     * Export the Part Studio as an STL file.
     */
    async exportPartStudioStl(requestParameters: ExportPartStudioStlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.exportPartStudioStlRaw(requestParameters, initOverrides);
    }

    /**
     * Get the FeatureScript representation of a Part Studio.
     */
    async getFeatureScriptRepresentationRaw(requestParameters: GetFeatureScriptRepresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTPModule234>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getFeatureScriptRepresentation.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getFeatureScriptRepresentation.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getFeatureScriptRepresentation.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getFeatureScriptRepresentation.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescriptrepresentation`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTPModule234FromJSON(jsonValue));
    }

    /**
     * Get the FeatureScript representation of a Part Studio.
     */
    async getFeatureScriptRepresentation(requestParameters: GetFeatureScriptRepresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTPModule234> {
        const response = await this.getFeatureScriptRepresentationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Compute and return a FeatureScript table for a Part Studio.
     */
    async getFeatureScriptTableRaw(requestParameters: GetFeatureScriptTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTApiTableList1223>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getFeatureScriptTable.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getFeatureScriptTable.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getFeatureScriptTable.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getFeatureScriptTable.');
        }

        if (requestParameters.tableType === null || requestParameters.tableType === undefined) {
            throw new runtime.RequiredError('tableType','Required parameter requestParameters.tableType was null or undefined when calling getFeatureScriptTable.');
        }

        const queryParameters: any = {};

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.tableNamespace !== undefined) {
            queryParameters['tableNamespace'] = requestParameters.tableNamespace;
        }

        if (requestParameters.tableType !== undefined) {
            queryParameters['tableType'] = requestParameters.tableType;
        }

        if (requestParameters.tableParameters !== undefined) {
            queryParameters['tableParameters'] = requestParameters.tableParameters;
        }

        if (requestParameters.partId !== undefined) {
            queryParameters['partId'] = requestParameters.partId;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/fstable`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTApiTableList1223FromJSON(jsonValue));
    }

    /**
     * Compute and return a FeatureScript table for a Part Studio.
     */
    async getFeatureScriptTable(requestParameters: GetFeatureScriptTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTApiTableList1223> {
        const response = await this.getFeatureScriptTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Get the body details for a Part Studio.
     */
    async getPartStudioBodyDetailsRaw(requestParameters: GetPartStudioBodyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTExportModelBodiesResponse734>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioBodyDetails.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioBodyDetails.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioBodyDetails.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioBodyDetails.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.partIds) {
            queryParameters['partIds'] = requestParameters.partIds;
        }

        if (requestParameters.includeSurfaces !== undefined) {
            queryParameters['includeSurfaces'] = requestParameters.includeSurfaces;
        }

        if (requestParameters.includeCompositeParts !== undefined) {
            queryParameters['includeCompositeParts'] = requestParameters.includeCompositeParts;
        }

        if (requestParameters.includeGeometricData !== undefined) {
            queryParameters['includeGeometricData'] = requestParameters.includeGeometricData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/bodydetails`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTExportModelBodiesResponse734FromJSON(jsonValue));
    }

    /**
     * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Get the body details for a Part Studio.
     */
    async getPartStudioBodyDetails(requestParameters: GetPartStudioBodyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTExportModelBodiesResponse734> {
        const response = await this.getPartStudioBodyDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint does not result in a tight bounding box. The values returned are meant for graphics and visualization, and are approximate.  To calculate a tight bounding box, see the [FeatureScript API Guide](https://onshape-public.github.io/docs/api-adv/fs/#calculate-a-tight-bounding-box). 
     * Get the bounding boxes for a Part Studio.
     */
    async getPartStudioBoundingBoxesRaw(requestParameters: GetPartStudioBoundingBoxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTBoundingBoxInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioBoundingBoxes.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioBoundingBoxes.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioBoundingBoxes.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioBoundingBoxes.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeHidden !== undefined) {
            queryParameters['includeHidden'] = requestParameters.includeHidden;
        }

        if (requestParameters.includeWireBodies !== undefined) {
            queryParameters['includeWireBodies'] = requestParameters.includeWireBodies;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTBoundingBoxInfoFromJSON(jsonValue));
    }

    /**
     * This endpoint does not result in a tight bounding box. The values returned are meant for graphics and visualization, and are approximate.  To calculate a tight bounding box, see the [FeatureScript API Guide](https://onshape-public.github.io/docs/api-adv/fs/#calculate-a-tight-bounding-box). 
     * Get the bounding boxes for a Part Studio.
     */
    async getPartStudioBoundingBoxes(requestParameters: GetPartStudioBoundingBoxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTBoundingBoxInfo> {
        const response = await this.getPartStudioBoundingBoxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the edges as tessellated data and includes display data.  Coordinates are in meters (m).
     * Get a list of all edges in a Part Studio.
     */
    async getPartStudioEdgesRaw(requestParameters: GetPartStudioEdgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTExportTessellatedEdgesResponse327>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioEdges.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioEdges.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioEdges.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioEdges.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.partId) {
            queryParameters['partId'] = requestParameters.partId;
        }

        if (requestParameters.angleTolerance !== undefined) {
            queryParameters['angleTolerance'] = requestParameters.angleTolerance;
        }

        if (requestParameters.chordTolerance !== undefined) {
            queryParameters['chordTolerance'] = requestParameters.chordTolerance;
        }

        if (requestParameters.precomputedLevelOfDetail !== undefined) {
            queryParameters['precomputedLevelOfDetail'] = requestParameters.precomputedLevelOfDetail;
        }

        if (requestParameters.edgeId) {
            queryParameters['edgeId'] = requestParameters.edgeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatededges`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTExportTessellatedEdgesResponse327FromJSON(jsonValue));
    }

    /**
     * Returns the edges as tessellated data and includes display data.  Coordinates are in meters (m).
     * Get a list of all edges in a Part Studio.
     */
    async getPartStudioEdges(requestParameters: GetPartStudioEdgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTExportTessellatedEdgesResponse327> {
        const response = await this.getPartStudioEdgesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Coordinates are in meters (m).
     * Get a list of all faces in a Part Studio.
     */
    async getPartStudioFacesRaw(requestParameters: GetPartStudioFacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTExportTessellatedFacesResponse898>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioFaces.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioFaces.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioFaces.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioFaces.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.partId) {
            queryParameters['partId'] = requestParameters.partId;
        }

        if (requestParameters.angleTolerance !== undefined) {
            queryParameters['angleTolerance'] = requestParameters.angleTolerance;
        }

        if (requestParameters.chordTolerance !== undefined) {
            queryParameters['chordTolerance'] = requestParameters.chordTolerance;
        }

        if (requestParameters.precomputedLevelOfDetail !== undefined) {
            queryParameters['precomputedLevelOfDetail'] = requestParameters.precomputedLevelOfDetail;
        }

        if (requestParameters.faceId) {
            queryParameters['faceId'] = requestParameters.faceId;
        }

        if (requestParameters.outputFaceAppearances !== undefined) {
            queryParameters['outputFaceAppearances'] = requestParameters.outputFaceAppearances;
        }

        if (requestParameters.maxFacetWidth !== undefined) {
            queryParameters['maxFacetWidth'] = requestParameters.maxFacetWidth;
        }

        if (requestParameters.outputVertexNormals !== undefined) {
            queryParameters['outputVertexNormals'] = requestParameters.outputVertexNormals;
        }

        if (requestParameters.outputFacetNormals !== undefined) {
            queryParameters['outputFacetNormals'] = requestParameters.outputFacetNormals;
        }

        if (requestParameters.outputTextureCoordinates !== undefined) {
            queryParameters['outputTextureCoordinates'] = requestParameters.outputTextureCoordinates;
        }

        if (requestParameters.outputIndexTable !== undefined) {
            queryParameters['outputIndexTable'] = requestParameters.outputIndexTable;
        }

        if (requestParameters.outputErrorFaces !== undefined) {
            queryParameters['outputErrorFaces'] = requestParameters.outputErrorFaces;
        }

        if (requestParameters.combineCompositePartConstituents !== undefined) {
            queryParameters['combineCompositePartConstituents'] = requestParameters.combineCompositePartConstituents;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatedfaces`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTExportTessellatedFacesResponse898FromJSON(jsonValue));
    }

    /**
     * Coordinates are in meters (m).
     * Get a list of all faces in a Part Studio.
     */
    async getPartStudioFaces(requestParameters: GetPartStudioFacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTExportTessellatedFacesResponse898> {
        const response = await this.getPartStudioFacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of feature specs available within the Part Studio. A feature spec provides a data description of the feature\'s interface to a feature.
     * Get the specs for a Part Studio feature.
     */
    async getPartStudioFeatureSpecsRaw(requestParameters: GetPartStudioFeatureSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureSpecsResponse664>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioFeatureSpecs.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioFeatureSpecs.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioFeatureSpecs.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioFeatureSpecs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureSpecsResponse664FromJSON(jsonValue));
    }

    /**
     * Returns a list of feature specs available within the Part Studio. A feature spec provides a data description of the feature\'s interface to a feature.
     * Get the specs for a Part Studio feature.
     */
    async getPartStudioFeatureSpecs(requestParameters: GetPartStudioFeatureSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureSpecsResponse664> {
        const response = await this.getPartStudioFeatureSpecsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Get a list of features instantiated in the Part Studio.
     */
    async getPartStudioFeaturesRaw(requestParameters: GetPartStudioFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureListResponse2457>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioFeatures.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioFeatures.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioFeatures.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioFeatures.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.includeGeometryIds !== undefined) {
            queryParameters['includeGeometryIds'] = requestParameters.includeGeometryIds;
        }

        if (requestParameters.featureId) {
            queryParameters['featureId'] = requestParameters.featureId;
        }

        if (requestParameters.noSketchGeometry !== undefined) {
            queryParameters['noSketchGeometry'] = requestParameters.noSketchGeometry;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureListResponse2457FromJSON(jsonValue));
    }

    /**
     * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Get a list of features instantiated in the Part Studio.
     */
    async getPartStudioFeatures(requestParameters: GetPartStudioFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureListResponse2457> {
        const response = await this.getPartStudioFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Parts must have density. The returned schema includes the same information as in the Onshape [Mass Properties Tool](https://cad.onshape.com/help/Content/massprops-ps.htm).    When three values are returned:   * The first is the calculated value.   * The second is the minimum possible value, considering tolerance.   * The third is the maximum possible value, considering tolerance.     See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Get the mass properties for a Part Studio.
     */
    async getPartStudioMassPropertiesRaw(requestParameters: GetPartStudioMassPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTMassPropertiesBulkInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioMassProperties.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioMassProperties.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioMassProperties.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioMassProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.rollbackBarIndex !== undefined) {
            queryParameters['rollbackBarIndex'] = requestParameters.rollbackBarIndex;
        }

        if (requestParameters.elementMicroversionId !== undefined) {
            queryParameters['elementMicroversionId'] = requestParameters.elementMicroversionId;
        }

        if (requestParameters.partId) {
            queryParameters['partId'] = requestParameters.partId;
        }

        if (requestParameters.massAsGroup !== undefined) {
            queryParameters['massAsGroup'] = requestParameters.massAsGroup;
        }

        if (requestParameters.useMassPropertyOverrides !== undefined) {
            queryParameters['useMassPropertyOverrides'] = requestParameters.useMassPropertyOverrides;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTMassPropertiesBulkInfoFromJSON(jsonValue));
    }

    /**
     * Parts must have density. The returned schema includes the same information as in the Onshape [Mass Properties Tool](https://cad.onshape.com/help/Content/massprops-ps.htm).    When three values are returned:   * The first is the calculated value.   * The second is the minimum possible value, considering tolerance.   * The third is the maximum possible value, considering tolerance.     See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Get the mass properties for a Part Studio.
     */
    async getPartStudioMassProperties(requestParameters: GetPartStudioMassPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTMassPropertiesBulkInfo> {
        const response = await this.getPartStudioMassPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a map from view name to view data for the given element. See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Get a list of all named views that exist in the Part Studio.
     */
    async getPartStudioNamedViewsRaw(requestParameters: GetPartStudioNamedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTNamedViewsInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioNamedViews.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioNamedViews.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.skipPerspective !== undefined) {
            queryParameters['skipPerspective'] = requestParameters.skipPerspective;
        }

        if (requestParameters.includeSectionCutViews !== undefined) {
            queryParameters['includeSectionCutViews'] = requestParameters.includeSectionCutViews;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/e/{eid}/namedViews`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTNamedViewsInfoFromJSON(jsonValue));
    }

    /**
     * Returns a map from view name to view data for the given element. See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Get a list of all named views that exist in the Part Studio.
     */
    async getPartStudioNamedViews(requestParameters: GetPartStudioNamedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTNamedViewsInfo> {
        const response = await this.getPartStudioNamedViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of shaded views for a Part Studio.
     */
    async getPartStudioShadedViewsRaw(requestParameters: GetPartStudioShadedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTShadedViewsInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getPartStudioShadedViews.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling getPartStudioShadedViews.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling getPartStudioShadedViews.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getPartStudioShadedViews.');
        }

        const queryParameters: any = {};

        if (requestParameters.viewMatrix !== undefined) {
            queryParameters['viewMatrix'] = requestParameters.viewMatrix;
        }

        if (requestParameters.outputHeight !== undefined) {
            queryParameters['outputHeight'] = requestParameters.outputHeight;
        }

        if (requestParameters.outputWidth !== undefined) {
            queryParameters['outputWidth'] = requestParameters.outputWidth;
        }

        if (requestParameters.pixelSize !== undefined) {
            queryParameters['pixelSize'] = requestParameters.pixelSize;
        }

        if (requestParameters.edges !== undefined) {
            queryParameters['edges'] = requestParameters.edges;
        }

        if (requestParameters.showAllParts !== undefined) {
            queryParameters['showAllParts'] = requestParameters.showAllParts;
        }

        if (requestParameters.includeSurfaces !== undefined) {
            queryParameters['includeSurfaces'] = requestParameters.includeSurfaces;
        }

        if (requestParameters.useAntiAliasing !== undefined) {
            queryParameters['useAntiAliasing'] = requestParameters.useAntiAliasing;
        }

        if (requestParameters.includeWires !== undefined) {
            queryParameters['includeWires'] = requestParameters.includeWires;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTShadedViewsInfoFromJSON(jsonValue));
    }

    /**
     * Get a list of shaded views for a Part Studio.
     */
    async getPartStudioShadedViews(requestParameters: GetPartStudioShadedViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTShadedViewsInfo> {
        const response = await this.getPartStudioShadedViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Deterministic IDs are only valid for one microversion.  * This maps deterministic IDs between microversions in an attempt to find the corresponding entities in each version.
     * Find corresponding deterministic IDs from a source document microversion at the target version.
     */
    async translateIdsRaw(requestParameters: TranslateIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTIdTranslationInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling translateIds.');
        }

        if (requestParameters.wvm === null || requestParameters.wvm === undefined) {
            throw new runtime.RequiredError('wvm','Required parameter requestParameters.wvm was null or undefined when calling translateIds.');
        }

        if (requestParameters.wvmid === null || requestParameters.wvmid === undefined) {
            throw new runtime.RequiredError('wvmid','Required parameter requestParameters.wvmid was null or undefined when calling translateIds.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling translateIds.');
        }

        if (requestParameters.bTIdTranslationParams === null || requestParameters.bTIdTranslationParams === undefined) {
            throw new runtime.RequiredError('bTIdTranslationParams','Required parameter requestParameters.bTIdTranslationParams was null or undefined when calling translateIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/idtranslations`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wvm"}}`, encodeURIComponent(String(requestParameters.wvm))).replace(`{${"wvmid"}}`, encodeURIComponent(String(requestParameters.wvmid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTIdTranslationParamsToJSON(requestParameters.bTIdTranslationParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTIdTranslationInfoFromJSON(jsonValue));
    }

    /**
     * * Deterministic IDs are only valid for one microversion.  * This maps deterministic IDs between microversions in an attempt to find the corresponding entities in each version.
     * Find corresponding deterministic IDs from a source document microversion at the target version.
     */
    async translateIds(requestParameters: TranslateIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTIdTranslationInfo> {
        const response = await this.translateIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API accepts a list of features (that must already exist in the Part Studio) to update. This call does not fully redefine the features; it updates only the parameters supplied in the top-level feature structure, and optionally can update feature suppression attributes.  See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Update multiple features in a Part Studio
     */
    async updateFeaturesRaw(requestParameters: UpdateFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTUpdateFeaturesResponse1333>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateFeatures.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling updateFeatures.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updateFeatures.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTUpdateFeaturesCall1748ToJSON(requestParameters.bTUpdateFeaturesCall1748),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTUpdateFeaturesResponse1333FromJSON(jsonValue));
    }

    /**
     * This API accepts a list of features (that must already exist in the Part Studio) to update. This call does not fully redefine the features; it updates only the parameters supplied in the top-level feature structure, and optionally can update feature suppression attributes.  See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Update multiple features in a Part Studio
     */
    async updateFeatures(requestParameters: UpdateFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTUpdateFeaturesResponse1333> {
        const response = await this.updateFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replaces an existing feature in the location of the existing feature. See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Update the definition of a Part Studio feature.
     */
    async updatePartStudioFeatureRaw(requestParameters: UpdatePartStudioFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTFeatureDefinitionResponse1617>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updatePartStudioFeature.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling updatePartStudioFeature.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updatePartStudioFeature.');
        }

        if (requestParameters.fid === null || requestParameters.fid === undefined) {
            throw new runtime.RequiredError('fid','Required parameter requestParameters.fid was null or undefined when calling updatePartStudioFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters.fid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTFeatureDefinitionCall1406ToJSON(requestParameters.bTFeatureDefinitionCall1406),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTFeatureDefinitionResponse1617FromJSON(jsonValue));
    }

    /**
     * Replaces an existing feature in the location of the existing feature. See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
     * Update the definition of a Part Studio feature.
     */
    async updatePartStudioFeature(requestParameters: UpdatePartStudioFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTFeatureDefinitionResponse1617> {
        const response = await this.updatePartStudioFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace `\"string\"` in the request body with an object that specifies the new location for the rollback bar:   `{ \"rollbackIndex\": integer }`   For example: `{ \"rollbackIndex\": 2 }`   Set to `-1` to move the rollback bar to the end of the list.   See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Move the Feature List rollback bar in the Part Studio.
     */
    async updateRollbackRaw(requestParameters: UpdateRollbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTSetFeatureRollbackResponse1042>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling updateRollback.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling updateRollback.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling updateRollback.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateRollback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/partstudios/d/{did}/w/{wid}/e/{eid}/features/rollback`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTSetFeatureRollbackResponse1042FromJSON(jsonValue));
    }

    /**
     * Replace `\"string\"` in the request body with an object that specifies the new location for the rollback bar:   `{ \"rollbackIndex\": integer }`   For example: `{ \"rollbackIndex\": 2 }`   Set to `-1` to move the rollback bar to the end of the list.   See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
     * Move the Feature List rollback bar in the Part Studio.
     */
    async updateRollback(requestParameters: UpdateRollbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTSetFeatureRollbackResponse1042> {
        const response = await this.updateRollbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const EvalFeatureScriptWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type EvalFeatureScriptWvmEnum = typeof EvalFeatureScriptWvmEnum[keyof typeof EvalFeatureScriptWvmEnum];
/**
 * @export
 */
export const ExportPartStudioGltfWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type ExportPartStudioGltfWvmEnum = typeof ExportPartStudioGltfWvmEnum[keyof typeof ExportPartStudioGltfWvmEnum];
/**
 * @export
 */
export const GetFeatureScriptRepresentationWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetFeatureScriptRepresentationWvmEnum = typeof GetFeatureScriptRepresentationWvmEnum[keyof typeof GetFeatureScriptRepresentationWvmEnum];
/**
 * @export
 */
export const GetPartStudioBodyDetailsWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetPartStudioBodyDetailsWvmEnum = typeof GetPartStudioBodyDetailsWvmEnum[keyof typeof GetPartStudioBodyDetailsWvmEnum];
/**
 * @export
 */
export const GetPartStudioEdgesWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetPartStudioEdgesWvmEnum = typeof GetPartStudioEdgesWvmEnum[keyof typeof GetPartStudioEdgesWvmEnum];
/**
 * @export
 */
export const GetPartStudioFacesWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetPartStudioFacesWvmEnum = typeof GetPartStudioFacesWvmEnum[keyof typeof GetPartStudioFacesWvmEnum];
/**
 * @export
 */
export const GetPartStudioFeaturesWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetPartStudioFeaturesWvmEnum = typeof GetPartStudioFeaturesWvmEnum[keyof typeof GetPartStudioFeaturesWvmEnum];
/**
 * @export
 */
export const GetPartStudioMassPropertiesWvmEnum = {
    W: 'w',
    V: 'v',
    M: 'm'
} as const;
export type GetPartStudioMassPropertiesWvmEnum = typeof GetPartStudioMassPropertiesWvmEnum[keyof typeof GetPartStudioMassPropertiesWvmEnum];
