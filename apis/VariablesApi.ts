/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTDocumentElementInfo,
  BTModelElementParams,
  BTVariableParams,
  BTVariableStudioReferenceListInfo,
  BTVariableStudioScopeInfo,
  BTVariableTableInfo,
} from '../models';
import {
    BTDocumentElementInfoFromJSON,
    BTDocumentElementInfoToJSON,
    BTModelElementParamsFromJSON,
    BTModelElementParamsToJSON,
    BTVariableParamsFromJSON,
    BTVariableParamsToJSON,
    BTVariableStudioReferenceListInfoFromJSON,
    BTVariableStudioReferenceListInfoToJSON,
    BTVariableStudioScopeInfoFromJSON,
    BTVariableStudioScopeInfoToJSON,
    BTVariableTableInfoFromJSON,
    BTVariableTableInfoToJSON,
} from '../models';

export interface CreateVariableStudioRequest {
    did: string;
    wid: string;
    bTModelElementParams: BTModelElementParams;
    linkDocumentId?: string;
}

export interface GetVariableStudioReferencesRequest {
    did: string;
    wv: GetVariableStudioReferencesWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
}

export interface GetVariableStudioScopeRequest {
    did: string;
    wv: GetVariableStudioScopeWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
}

export interface GetVariablesRequest {
    did: string;
    wv: GetVariablesWvEnum;
    wvid: string;
    eid: string;
    linkDocumentId?: string;
    _configuration?: string;
    includeValuesAndReferencedVariables?: boolean;
}

export interface SetVariableStudioReferencesRequest {
    did: string;
    wid: string;
    eid: string;
    bTVariableStudioReferenceListInfo: BTVariableStudioReferenceListInfo;
    linkDocumentId?: string;
}

export interface SetVariableStudioScopeRequest {
    did: string;
    wid: string;
    eid: string;
    bTVariableStudioScopeInfo: BTVariableStudioScopeInfo;
    linkDocumentId?: string;
}

export interface SetVariablesRequest {
    did: string;
    wid: string;
    eid: string;
    bTVariableParams: Array<BTVariableParams>;
    linkDocumentId?: string;
}

/**
 * 
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * Create a new Variable Studio in a document and workspace.
     */
    async createVariableStudioRaw(requestParameters: CreateVariableStudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTDocumentElementInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling createVariableStudio.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling createVariableStudio.');
        }

        if (requestParameters.bTModelElementParams === null || requestParameters.bTModelElementParams === undefined) {
            throw new runtime.RequiredError('bTModelElementParams','Required parameter requestParameters.bTModelElementParams was null or undefined when calling createVariableStudio.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/variablestudio`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTModelElementParamsToJSON(requestParameters.bTModelElementParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTDocumentElementInfoFromJSON(jsonValue));
    }

    /**
     * Create a new Variable Studio in a document and workspace.
     */
    async createVariableStudio(requestParameters: CreateVariableStudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTDocumentElementInfo> {
        const response = await this.createVariableStudioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Variable Studio references for an element.
     */
    async getVariableStudioReferencesRaw(requestParameters: GetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTVariableStudioReferenceListInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVariableStudioReferences.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getVariableStudioReferences.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getVariableStudioReferences.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVariableStudioReferences.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioreferences`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTVariableStudioReferenceListInfoFromJSON(jsonValue));
    }

    /**
     * Get the Variable Studio references for an element.
     */
    async getVariableStudioReferences(requestParameters: GetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTVariableStudioReferenceListInfo> {
        const response = await this.getVariableStudioReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the scope of a Variable Studio.
     */
    async getVariableStudioScopeRaw(requestParameters: GetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTVariableStudioScopeInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVariableStudioScope.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getVariableStudioScope.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getVariableStudioScope.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVariableStudioScope.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioscope`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTVariableStudioScopeInfoFromJSON(jsonValue));
    }

    /**
     * Get the scope of a Variable Studio.
     */
    async getVariableStudioScope(requestParameters: GetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTVariableStudioScopeInfo> {
        const response = await this.getVariableStudioScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the contents of all variable tables in an element.
     */
    async getVariablesRaw(requestParameters: GetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BTVariableTableInfo>>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getVariables.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getVariables.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getVariables.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getVariables.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.includeValuesAndReferencedVariables !== undefined) {
            queryParameters['includeValuesAndReferencedVariables'] = requestParameters.includeValuesAndReferencedVariables;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/{wv}/{wvid}/e/{eid}/variables`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BTVariableTableInfoFromJSON));
    }

    /**
     * Get the contents of all variable tables in an element.
     */
    async getVariables(requestParameters: GetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BTVariableTableInfo>> {
        const response = await this.getVariablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the Variable Studio references for an element.
     */
    async setVariableStudioReferencesRaw(requestParameters: SetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling setVariableStudioReferences.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling setVariableStudioReferences.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling setVariableStudioReferences.');
        }

        if (requestParameters.bTVariableStudioReferenceListInfo === null || requestParameters.bTVariableStudioReferenceListInfo === undefined) {
            throw new runtime.RequiredError('bTVariableStudioReferenceListInfo','Required parameter requestParameters.bTVariableStudioReferenceListInfo was null or undefined when calling setVariableStudioReferences.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/e/{eid}/variablestudioreferences`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTVariableStudioReferenceListInfoToJSON(requestParameters.bTVariableStudioReferenceListInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set the Variable Studio references for an element.
     */
    async setVariableStudioReferences(requestParameters: SetVariableStudioReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setVariableStudioReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the scope the Variable Studio.
     */
    async setVariableStudioScopeRaw(requestParameters: SetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling setVariableStudioScope.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling setVariableStudioScope.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling setVariableStudioScope.');
        }

        if (requestParameters.bTVariableStudioScopeInfo === null || requestParameters.bTVariableStudioScopeInfo === undefined) {
            throw new runtime.RequiredError('bTVariableStudioScopeInfo','Required parameter requestParameters.bTVariableStudioScopeInfo was null or undefined when calling setVariableStudioScope.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/e/{eid}/variablestudioscope`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTVariableStudioScopeInfoToJSON(requestParameters.bTVariableStudioScopeInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set the scope the Variable Studio.
     */
    async setVariableStudioScope(requestParameters: SetVariableStudioScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setVariableStudioScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign variables to a Variable Studio
     */
    async setVariablesRaw(requestParameters: SetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling setVariables.');
        }

        if (requestParameters.wid === null || requestParameters.wid === undefined) {
            throw new runtime.RequiredError('wid','Required parameter requestParameters.wid was null or undefined when calling setVariables.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling setVariables.');
        }

        if (requestParameters.bTVariableParams === null || requestParameters.bTVariableParams === undefined) {
            throw new runtime.RequiredError('bTVariableParams','Required parameter requestParameters.bTVariableParams was null or undefined when calling setVariables.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/variables/d/{did}/w/{wid}/e/{eid}/variables`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wid"}}`, encodeURIComponent(String(requestParameters.wid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.bTVariableParams.map(BTVariableParamsToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Assign variables to a Variable Studio
     */
    async setVariables(requestParameters: SetVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setVariablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetVariableStudioReferencesWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetVariableStudioReferencesWvEnum = typeof GetVariableStudioReferencesWvEnum[keyof typeof GetVariableStudioReferencesWvEnum];
/**
 * @export
 */
export const GetVariableStudioScopeWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetVariableStudioScopeWvEnum = typeof GetVariableStudioScopeWvEnum[keyof typeof GetVariableStudioScopeWvEnum];
/**
 * @export
 */
export const GetVariablesWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetVariablesWvEnum = typeof GetVariablesWvEnum[keyof typeof GetVariablesWvEnum];
