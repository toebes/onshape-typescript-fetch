/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTActiveWorkflowInfo,
  BTReleasePackageInfo,
  BTReleasePackageParams,
  BTUpdateReleasePackageParams,
} from '../models';
import {
    BTActiveWorkflowInfoFromJSON,
    BTActiveWorkflowInfoToJSON,
    BTReleasePackageInfoFromJSON,
    BTReleasePackageInfoToJSON,
    BTReleasePackageParamsFromJSON,
    BTReleasePackageParamsToJSON,
    BTUpdateReleasePackageParamsFromJSON,
    BTUpdateReleasePackageParamsToJSON,
} from '../models';

export interface CreateObsoletionPackageRequest {
    wfid: string;
    revisionId: string;
    debugMode?: boolean;
}

export interface CreateReleasePackageRequest {
    wfid: string;
    bTReleasePackageParams: BTReleasePackageParams;
    debugMode?: boolean;
}

export interface GetCompanyReleaseWorkflowRequest {
    documentId?: string;
}

export interface GetReleasePackageRequest {
    rpid: string;
    detailed?: boolean;
}

export interface UpdateReleasePackageRequest {
    rpid: string;
    bTUpdateReleasePackageParams: BTUpdateReleasePackageParams;
    action?: string;
    wfaction?: string;
}

/**
 * 
 */
export class ReleasePackageApi extends runtime.BaseAPI {

    /**
     * Create an obsoletion package to make an existing revision obsolete.
     */
    async createObsoletionPackageRaw(requestParameters: CreateObsoletionPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.wfid === null || requestParameters.wfid === undefined) {
            throw new runtime.RequiredError('wfid','Required parameter requestParameters.wfid was null or undefined when calling createObsoletionPackage.');
        }

        if (requestParameters.revisionId === null || requestParameters.revisionId === undefined) {
            throw new runtime.RequiredError('revisionId','Required parameter requestParameters.revisionId was null or undefined when calling createObsoletionPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.revisionId !== undefined) {
            queryParameters['revisionId'] = requestParameters.revisionId;
        }

        if (requestParameters.debugMode !== undefined) {
            queryParameters['debugMode'] = requestParameters.debugMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/releasepackages/obsoletion/{wfid}`.replace(`{${"wfid"}}`, encodeURIComponent(String(requestParameters.wfid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create an obsoletion package to make an existing revision obsolete.
     */
    async createObsoletionPackage(requestParameters: CreateObsoletionPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createObsoletionPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * All revisionable items must be from the same document. Once a release package is successfully created, use `updateReleasePackage` to update all desired item/package properties, and transition it to the desired state.
     * Create a new release package for one or more items.
     */
    async createReleasePackageRaw(requestParameters: CreateReleasePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.wfid === null || requestParameters.wfid === undefined) {
            throw new runtime.RequiredError('wfid','Required parameter requestParameters.wfid was null or undefined when calling createReleasePackage.');
        }

        if (requestParameters.bTReleasePackageParams === null || requestParameters.bTReleasePackageParams === undefined) {
            throw new runtime.RequiredError('bTReleasePackageParams','Required parameter requestParameters.bTReleasePackageParams was null or undefined when calling createReleasePackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.debugMode !== undefined) {
            queryParameters['debugMode'] = requestParameters.debugMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/releasepackages/release/{wfid}`.replace(`{${"wfid"}}`, encodeURIComponent(String(requestParameters.wfid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTReleasePackageParamsToJSON(requestParameters.bTReleasePackageParams),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * All revisionable items must be from the same document. Once a release package is successfully created, use `updateReleasePackage` to update all desired item/package properties, and transition it to the desired state.
     * Create a new release package for one or more items.
     */
    async createReleasePackage(requestParameters: CreateReleasePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createReleasePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about the release/obsoletion workflow for a company-owned document.
     */
    async getCompanyReleaseWorkflowRaw(requestParameters: GetCompanyReleaseWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTActiveWorkflowInfo>> {
        const queryParameters: any = {};

        if (requestParameters.documentId !== undefined) {
            queryParameters['documentId'] = requestParameters.documentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/releasepackages/companyreleaseworkflow`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTActiveWorkflowInfoFromJSON(jsonValue));
    }

    /**
     * Get information about the release/obsoletion workflow for a company-owned document.
     */
    async getCompanyReleaseWorkflow(requestParameters: GetCompanyReleaseWorkflowRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTActiveWorkflowInfo> {
        const response = await this.getCompanyReleaseWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details about the specified release package.
     */
    async getReleasePackageRaw(requestParameters: GetReleasePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTReleasePackageInfo>> {
        if (requestParameters.rpid === null || requestParameters.rpid === undefined) {
            throw new runtime.RequiredError('rpid','Required parameter requestParameters.rpid was null or undefined when calling getReleasePackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.detailed !== undefined) {
            queryParameters['detailed'] = requestParameters.detailed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/releasepackages/{rpid}`.replace(`{${"rpid"}}`, encodeURIComponent(String(requestParameters.rpid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTReleasePackageInfoFromJSON(jsonValue));
    }

    /**
     * Get details about the specified release package.
     */
    async getReleasePackage(requestParameters: GetReleasePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTReleasePackageInfo> {
        const response = await this.getReleasePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the `wfaction` query param to also perform a workflow transition.
     * Update the release/obsoletion package/item properties.
     */
    async updateReleasePackageRaw(requestParameters: UpdateReleasePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTReleasePackageInfo>> {
        if (requestParameters.rpid === null || requestParameters.rpid === undefined) {
            throw new runtime.RequiredError('rpid','Required parameter requestParameters.rpid was null or undefined when calling updateReleasePackage.');
        }

        if (requestParameters.bTUpdateReleasePackageParams === null || requestParameters.bTUpdateReleasePackageParams === undefined) {
            throw new runtime.RequiredError('bTUpdateReleasePackageParams','Required parameter requestParameters.bTUpdateReleasePackageParams was null or undefined when calling updateReleasePackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.wfaction !== undefined) {
            queryParameters['wfaction'] = requestParameters.wfaction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/releasepackages/{rpid}`.replace(`{${"rpid"}}`, encodeURIComponent(String(requestParameters.rpid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTUpdateReleasePackageParamsToJSON(requestParameters.bTUpdateReleasePackageParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTReleasePackageInfoFromJSON(jsonValue));
    }

    /**
     * Use the `wfaction` query param to also perform a workflow transition.
     * Update the release/obsoletion package/item properties.
     */
    async updateReleasePackage(requestParameters: UpdateReleasePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTReleasePackageInfo> {
        const response = await this.updateReleasePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
