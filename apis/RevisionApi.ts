/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTListResponseBTRevisionInfo,
  BTRevisionInfo,
  BTRevisionListResponse,
} from '../models';
import {
    BTListResponseBTRevisionInfoFromJSON,
    BTListResponseBTRevisionInfoToJSON,
    BTRevisionInfoFromJSON,
    BTRevisionInfoToJSON,
    BTRevisionListResponseFromJSON,
    BTRevisionListResponseToJSON,
} from '../models';

export interface DeleteRevisionHistoryRequest {
    cid: string;
    pnum: string;
    et: string;
    ignoreLinkedDocuments?: boolean;
}

export interface EnumerateRevisionsRequest {
    cid: string;
    elementType?: number;
    limit?: number;
    latestOnly?: boolean;
    after?: Date;
}

export interface GetAllInDocumentRequest {
    did: string;
}

export interface GetAllInDocumentVersionRequest {
    did: string;
    vid: string;
}

export interface GetLatestInDocumentOrCompanyRequest {
    cd: string;
    cdid: string;
    pnum: string;
    et: string;
}

export interface GetRevisionByPartNumberRequest {
    cid: string;
    pnum: string;
    revision?: string;
    elementType?: number;
}

export interface GetRevisionHistoryInCompanyByElementIdRequest {
    cid: string;
    did: string;
    wv: GetRevisionHistoryInCompanyByElementIdWvEnum;
    wvid: string;
    eid: string;
    elementType: string;
    linkDocumentId?: string;
    _configuration?: string;
    fillApprovers?: boolean;
    fillExportPermission?: boolean;
    supportChangeType?: boolean;
}

export interface GetRevisionHistoryInCompanyByPartIdRequest {
    cid: string;
    did: string;
    wv: string;
    wvid: string;
    eid: string;
    pid: string;
    _configuration?: string;
    linkDocumentId?: string;
    fillApprovers?: boolean;
    fillExportPermission?: boolean;
    supportChangeType?: boolean;
}

export interface GetRevisionHistoryInCompanyByPartNumberRequest {
    cid: string;
    pnum: string;
    elementType: string;
    fillApprovers?: boolean;
    fillExportPermission?: boolean;
    supportChangeType?: boolean;
}

/**
 * 
 */
export class RevisionApi extends runtime.BaseAPI {

    /**
     * Only company admins can call this API. All documents that contain or use the part number must be deleted first. This operation cannot be undone.
     * Delete all revisions for a part number.
     */
    async deleteRevisionHistoryRaw(requestParameters: DeleteRevisionHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling deleteRevisionHistory.');
        }

        if (requestParameters.pnum === null || requestParameters.pnum === undefined) {
            throw new runtime.RequiredError('pnum','Required parameter requestParameters.pnum was null or undefined when calling deleteRevisionHistory.');
        }

        if (requestParameters.et === null || requestParameters.et === undefined) {
            throw new runtime.RequiredError('et','Required parameter requestParameters.et was null or undefined when calling deleteRevisionHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.ignoreLinkedDocuments !== undefined) {
            queryParameters['ignoreLinkedDocuments'] = requestParameters.ignoreLinkedDocuments;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Delete"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/companies/{cid}/partnumber/{pnum}/elementType/{et}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"pnum"}}`, encodeURIComponent(String(requestParameters.pnum))).replace(`{${"et"}}`, encodeURIComponent(String(requestParameters.et))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Only company admins can call this API. All documents that contain or use the part number must be deleted first. This operation cannot be undone.
     * Delete all revisions for a part number.
     */
    async deleteRevisionHistory(requestParameters: DeleteRevisionHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteRevisionHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Returns a slice of all revisions per API call.  * To get the next set of results, use the `next` URL from the response body.  * This API can only be called by company admins.
     * Enumerate all of a company\'s revisions.
     */
    async enumerateRevisionsRaw(requestParameters: EnumerateRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTListResponseBTRevisionInfo>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling enumerateRevisions.');
        }

        const queryParameters: any = {};

        if (requestParameters.elementType !== undefined) {
            queryParameters['elementType'] = requestParameters.elementType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.latestOnly !== undefined) {
            queryParameters['latestOnly'] = requestParameters.latestOnly;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/companies/{cid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTListResponseBTRevisionInfoFromJSON(jsonValue));
    }

    /**
     * * Returns a slice of all revisions per API call.  * To get the next set of results, use the `next` URL from the response body.  * This API can only be called by company admins.
     * Enumerate all of a company\'s revisions.
     */
    async enumerateRevisions(requestParameters: EnumerateRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTListResponseBTRevisionInfo> {
        const response = await this.enumerateRevisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all revisions that exist in a document and are owned by the document\'s owning company.
     * Get all revisions for the specified document.
     */
    async getAllInDocumentRaw(requestParameters: GetAllInDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTListResponseBTRevisionInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getAllInDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/d/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTListResponseBTRevisionInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all revisions that exist in a document and are owned by the document\'s owning company.
     * Get all revisions for the specified document.
     */
    async getAllInDocument(requestParameters: GetAllInDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTListResponseBTRevisionInfo> {
        const response = await this.getAllInDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all revisions that exist in a document version and are owned by the document\'s owning company.
     * Get all revisions for a version.
     */
    async getAllInDocumentVersionRaw(requestParameters: GetAllInDocumentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTListResponseBTRevisionInfo>> {
        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getAllInDocumentVersion.');
        }

        if (requestParameters.vid === null || requestParameters.vid === undefined) {
            throw new runtime.RequiredError('vid','Required parameter requestParameters.vid was null or undefined when calling getAllInDocumentVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/d/{did}/v/{vid}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"vid"}}`, encodeURIComponent(String(requestParameters.vid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTListResponseBTRevisionInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all revisions that exist in a document version and are owned by the document\'s owning company.
     * Get all revisions for a version.
     */
    async getAllInDocumentVersion(requestParameters: GetAllInDocumentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTListResponseBTRevisionInfo> {
        const response = await this.getAllInDocumentVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns 204 if no revisions are found.
     * Get the latest revision for a part number in a document or company.
     */
    async getLatestInDocumentOrCompanyRaw(requestParameters: GetLatestInDocumentOrCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTRevisionInfo>> {
        if (requestParameters.cd === null || requestParameters.cd === undefined) {
            throw new runtime.RequiredError('cd','Required parameter requestParameters.cd was null or undefined when calling getLatestInDocumentOrCompany.');
        }

        if (requestParameters.cdid === null || requestParameters.cdid === undefined) {
            throw new runtime.RequiredError('cdid','Required parameter requestParameters.cdid was null or undefined when calling getLatestInDocumentOrCompany.');
        }

        if (requestParameters.pnum === null || requestParameters.pnum === undefined) {
            throw new runtime.RequiredError('pnum','Required parameter requestParameters.pnum was null or undefined when calling getLatestInDocumentOrCompany.');
        }

        if (requestParameters.et === null || requestParameters.et === undefined) {
            throw new runtime.RequiredError('et','Required parameter requestParameters.et was null or undefined when calling getLatestInDocumentOrCompany.');
        }

        const queryParameters: any = {};

        if (requestParameters.et !== undefined) {
            queryParameters['et'] = requestParameters.et;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/{cd}/{cdid}/p/{pnum}/latest`.replace(`{${"cd"}}`, encodeURIComponent(String(requestParameters.cd))).replace(`{${"cdid"}}`, encodeURIComponent(String(requestParameters.cdid))).replace(`{${"pnum"}}`, encodeURIComponent(String(requestParameters.pnum))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTRevisionInfoFromJSON(jsonValue));
    }

    /**
     * Returns 204 if no revisions are found.
     * Get the latest revision for a part number in a document or company.
     */
    async getLatestInDocumentOrCompany(requestParameters: GetLatestInDocumentOrCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTRevisionInfo> {
        const response = await this.getLatestInDocumentOrCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of revisions by part number.
     */
    async getRevisionByPartNumberRaw(requestParameters: GetRevisionByPartNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTRevisionInfo>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getRevisionByPartNumber.');
        }

        if (requestParameters.pnum === null || requestParameters.pnum === undefined) {
            throw new runtime.RequiredError('pnum','Required parameter requestParameters.pnum was null or undefined when calling getRevisionByPartNumber.');
        }

        const queryParameters: any = {};

        if (requestParameters.revision !== undefined) {
            queryParameters['revision'] = requestParameters.revision;
        }

        if (requestParameters.elementType !== undefined) {
            queryParameters['elementType'] = requestParameters.elementType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/c/{cid}/partnumber/{pnum}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"pnum"}}`, encodeURIComponent(String(requestParameters.pnum))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTRevisionInfoFromJSON(jsonValue));
    }

    /**
     * Get a list of revisions by part number.
     */
    async getRevisionByPartNumber(requestParameters: GetRevisionByPartNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTRevisionInfo> {
        const response = await this.getRevisionByPartNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all revisions for an element in a company-owned document.
     */
    async getRevisionHistoryInCompanyByElementIdRaw(requestParameters: GetRevisionHistoryInCompanyByElementIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTRevisionListResponse>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getRevisionHistoryInCompanyByElementId.');
        }

        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getRevisionHistoryInCompanyByElementId.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getRevisionHistoryInCompanyByElementId.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getRevisionHistoryInCompanyByElementId.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getRevisionHistoryInCompanyByElementId.');
        }

        if (requestParameters.elementType === null || requestParameters.elementType === undefined) {
            throw new runtime.RequiredError('elementType','Required parameter requestParameters.elementType was null or undefined when calling getRevisionHistoryInCompanyByElementId.');
        }

        const queryParameters: any = {};

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.elementType !== undefined) {
            queryParameters['elementType'] = requestParameters.elementType;
        }

        if (requestParameters.fillApprovers !== undefined) {
            queryParameters['fillApprovers'] = requestParameters.fillApprovers;
        }

        if (requestParameters.fillExportPermission !== undefined) {
            queryParameters['fillExportPermission'] = requestParameters.fillExportPermission;
        }

        if (requestParameters.supportChangeType !== undefined) {
            queryParameters['supportChangeType'] = requestParameters.supportChangeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTRevisionListResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all revisions for an element in a company-owned document.
     */
    async getRevisionHistoryInCompanyByElementId(requestParameters: GetRevisionHistoryInCompanyByElementIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTRevisionListResponse> {
        const response = await this.getRevisionHistoryInCompanyByElementIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all revisions for a part in a company-owned document by part ID.
     */
    async getRevisionHistoryInCompanyByPartIdRaw(requestParameters: GetRevisionHistoryInCompanyByPartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTRevisionListResponse>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getRevisionHistoryInCompanyByPartId.');
        }

        if (requestParameters.did === null || requestParameters.did === undefined) {
            throw new runtime.RequiredError('did','Required parameter requestParameters.did was null or undefined when calling getRevisionHistoryInCompanyByPartId.');
        }

        if (requestParameters.wv === null || requestParameters.wv === undefined) {
            throw new runtime.RequiredError('wv','Required parameter requestParameters.wv was null or undefined when calling getRevisionHistoryInCompanyByPartId.');
        }

        if (requestParameters.wvid === null || requestParameters.wvid === undefined) {
            throw new runtime.RequiredError('wvid','Required parameter requestParameters.wvid was null or undefined when calling getRevisionHistoryInCompanyByPartId.');
        }

        if (requestParameters.eid === null || requestParameters.eid === undefined) {
            throw new runtime.RequiredError('eid','Required parameter requestParameters.eid was null or undefined when calling getRevisionHistoryInCompanyByPartId.');
        }

        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling getRevisionHistoryInCompanyByPartId.');
        }

        const queryParameters: any = {};

        if (requestParameters._configuration !== undefined) {
            queryParameters['configuration'] = requestParameters._configuration;
        }

        if (requestParameters.linkDocumentId !== undefined) {
            queryParameters['linkDocumentId'] = requestParameters.linkDocumentId;
        }

        if (requestParameters.fillApprovers !== undefined) {
            queryParameters['fillApprovers'] = requestParameters.fillApprovers;
        }

        if (requestParameters.fillExportPermission !== undefined) {
            queryParameters['fillExportPermission'] = requestParameters.fillExportPermission;
        }

        if (requestParameters.supportChangeType !== undefined) {
            queryParameters['supportChangeType'] = requestParameters.supportChangeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}/p/{pid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"did"}}`, encodeURIComponent(String(requestParameters.did))).replace(`{${"wv"}}`, encodeURIComponent(String(requestParameters.wv))).replace(`{${"wvid"}}`, encodeURIComponent(String(requestParameters.wvid))).replace(`{${"eid"}}`, encodeURIComponent(String(requestParameters.eid))).replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTRevisionListResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all revisions for a part in a company-owned document by part ID.
     */
    async getRevisionHistoryInCompanyByPartId(requestParameters: GetRevisionHistoryInCompanyByPartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTRevisionListResponse> {
        const response = await this.getRevisionHistoryInCompanyByPartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can also request `elementType` in addition to `partNumber` since companies may or may not allow drawings to share part numbers with their parts/assemblies. To perform search without `elementType`, use `elementType` = -1 | UNKNOWN. Available element types are: -1: Unknown, 0: Part Studio, 1: Assembly, 2: Drawing, 4: Blob, 5: Application, 8: Variable Studio 10: Unknown
     * Get a list of all revisions for a part or element in a company-owned document by part number.
     */
    async getRevisionHistoryInCompanyByPartNumberRaw(requestParameters: GetRevisionHistoryInCompanyByPartNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTRevisionListResponse>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getRevisionHistoryInCompanyByPartNumber.');
        }

        if (requestParameters.pnum === null || requestParameters.pnum === undefined) {
            throw new runtime.RequiredError('pnum','Required parameter requestParameters.pnum was null or undefined when calling getRevisionHistoryInCompanyByPartNumber.');
        }

        if (requestParameters.elementType === null || requestParameters.elementType === undefined) {
            throw new runtime.RequiredError('elementType','Required parameter requestParameters.elementType was null or undefined when calling getRevisionHistoryInCompanyByPartNumber.');
        }

        const queryParameters: any = {};

        if (requestParameters.elementType !== undefined) {
            queryParameters['elementType'] = requestParameters.elementType;
        }

        if (requestParameters.fillApprovers !== undefined) {
            queryParameters['fillApprovers'] = requestParameters.fillApprovers;
        }

        if (requestParameters.fillExportPermission !== undefined) {
            queryParameters['fillExportPermission'] = requestParameters.fillExportPermission;
        }

        if (requestParameters.supportChangeType !== undefined) {
            queryParameters['supportChangeType'] = requestParameters.supportChangeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/revisions/companies/{cid}/partnumber/{pnum}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"pnum"}}`, encodeURIComponent(String(requestParameters.pnum))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTRevisionListResponseFromJSON(jsonValue));
    }

    /**
     * You can also request `elementType` in addition to `partNumber` since companies may or may not allow drawings to share part numbers with their parts/assemblies. To perform search without `elementType`, use `elementType` = -1 | UNKNOWN. Available element types are: -1: Unknown, 0: Part Studio, 1: Assembly, 2: Drawing, 4: Blob, 5: Application, 8: Variable Studio 10: Unknown
     * Get a list of all revisions for a part or element in a company-owned document by part number.
     */
    async getRevisionHistoryInCompanyByPartNumber(requestParameters: GetRevisionHistoryInCompanyByPartNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTRevisionListResponse> {
        const response = await this.getRevisionHistoryInCompanyByPartNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRevisionHistoryInCompanyByElementIdWvEnum = {
    W: 'w',
    V: 'v'
} as const;
export type GetRevisionHistoryInCompanyByElementIdWvEnum = typeof GetRevisionHistoryInCompanyByElementIdWvEnum[keyof typeof GetRevisionHistoryInCompanyByElementIdWvEnum];
