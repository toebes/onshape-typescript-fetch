/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BTCreateTaskParams,
  BTTaskInfo,
  BTTaskListResponse,
  BTUpdateTaskParams,
} from '../models';
import {
    BTCreateTaskParamsFromJSON,
    BTCreateTaskParamsToJSON,
    BTTaskInfoFromJSON,
    BTTaskInfoToJSON,
    BTTaskListResponseFromJSON,
    BTTaskListResponseToJSON,
    BTUpdateTaskParamsFromJSON,
    BTUpdateTaskParamsToJSON,
} from '../models';

export interface CreateTaskRequest {
    bTCreateTaskParams: BTCreateTaskParams;
}

export interface GetActionItemsRequest {
    userId?: string;
    offset?: number;
    limit?: number;
    status?: number;
    role?: number;
    order?: number;
    type?: Array<string>;
    documentId?: string;
}

export interface GetTaskRequest {
    tid: string;
}

export interface TransitionTaskRequest {
    tid: string;
    transition: string;
}

export interface UpdateTaskRequest {
    tid: string;
    bTUpdateTaskParams: BTUpdateTaskParams;
}

/**
 * 
 */
export class TaskApi extends runtime.BaseAPI {

    /**
     * Create a new task in a draft state.
     */
    async createTaskRaw(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTaskInfo>> {
        if (requestParameters.bTCreateTaskParams === null || requestParameters.bTCreateTaskParams === undefined) {
            throw new runtime.RequiredError('bTCreateTaskParams','Required parameter requestParameters.bTCreateTaskParams was null or undefined when calling createTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTCreateTaskParamsToJSON(requestParameters.bTCreateTaskParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTaskInfoFromJSON(jsonValue));
    }

    /**
     * Create a new task in a draft state.
     */
    async createTask(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTaskInfo> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of tasks assigneed to the userId specified in the request. Only company admins can view tasks that were not created by them and are not assigned to them.
     * Lists tasks assigned to the specified user
     */
    async getActionItemsRaw(requestParameters: GetActionItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTaskListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.documentId !== undefined) {
            queryParameters['documentId'] = requestParameters.documentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTaskListResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of tasks assigneed to the userId specified in the request. Only company admins can view tasks that were not created by them and are not assigned to them.
     * Lists tasks assigned to the specified user
     */
    async getActionItems(requestParameters: GetActionItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTaskListResponse> {
        const response = await this.getActionItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a task by id.
     */
    async getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTaskInfo>> {
        if (requestParameters.tid === null || requestParameters.tid === undefined) {
            throw new runtime.RequiredError('tid','Required parameter requestParameters.tid was null or undefined when calling getTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Read"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tasks/{tid}`.replace(`{${"tid"}}`, encodeURIComponent(String(requestParameters.tid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTaskInfoFromJSON(jsonValue));
    }

    /**
     * Get a task by id.
     */
    async getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTaskInfo> {
        const response = await this.getTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a workflow transition.
     */
    async transitionTaskRaw(requestParameters: TransitionTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTaskInfo>> {
        if (requestParameters.tid === null || requestParameters.tid === undefined) {
            throw new runtime.RequiredError('tid','Required parameter requestParameters.tid was null or undefined when calling transitionTask.');
        }

        if (requestParameters.transition === null || requestParameters.transition === undefined) {
            throw new runtime.RequiredError('transition','Required parameter requestParameters.transition was null or undefined when calling transitionTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tasks/{tid}/{transition}`.replace(`{${"tid"}}`, encodeURIComponent(String(requestParameters.tid))).replace(`{${"transition"}}`, encodeURIComponent(String(requestParameters.transition))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTaskInfoFromJSON(jsonValue));
    }

    /**
     * Execute a workflow transition.
     */
    async transitionTask(requestParameters: TransitionTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTaskInfo> {
        const response = await this.transitionTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the task and its properties.
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BTTaskInfo>> {
        if (requestParameters.tid === null || requestParameters.tid === undefined) {
            throw new runtime.RequiredError('tid','Required parameter requestParameters.tid was null or undefined when calling updateTask.');
        }

        if (requestParameters.bTUpdateTaskParams === null || requestParameters.bTUpdateTaskParams === undefined) {
            throw new runtime.RequiredError('bTUpdateTaskParams','Required parameter requestParameters.bTUpdateTaskParams was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8; qs=0.09';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["OAuth2Write"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tasks/{tid}`.replace(`{${"tid"}}`, encodeURIComponent(String(requestParameters.tid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BTUpdateTaskParamsToJSON(requestParameters.bTUpdateTaskParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BTTaskInfoFromJSON(jsonValue));
    }

    /**
     * Update the task and its properties.
     */
    async updateTask(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BTTaskInfo> {
        const response = await this.updateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
