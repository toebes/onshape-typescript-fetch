/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAPIWorkflowableType } from './BTAPIWorkflowableType';
import {
    BTAPIWorkflowableTypeFromJSON,
    BTAPIWorkflowableTypeFromJSONTyped,
    BTAPIWorkflowableTypeToJSON,
} from './BTAPIWorkflowableType';
import type { BTMetadataStateType } from './BTMetadataStateType';
import {
    BTMetadataStateTypeFromJSON,
    BTMetadataStateTypeFromJSONTyped,
    BTMetadataStateTypeToJSON,
} from './BTMetadataStateType';

/**
 * An workflowable object like Release or Task that supports states and transitions.
 * @export
 * @interface BTObjectWorkflowInfo
 */
export interface BTObjectWorkflowInfo {
    /**
     * Whether workflowable object can be discarded.
     * @type {boolean}
     * @memberof BTObjectWorkflowInfo
     */
    canBeDiscarded?: boolean;
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    id?: string;
    /**
     * Whether workflowable object has been discarded.
     * @type {boolean}
     * @memberof BTObjectWorkflowInfo
     */
    isDiscarded?: boolean;
    /**
     * Whether workflowable object has reached terminal state and is frozen.
     * @type {boolean}
     * @memberof BTObjectWorkflowInfo
     */
    isFrozen?: boolean;
    /**
     * 
     * @type {BTMetadataStateType}
     * @memberof BTObjectWorkflowInfo
     */
    metadataState?: BTMetadataStateType;
    /**
     * Name of the resource.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    name?: string;
    /**
     * 
     * @type {BTAPIWorkflowableType}
     * @memberof BTObjectWorkflowInfo
     */
    objectType?: BTAPIWorkflowableType;
    /**
     * The current state of object like SETUP, REJECTED etc. Custom workflows can have any declared state.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    stateId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    viewRef?: string;
    /**
     * The workflow definition id that governs this object's states and transitions.
     * @type {string}
     * @memberof BTObjectWorkflowInfo
     */
    workflowId?: string;
}

/**
 * Check if a given object implements the BTObjectWorkflowInfo interface.
 */
export function instanceOfBTObjectWorkflowInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTObjectWorkflowInfoFromJSON(json: any): BTObjectWorkflowInfo {
    return BTObjectWorkflowInfoFromJSONTyped(json, false);
}

export function BTObjectWorkflowInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTObjectWorkflowInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'canBeDiscarded': !exists(json, 'canBeDiscarded') ? undefined : json['canBeDiscarded'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isDiscarded': !exists(json, 'isDiscarded') ? undefined : json['isDiscarded'],
        'isFrozen': !exists(json, 'isFrozen') ? undefined : json['isFrozen'],
        'metadataState': !exists(json, 'metadataState') ? undefined : BTMetadataStateTypeFromJSON(json['metadataState']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'objectType': !exists(json, 'objectType') ? undefined : BTAPIWorkflowableTypeFromJSON(json['objectType']),
        'stateId': !exists(json, 'stateId') ? undefined : json['stateId'],
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
        'workflowId': !exists(json, 'workflowId') ? undefined : json['workflowId'],
    };
}

export function BTObjectWorkflowInfoToJSON(value?: BTObjectWorkflowInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'canBeDiscarded': value.canBeDiscarded,
        'href': value.href,
        'id': value.id,
        'isDiscarded': value.isDiscarded,
        'isFrozen': value.isFrozen,
        'metadataState': BTMetadataStateTypeToJSON(value.metadataState),
        'name': value.name,
        'objectType': BTAPIWorkflowableTypeToJSON(value.objectType),
        'stateId': value.stateId,
        'viewRef': value.viewRef,
        'workflowId': value.workflowId,
    };
}

