/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTBoundingBox1052 } from './BTBoundingBox1052';
import {
    BTBoundingBox1052FromJSON,
    BTBoundingBox1052FromJSONTyped,
    BTBoundingBox1052ToJSON,
} from './BTBoundingBox1052';
import type { BTDecal2404 } from './BTDecal2404';
import {
    BTDecal2404FromJSON,
    BTDecal2404FromJSONTyped,
    BTDecal2404ToJSON,
} from './BTDecal2404';
import type { BTExportModelLoop1182 } from './BTExportModelLoop1182';
import {
    BTExportModelLoop1182FromJSON,
    BTExportModelLoop1182FromJSONTyped,
    BTExportModelLoop1182ToJSON,
} from './BTExportModelLoop1182';
import type { BTExportModelProperties3216 } from './BTExportModelProperties3216';
import {
    BTExportModelProperties3216FromJSON,
    BTExportModelProperties3216FromJSONTyped,
    BTExportModelProperties3216ToJSON,
} from './BTExportModelProperties3216';
import type { BTSurfaceDescription1564 } from './BTSurfaceDescription1564';
import {
    BTSurfaceDescription1564FromJSON,
    BTSurfaceDescription1564FromJSONTyped,
    BTSurfaceDescription1564ToJSON,
} from './BTSurfaceDescription1564';

/**
 * 
 * @export
 * @interface BTExportModelFace1363
 */
export interface BTExportModelFace1363 {
    /**
     * Identifies the application of the appearance. Faces that share a value were assigned an appearance together.
     * @type {string}
     * @memberof BTExportModelFace1363
     */
    appearancePropertyNodeId?: string;
    /**
     * 
     * @type {number}
     * @memberof BTExportModelFace1363
     */
    area?: number;
    /**
     * 
     * @type {BTBoundingBox1052}
     * @memberof BTExportModelFace1363
     */
    box?: BTBoundingBox1052;
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTExportModelFace1363
     */
    btType?: string;
    /**
     * 
     * @type {{ [key: string]: BTDecal2404; }}
     * @memberof BTExportModelFace1363
     */
    decalIdToDecal?: { [key: string]: BTDecal2404; };
    /**
     * 
     * @type {BTExportModelProperties3216}
     * @memberof BTExportModelFace1363
     */
    faceProperties?: BTExportModelProperties3216;
    /**
     * 
     * @type {string}
     * @memberof BTExportModelFace1363
     */
    id?: string;
    /**
     * 
     * @type {Array<BTExportModelLoop1182>}
     * @memberof BTExportModelFace1363
     */
    loops?: Array<BTExportModelLoop1182>;
    /**
     * 
     * @type {boolean}
     * @memberof BTExportModelFace1363
     */
    orientation?: boolean;
    /**
     * 
     * @type {BTSurfaceDescription1564}
     * @memberof BTExportModelFace1363
     */
    surface?: BTSurfaceDescription1564;
}

/**
 * Check if a given object implements the BTExportModelFace1363 interface.
 */
export function instanceOfBTExportModelFace1363(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTExportModelFace1363FromJSON(json: any): BTExportModelFace1363 {
    return BTExportModelFace1363FromJSONTyped(json, false);
}

export function BTExportModelFace1363FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTExportModelFace1363 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appearancePropertyNodeId': !exists(json, 'appearancePropertyNodeId') ? undefined : json['appearancePropertyNodeId'],
        'area': !exists(json, 'area') ? undefined : json['area'],
        'box': !exists(json, 'box') ? undefined : BTBoundingBox1052FromJSON(json['box']),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'decalIdToDecal': !exists(json, 'decalIdToDecal') ? undefined : (mapValues(json['decalIdToDecal'], BTDecal2404FromJSON)),
        'faceProperties': !exists(json, 'faceProperties') ? undefined : BTExportModelProperties3216FromJSON(json['faceProperties']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'loops': !exists(json, 'loops') ? undefined : ((json['loops'] as Array<any>).map(BTExportModelLoop1182FromJSON)),
        'orientation': !exists(json, 'orientation') ? undefined : json['orientation'],
        'surface': !exists(json, 'surface') ? undefined : BTSurfaceDescription1564FromJSON(json['surface']),
    };
}

export function BTExportModelFace1363ToJSON(value?: BTExportModelFace1363 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appearancePropertyNodeId': value.appearancePropertyNodeId,
        'area': value.area,
        'box': BTBoundingBox1052ToJSON(value.box),
        'btType': value.btType,
        'decalIdToDecal': value.decalIdToDecal === undefined ? undefined : (mapValues(value.decalIdToDecal, BTDecal2404ToJSON)),
        'faceProperties': BTExportModelProperties3216ToJSON(value.faceProperties),
        'id': value.id,
        'loops': value.loops === undefined ? undefined : ((value.loops as Array<any>).map(BTExportModelLoop1182ToJSON)),
        'orientation': value.orientation,
        'surface': BTSurfaceDescription1564ToJSON(value.surface),
    };
}

