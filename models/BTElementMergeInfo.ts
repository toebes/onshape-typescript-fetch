/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTUserBasicSummaryInfo } from './BTUserBasicSummaryInfo';
import {
    BTUserBasicSummaryInfoFromJSON,
    BTUserBasicSummaryInfoFromJSONTyped,
    BTUserBasicSummaryInfoToJSON,
} from './BTUserBasicSummaryInfo';
import type { GBTElementBranchStatus } from './GBTElementBranchStatus';
import {
    GBTElementBranchStatusFromJSON,
    GBTElementBranchStatusFromJSONTyped,
    GBTElementBranchStatusToJSON,
} from './GBTElementBranchStatus';
import type { GBTElementType } from './GBTElementType';
import {
    GBTElementTypeFromJSON,
    GBTElementTypeFromJSONTyped,
    GBTElementTypeToJSON,
} from './GBTElementType';

/**
 * 
 * @export
 * @interface BTElementMergeInfo
 */
export interface BTElementMergeInfo {
    /**
     * 
     * @type {string}
     * @memberof BTElementMergeInfo
     */
    branchPointElementName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTElementMergeInfo
     */
    branchPointElementPath?: Array<string>;
    /**
     * 
     * @type {BTElementMergeInfo}
     * @memberof BTElementMergeInfo
     */
    dependentElementMergeInfo?: BTElementMergeInfo;
    /**
     * 
     * @type {string}
     * @memberof BTElementMergeInfo
     */
    elementDataType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTElementMergeInfo
     */
    elementId?: string;
    /**
     * 
     * @type {GBTElementType}
     * @memberof BTElementMergeInfo
     */
    elementType?: GBTElementType;
    /**
     * 
     * @type {boolean}
     * @memberof BTElementMergeInfo
     */
    mergeable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTElementMergeInfo
     */
    sourceElementName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTElementMergeInfo
     */
    sourceElementPath?: Array<string>;
    /**
     * 
     * @type {GBTElementBranchStatus}
     * @memberof BTElementMergeInfo
     */
    sourceElementStatus?: GBTElementBranchStatus;
    /**
     * 
     * @type {number}
     * @memberof BTElementMergeInfo
     */
    sourceLibraryVersion?: number;
    /**
     * 
     * @type {Date}
     * @memberof BTElementMergeInfo
     */
    sourceModifiedAt?: Date;
    /**
     * 
     * @type {BTUserBasicSummaryInfo}
     * @memberof BTElementMergeInfo
     */
    sourceModifiedBy?: BTUserBasicSummaryInfo;
    /**
     * 
     * @type {boolean}
     * @memberof BTElementMergeInfo
     */
    sourceOutOfDate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTElementMergeInfo
     */
    targetElementName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTElementMergeInfo
     */
    targetElementPath?: Array<string>;
    /**
     * 
     * @type {GBTElementBranchStatus}
     * @memberof BTElementMergeInfo
     */
    targetElementStatus?: GBTElementBranchStatus;
    /**
     * 
     * @type {number}
     * @memberof BTElementMergeInfo
     */
    targetLibraryVersion?: number;
    /**
     * 
     * @type {Date}
     * @memberof BTElementMergeInfo
     */
    targetModifiedAt?: Date;
    /**
     * 
     * @type {BTUserBasicSummaryInfo}
     * @memberof BTElementMergeInfo
     */
    targetModifiedBy?: BTUserBasicSummaryInfo;
    /**
     * 
     * @type {boolean}
     * @memberof BTElementMergeInfo
     */
    targetOutOfDate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTElementMergeInfo
     */
    versionCompatible?: boolean;
}

/**
 * Check if a given object implements the BTElementMergeInfo interface.
 */
export function instanceOfBTElementMergeInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTElementMergeInfoFromJSON(json: any): BTElementMergeInfo {
    return BTElementMergeInfoFromJSONTyped(json, false);
}

export function BTElementMergeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTElementMergeInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'branchPointElementName': !exists(json, 'branchPointElementName') ? undefined : json['branchPointElementName'],
        'branchPointElementPath': !exists(json, 'branchPointElementPath') ? undefined : json['branchPointElementPath'],
        'dependentElementMergeInfo': !exists(json, 'dependentElementMergeInfo') ? undefined : BTElementMergeInfoFromJSON(json['dependentElementMergeInfo']),
        'elementDataType': !exists(json, 'elementDataType') ? undefined : json['elementDataType'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementType': !exists(json, 'elementType') ? undefined : GBTElementTypeFromJSON(json['elementType']),
        'mergeable': !exists(json, 'mergeable') ? undefined : json['mergeable'],
        'sourceElementName': !exists(json, 'sourceElementName') ? undefined : json['sourceElementName'],
        'sourceElementPath': !exists(json, 'sourceElementPath') ? undefined : json['sourceElementPath'],
        'sourceElementStatus': !exists(json, 'sourceElementStatus') ? undefined : GBTElementBranchStatusFromJSON(json['sourceElementStatus']),
        'sourceLibraryVersion': !exists(json, 'sourceLibraryVersion') ? undefined : json['sourceLibraryVersion'],
        'sourceModifiedAt': !exists(json, 'sourceModifiedAt') ? undefined : (new Date(json['sourceModifiedAt'])),
        'sourceModifiedBy': !exists(json, 'sourceModifiedBy') ? undefined : BTUserBasicSummaryInfoFromJSON(json['sourceModifiedBy']),
        'sourceOutOfDate': !exists(json, 'sourceOutOfDate') ? undefined : json['sourceOutOfDate'],
        'targetElementName': !exists(json, 'targetElementName') ? undefined : json['targetElementName'],
        'targetElementPath': !exists(json, 'targetElementPath') ? undefined : json['targetElementPath'],
        'targetElementStatus': !exists(json, 'targetElementStatus') ? undefined : GBTElementBranchStatusFromJSON(json['targetElementStatus']),
        'targetLibraryVersion': !exists(json, 'targetLibraryVersion') ? undefined : json['targetLibraryVersion'],
        'targetModifiedAt': !exists(json, 'targetModifiedAt') ? undefined : (new Date(json['targetModifiedAt'])),
        'targetModifiedBy': !exists(json, 'targetModifiedBy') ? undefined : BTUserBasicSummaryInfoFromJSON(json['targetModifiedBy']),
        'targetOutOfDate': !exists(json, 'targetOutOfDate') ? undefined : json['targetOutOfDate'],
        'versionCompatible': !exists(json, 'versionCompatible') ? undefined : json['versionCompatible'],
    };
}

export function BTElementMergeInfoToJSON(value?: BTElementMergeInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'branchPointElementName': value.branchPointElementName,
        'branchPointElementPath': value.branchPointElementPath,
        'dependentElementMergeInfo': BTElementMergeInfoToJSON(value.dependentElementMergeInfo),
        'elementDataType': value.elementDataType,
        'elementId': value.elementId,
        'elementType': GBTElementTypeToJSON(value.elementType),
        'mergeable': value.mergeable,
        'sourceElementName': value.sourceElementName,
        'sourceElementPath': value.sourceElementPath,
        'sourceElementStatus': GBTElementBranchStatusToJSON(value.sourceElementStatus),
        'sourceLibraryVersion': value.sourceLibraryVersion,
        'sourceModifiedAt': value.sourceModifiedAt === undefined ? undefined : (value.sourceModifiedAt.toISOString()),
        'sourceModifiedBy': BTUserBasicSummaryInfoToJSON(value.sourceModifiedBy),
        'sourceOutOfDate': value.sourceOutOfDate,
        'targetElementName': value.targetElementName,
        'targetElementPath': value.targetElementPath,
        'targetElementStatus': GBTElementBranchStatusToJSON(value.targetElementStatus),
        'targetLibraryVersion': value.targetLibraryVersion,
        'targetModifiedAt': value.targetModifiedAt === undefined ? undefined : (value.targetModifiedAt.toISOString()),
        'targetModifiedBy': BTUserBasicSummaryInfoToJSON(value.targetModifiedBy),
        'targetOutOfDate': value.targetOutOfDate,
        'versionCompatible': value.versionCompatible,
    };
}

