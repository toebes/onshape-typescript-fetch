/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Header } from './Header';
import {
    HeaderFromJSON,
    HeaderFromJSONTyped,
    HeaderToJSON,
} from './Header';
import type { Server } from './Server';
import {
    ServerFromJSON,
    ServerFromJSONTyped,
    ServerToJSON,
} from './Server';

/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Link
     */
    extensions?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    get$ref?: string;
    /**
     * 
     * @type {{ [key: string]: Header; }}
     * @memberof Link
     */
    headers?: { [key: string]: Header; };
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    operationId?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    operationRef?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Link
     */
    parameters?: { [key: string]: string; };
    /**
     * 
     * @type {object}
     * @memberof Link
     */
    requestBody?: object;
    /**
     * 
     * @type {Server}
     * @memberof Link
     */
    server?: Server;
}

/**
 * Check if a given object implements the Link interface.
 */
export function instanceOfLink(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LinkFromJSON(json: any): Link {
    return LinkFromJSONTyped(json, false);
}

export function LinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Link {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'get$ref': !exists(json, 'get$ref') ? undefined : json['get$ref'],
        'headers': !exists(json, 'headers') ? undefined : (mapValues(json['headers'], HeaderFromJSON)),
        'operationId': !exists(json, 'operationId') ? undefined : json['operationId'],
        'operationRef': !exists(json, 'operationRef') ? undefined : json['operationRef'],
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
        'requestBody': !exists(json, 'requestBody') ? undefined : json['requestBody'],
        'server': !exists(json, 'server') ? undefined : ServerFromJSON(json['server']),
    };
}

export function LinkToJSON(value?: Link | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'extensions': value.extensions,
        'get$ref': value.get$ref,
        'headers': value.headers === undefined ? undefined : (mapValues(value.headers, HeaderToJSON)),
        'operationId': value.operationId,
        'operationRef': value.operationRef,
        'parameters': value.parameters,
        'requestBody': value.requestBody,
        'server': ServerToJSON(value.server),
    };
}

