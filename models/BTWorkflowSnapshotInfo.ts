/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTWorkflowActionInfo } from './BTWorkflowActionInfo';
import {
    BTWorkflowActionInfoFromJSON,
    BTWorkflowActionInfoFromJSONTyped,
    BTWorkflowActionInfoToJSON,
} from './BTWorkflowActionInfo';
import type { BTWorkflowStateInfo } from './BTWorkflowStateInfo';
import {
    BTWorkflowStateInfoFromJSON,
    BTWorkflowStateInfoFromJSONTyped,
    BTWorkflowStateInfoToJSON,
} from './BTWorkflowStateInfo';

/**
 * 
 * @export
 * @interface BTWorkflowSnapshotInfo
 */
export interface BTWorkflowSnapshotInfo {
    /**
     * 
     * @type {Array<BTWorkflowActionInfo>}
     * @memberof BTWorkflowSnapshotInfo
     */
    actions?: Array<BTWorkflowActionInfo>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTWorkflowSnapshotInfo
     */
    approverIds?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowSnapshotInfo
     */
    canBeDiscarded?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowSnapshotInfo
     */
    debugMicroversionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowSnapshotInfo
     */
    errorMessage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowSnapshotInfo
     */
    isCreator?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowSnapshotInfo
     */
    isDiscarded?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowSnapshotInfo
     */
    isFrozen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowSnapshotInfo
     */
    isSetup?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowSnapshotInfo
     */
    metadataState?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTWorkflowSnapshotInfo
     */
    notifierIds?: Array<string>;
    /**
     * 
     * @type {BTWorkflowStateInfo}
     * @memberof BTWorkflowSnapshotInfo
     */
    state?: BTWorkflowStateInfo;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowSnapshotInfo
     */
    usesExternalPlm?: boolean;
}

/**
 * Check if a given object implements the BTWorkflowSnapshotInfo interface.
 */
export function instanceOfBTWorkflowSnapshotInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTWorkflowSnapshotInfoFromJSON(json: any): BTWorkflowSnapshotInfo {
    return BTWorkflowSnapshotInfoFromJSONTyped(json, false);
}

export function BTWorkflowSnapshotInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTWorkflowSnapshotInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actions': !exists(json, 'actions') ? undefined : ((json['actions'] as Array<any>).map(BTWorkflowActionInfoFromJSON)),
        'approverIds': !exists(json, 'approverIds') ? undefined : json['approverIds'],
        'canBeDiscarded': !exists(json, 'canBeDiscarded') ? undefined : json['canBeDiscarded'],
        'debugMicroversionId': !exists(json, 'debugMicroversionId') ? undefined : json['debugMicroversionId'],
        'errorMessage': !exists(json, 'errorMessage') ? undefined : json['errorMessage'],
        'isCreator': !exists(json, 'isCreator') ? undefined : json['isCreator'],
        'isDiscarded': !exists(json, 'isDiscarded') ? undefined : json['isDiscarded'],
        'isFrozen': !exists(json, 'isFrozen') ? undefined : json['isFrozen'],
        'isSetup': !exists(json, 'isSetup') ? undefined : json['isSetup'],
        'metadataState': !exists(json, 'metadataState') ? undefined : json['metadataState'],
        'notifierIds': !exists(json, 'notifierIds') ? undefined : json['notifierIds'],
        'state': !exists(json, 'state') ? undefined : BTWorkflowStateInfoFromJSON(json['state']),
        'usesExternalPlm': !exists(json, 'usesExternalPlm') ? undefined : json['usesExternalPlm'],
    };
}

export function BTWorkflowSnapshotInfoToJSON(value?: BTWorkflowSnapshotInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actions': value.actions === undefined ? undefined : ((value.actions as Array<any>).map(BTWorkflowActionInfoToJSON)),
        'approverIds': value.approverIds,
        'canBeDiscarded': value.canBeDiscarded,
        'debugMicroversionId': value.debugMicroversionId,
        'errorMessage': value.errorMessage,
        'isCreator': value.isCreator,
        'isDiscarded': value.isDiscarded,
        'isFrozen': value.isFrozen,
        'isSetup': value.isSetup,
        'metadataState': value.metadataState,
        'notifierIds': value.notifierIds,
        'state': BTWorkflowStateInfoToJSON(value.state),
        'usesExternalPlm': value.usesExternalPlm,
    };
}

