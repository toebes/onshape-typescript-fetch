/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccessorData } from './AccessorData';
import {
    AccessorDataFromJSON,
    AccessorDataFromJSONTyped,
    AccessorDataToJSON,
} from './AccessorData';
import type { BufferViewModel } from './BufferViewModel';
import {
    BufferViewModelFromJSON,
    BufferViewModelFromJSONTyped,
    BufferViewModelToJSON,
} from './BufferViewModel';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';

/**
 * 
 * @export
 * @interface AccessorModel
 */
export interface AccessorModel {
    /**
     * 
     * @type {AccessorData}
     * @memberof AccessorModel
     */
    accessorData?: AccessorData;
    /**
     * 
     * @type {BufferViewModel}
     * @memberof AccessorModel
     */
    bufferViewModel?: BufferViewModel;
    /**
     * 
     * @type {number}
     * @memberof AccessorModel
     */
    byteOffset?: number;
    /**
     * 
     * @type {number}
     * @memberof AccessorModel
     */
    byteStride?: number;
    /**
     * 
     * @type {number}
     * @memberof AccessorModel
     */
    componentSizeInBytes?: number;
    /**
     * 
     * @type {number}
     * @memberof AccessorModel
     */
    componentType?: number;
    /**
     * 
     * @type {number}
     * @memberof AccessorModel
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof AccessorModel
     */
    elementSizeInBytes?: number;
    /**
     * 
     * @type {ElementType}
     * @memberof AccessorModel
     */
    elementType?: ElementType;
    /**
     * 
     * @type {Array<number>}
     * @memberof AccessorModel
     */
    max?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof AccessorModel
     */
    min?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof AccessorModel
     */
    name?: string;
}

/**
 * Check if a given object implements the AccessorModel interface.
 */
export function instanceOfAccessorModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccessorModelFromJSON(json: any): AccessorModel {
    return AccessorModelFromJSONTyped(json, false);
}

export function AccessorModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccessorModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessorData': !exists(json, 'accessorData') ? undefined : AccessorDataFromJSON(json['accessorData']),
        'bufferViewModel': !exists(json, 'bufferViewModel') ? undefined : BufferViewModelFromJSON(json['bufferViewModel']),
        'byteOffset': !exists(json, 'byteOffset') ? undefined : json['byteOffset'],
        'byteStride': !exists(json, 'byteStride') ? undefined : json['byteStride'],
        'componentSizeInBytes': !exists(json, 'componentSizeInBytes') ? undefined : json['componentSizeInBytes'],
        'componentType': !exists(json, 'componentType') ? undefined : json['componentType'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'elementSizeInBytes': !exists(json, 'elementSizeInBytes') ? undefined : json['elementSizeInBytes'],
        'elementType': !exists(json, 'elementType') ? undefined : ElementTypeFromJSON(json['elementType']),
        'max': !exists(json, 'max') ? undefined : json['max'],
        'min': !exists(json, 'min') ? undefined : json['min'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function AccessorModelToJSON(value?: AccessorModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessorData': AccessorDataToJSON(value.accessorData),
        'bufferViewModel': BufferViewModelToJSON(value.bufferViewModel),
        'byteOffset': value.byteOffset,
        'byteStride': value.byteStride,
        'componentSizeInBytes': value.componentSizeInBytes,
        'componentType': value.componentType,
        'count': value.count,
        'elementSizeInBytes': value.elementSizeInBytes,
        'elementType': ElementTypeToJSON(value.elementType),
        'max': value.max,
        'min': value.min,
        'name': value.name,
    };
}

