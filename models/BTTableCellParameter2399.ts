/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMParameter1 } from './BTMParameter1';
import {
    BTMParameter1FromJSON,
    BTMParameter1FromJSONTyped,
    BTMParameter1ToJSON,
} from './BTMParameter1';
import type { BTParameterSpec6 } from './BTParameterSpec6';
import {
    BTParameterSpec6FromJSON,
    BTParameterSpec6FromJSONTyped,
    BTParameterSpec6ToJSON,
} from './BTParameterSpec6';
import type { BTTableCell1114 } from './BTTableCell1114';
import {
    BTTableCell1114FromJSON,
    BTTableCell1114FromJSONTyped,
    BTTableCell1114ToJSON,
 BTTableCell1114SuperToJSON,
} from './BTTableCell1114';

import {
     BTTableCellParameterWithValue2122FromJSONTyped,
    BTTableCellParameterWithValue2122ToJSON,
     BTTableCellPropertyParameter2983FromJSONTyped,
    BTTableCellPropertyParameter2983ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTTableCellParameter2399
 */
export interface BTTableCellParameter2399 extends BTTableCell1114 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTTableCellParameter2399
     */
    btType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTableCellParameter2399
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTableCellParameter2399
     */
    info?: string;
    /**
     * 
     * @type {BTParameterSpec6}
     * @memberof BTTableCellParameter2399
     */
    overrideSpec?: BTParameterSpec6;
    /**
     * 
     * @type {BTMParameter1}
     * @memberof BTTableCellParameter2399
     */
    parameter?: BTMParameter1;
}

/**
 * Check if a given object implements the BTTableCellParameter2399 interface.
 */
export function instanceOfBTTableCellParameter2399(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTTableCellParameter2399FromJSON(json: any): BTTableCellParameter2399 {
    return BTTableCellParameter2399FromJSONTyped(json, false);
}

export function BTTableCellParameter2399FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTTableCellParameter2399 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTTableCellParameterWithValue-2122') {
            return BTTableCellParameterWithValue2122FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTTableCellPropertyParameter-2983') {
            return BTTableCellPropertyParameter2983FromJSONTyped(json, true);
        }
    }
    return {
        ...BTTableCell1114FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'info': !exists(json, 'info') ? undefined : json['info'],
        'overrideSpec': !exists(json, 'overrideSpec') ? undefined : BTParameterSpec6FromJSON(json['overrideSpec']),
        'parameter': !exists(json, 'parameter') ? undefined : BTMParameter1FromJSON(json['parameter']),
    };
}

export function BTTableCellParameter2399SuperToJSON(value?: BTTableCellParameter2399 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTTableCell1114SuperToJSON(value),
        'btType': value.btType,
        'error': value.error,
        'info': value.info,
        'overrideSpec': BTParameterSpec6ToJSON(value.overrideSpec),
        'parameter': BTMParameter1ToJSON(value.parameter),
    };
}



export function BTTableCellParameter2399ToJSON(value?: BTTableCellParameter2399 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTTableCellParameterWithValue-2122') {
        return BTTableCellParameterWithValue2122ToJSON(value);
    }
    if (value.btType === 'BTTableCellPropertyParameter-2983') {
        return BTTableCellPropertyParameter2983ToJSON(value);
    }
    return BTTableCellParameter2399SuperToJSON(value);
}
