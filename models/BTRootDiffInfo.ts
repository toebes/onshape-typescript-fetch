/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTDiffInfo } from './BTDiffInfo';
import {
    BTDiffInfoFromJSON,
    BTDiffInfoFromJSONTyped,
    BTDiffInfoToJSON,
} from './BTDiffInfo';
import type { BTDiffInfoCollectionType } from './BTDiffInfoCollectionType';
import {
    BTDiffInfoCollectionTypeFromJSON,
    BTDiffInfoCollectionTypeFromJSONTyped,
    BTDiffInfoCollectionTypeToJSON,
} from './BTDiffInfoCollectionType';
import type { GBTNodeChange } from './GBTNodeChange';
import {
    GBTNodeChangeFromJSON,
    GBTNodeChangeFromJSONTyped,
    GBTNodeChangeToJSON,
} from './GBTNodeChange';

/**
 * 
 * @export
 * @interface BTRootDiffInfo
 */
export interface BTRootDiffInfo {
    /**
     * 
     * @type {{ [key: string]: BTDiffInfo; }}
     * @memberof BTRootDiffInfo
     */
    changes?: { [key: string]: BTDiffInfo; };
    /**
     * 
     * @type {{ [key: string]: Array<BTDiffInfo>; }}
     * @memberof BTRootDiffInfo
     */
    collectionChanges?: { [key: string]: Array<BTDiffInfo>; };
    /**
     * 
     * @type {BTDiffInfoCollectionType}
     * @memberof BTRootDiffInfo
     */
    entityType?: BTDiffInfoCollectionType;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTRootDiffInfo
     */
    geometryChangeMessages?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    sourceConfiguration?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    sourceMicroversionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    sourceValue?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    sourceVersionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    sourceWorkspaceId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    targetConfiguration?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    targetId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    targetMicroversionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    targetValue?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    targetVersionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTRootDiffInfo
     */
    targetWorkspaceId?: string;
    /**
     * 
     * @type {GBTNodeChange}
     * @memberof BTRootDiffInfo
     */
    type?: GBTNodeChange;
}

/**
 * Check if a given object implements the BTRootDiffInfo interface.
 */
export function instanceOfBTRootDiffInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTRootDiffInfoFromJSON(json: any): BTRootDiffInfo {
    return BTRootDiffInfoFromJSONTyped(json, false);
}

export function BTRootDiffInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTRootDiffInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changes': !exists(json, 'changes') ? undefined : (mapValues(json['changes'], BTDiffInfoFromJSON)),
        'collectionChanges': !exists(json, 'collectionChanges') ? undefined : json['collectionChanges'],
        'entityType': !exists(json, 'entityType') ? undefined : BTDiffInfoCollectionTypeFromJSON(json['entityType']),
        'geometryChangeMessages': !exists(json, 'geometryChangeMessages') ? undefined : json['geometryChangeMessages'],
        'sourceConfiguration': !exists(json, 'sourceConfiguration') ? undefined : json['sourceConfiguration'],
        'sourceId': !exists(json, 'sourceId') ? undefined : json['sourceId'],
        'sourceMicroversionId': !exists(json, 'sourceMicroversionId') ? undefined : json['sourceMicroversionId'],
        'sourceValue': !exists(json, 'sourceValue') ? undefined : json['sourceValue'],
        'sourceVersionId': !exists(json, 'sourceVersionId') ? undefined : json['sourceVersionId'],
        'sourceWorkspaceId': !exists(json, 'sourceWorkspaceId') ? undefined : json['sourceWorkspaceId'],
        'targetConfiguration': !exists(json, 'targetConfiguration') ? undefined : json['targetConfiguration'],
        'targetId': !exists(json, 'targetId') ? undefined : json['targetId'],
        'targetMicroversionId': !exists(json, 'targetMicroversionId') ? undefined : json['targetMicroversionId'],
        'targetValue': !exists(json, 'targetValue') ? undefined : json['targetValue'],
        'targetVersionId': !exists(json, 'targetVersionId') ? undefined : json['targetVersionId'],
        'targetWorkspaceId': !exists(json, 'targetWorkspaceId') ? undefined : json['targetWorkspaceId'],
        'type': !exists(json, 'type') ? undefined : GBTNodeChangeFromJSON(json['type']),
    };
}

export function BTRootDiffInfoToJSON(value?: BTRootDiffInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'changes': value.changes === undefined ? undefined : (mapValues(value.changes, BTDiffInfoToJSON)),
        'collectionChanges': value.collectionChanges,
        'entityType': BTDiffInfoCollectionTypeToJSON(value.entityType),
        'geometryChangeMessages': value.geometryChangeMessages,
        'sourceConfiguration': value.sourceConfiguration,
        'sourceId': value.sourceId,
        'sourceMicroversionId': value.sourceMicroversionId,
        'sourceValue': value.sourceValue,
        'sourceVersionId': value.sourceVersionId,
        'sourceWorkspaceId': value.sourceWorkspaceId,
        'targetConfiguration': value.targetConfiguration,
        'targetId': value.targetId,
        'targetMicroversionId': value.targetMicroversionId,
        'targetValue': value.targetValue,
        'targetVersionId': value.targetVersionId,
        'targetWorkspaceId': value.targetWorkspaceId,
        'type': GBTNodeChangeToJSON(value.type),
    };
}

