/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTPExpression9 } from './BTPExpression9';
import {
    BTPExpression9FromJSON,
    BTPExpression9FromJSONTyped,
    BTPExpression9ToJSON,
} from './BTPExpression9';
import type { BTPIdentifier8 } from './BTPIdentifier8';
import {
    BTPIdentifier8FromJSON,
    BTPIdentifier8FromJSONTyped,
    BTPIdentifier8ToJSON,
} from './BTPIdentifier8';
import type { BTPSpace10 } from './BTPSpace10';
import {
    BTPSpace10FromJSON,
    BTPSpace10FromJSONTyped,
    BTPSpace10ToJSON,
} from './BTPSpace10';
import type { GBTPOperator } from './GBTPOperator';
import {
    GBTPOperatorFromJSON,
    GBTPOperatorFromJSONTyped,
    GBTPOperatorToJSON,
} from './GBTPOperator';

/**
 * 
 * @export
 * @interface BTPExpressionOperator244AllOf
 */
export interface BTPExpressionOperator244AllOf {
    /**
     * 
     * @type {string}
     * @memberof BTPExpressionOperator244AllOf
     */
    btType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTPExpressionOperator244AllOf
     */
    forExport?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPExpressionOperator244AllOf
     */
    globalNamespace?: boolean;
    /**
     * Element microversion that is being imported.
     * @type {string}
     * @memberof BTPExpressionOperator244AllOf
     */
    importMicroversion?: string;
    /**
     * 
     * @type {Array<BTPIdentifier8>}
     * @memberof BTPExpressionOperator244AllOf
     */
    namespace?: Array<BTPIdentifier8>;
    /**
     * 
     * @type {BTPExpression9}
     * @memberof BTPExpressionOperator244AllOf
     */
    operand1?: BTPExpression9;
    /**
     * 
     * @type {BTPExpression9}
     * @memberof BTPExpressionOperator244AllOf
     */
    operand2?: BTPExpression9;
    /**
     * 
     * @type {BTPExpression9}
     * @memberof BTPExpressionOperator244AllOf
     */
    operand3?: BTPExpression9;
    /**
     * 
     * @type {GBTPOperator}
     * @memberof BTPExpressionOperator244AllOf
     */
    operator?: GBTPOperator;
    /**
     * 
     * @type {BTPSpace10}
     * @memberof BTPExpressionOperator244AllOf
     */
    spaceAfterNamespace?: BTPSpace10;
    /**
     * 
     * @type {BTPSpace10}
     * @memberof BTPExpressionOperator244AllOf
     */
    spaceAfterOperator?: BTPSpace10;
    /**
     * 
     * @type {BTPSpace10}
     * @memberof BTPExpressionOperator244AllOf
     */
    spaceBeforeOperator?: BTPSpace10;
    /**
     * 
     * @type {boolean}
     * @memberof BTPExpressionOperator244AllOf
     */
    writtenAsFunctionCall?: boolean;
}

/**
 * Check if a given object implements the BTPExpressionOperator244AllOf interface.
 */
export function instanceOfBTPExpressionOperator244AllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPExpressionOperator244AllOfFromJSON(json: any): BTPExpressionOperator244AllOf {
    return BTPExpressionOperator244AllOfFromJSONTyped(json, false);
}

export function BTPExpressionOperator244AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPExpressionOperator244AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'forExport': !exists(json, 'forExport') ? undefined : json['forExport'],
        'globalNamespace': !exists(json, 'globalNamespace') ? undefined : json['globalNamespace'],
        'importMicroversion': !exists(json, 'importMicroversion') ? undefined : json['importMicroversion'],
        'namespace': !exists(json, 'namespace') ? undefined : ((json['namespace'] as Array<any>).map(BTPIdentifier8FromJSON)),
        'operand1': !exists(json, 'operand1') ? undefined : BTPExpression9FromJSON(json['operand1']),
        'operand2': !exists(json, 'operand2') ? undefined : BTPExpression9FromJSON(json['operand2']),
        'operand3': !exists(json, 'operand3') ? undefined : BTPExpression9FromJSON(json['operand3']),
        'operator': !exists(json, 'operator') ? undefined : GBTPOperatorFromJSON(json['operator']),
        'spaceAfterNamespace': !exists(json, 'spaceAfterNamespace') ? undefined : BTPSpace10FromJSON(json['spaceAfterNamespace']),
        'spaceAfterOperator': !exists(json, 'spaceAfterOperator') ? undefined : BTPSpace10FromJSON(json['spaceAfterOperator']),
        'spaceBeforeOperator': !exists(json, 'spaceBeforeOperator') ? undefined : BTPSpace10FromJSON(json['spaceBeforeOperator']),
        'writtenAsFunctionCall': !exists(json, 'writtenAsFunctionCall') ? undefined : json['writtenAsFunctionCall'],
    };
}

export function BTPExpressionOperator244AllOfToJSON(value?: BTPExpressionOperator244AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'forExport': value.forExport,
        'globalNamespace': value.globalNamespace,
        'importMicroversion': value.importMicroversion,
        'namespace': value.namespace === undefined ? undefined : ((value.namespace as Array<any>).map(BTPIdentifier8ToJSON)),
        'operand1': BTPExpression9ToJSON(value.operand1),
        'operand2': BTPExpression9ToJSON(value.operand2),
        'operand3': BTPExpression9ToJSON(value.operand3),
        'operator': GBTPOperatorToJSON(value.operator),
        'spaceAfterNamespace': BTPSpace10ToJSON(value.spaceAfterNamespace),
        'spaceAfterOperator': BTPSpace10ToJSON(value.spaceAfterOperator),
        'spaceBeforeOperator': BTPSpace10ToJSON(value.spaceBeforeOperator),
        'writtenAsFunctionCall': value.writtenAsFunctionCall,
    };
}

