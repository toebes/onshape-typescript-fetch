/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTViewDataParams } from './BTViewDataParams';
import {
    BTViewDataParamsFromJSON,
    BTViewDataParamsFromJSONTyped,
    BTViewDataParamsToJSON,
} from './BTViewDataParams';
import type { CoordinatesParams } from './CoordinatesParams';
import {
    CoordinatesParamsFromJSON,
    CoordinatesParamsFromJSONTyped,
    CoordinatesParamsToJSON,
} from './CoordinatesParams';

/**
 * 
 * @export
 * @interface BTCommentParams
 */
export interface BTCommentParams {
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    assemblyFeature?: string;
    /**
     * Assign the comment during creation. Comments cannot be reassigned during an update at this time.
     * @type {string}
     * @memberof BTCommentParams
     */
    assignee?: string;
    /**
     * 
     * @type {CoordinatesParams}
     * @memberof BTCommentParams
     */
    coordinates?: CoordinatesParams;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    elementFeature?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    elementId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    elementOccurrence?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    elementQuery?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    objectId?: string;
    /**
     * 
     * @type {number}
     * @memberof BTCommentParams
     */
    objectType?: number;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    parentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    versionId?: string;
    /**
     * 
     * @type {BTViewDataParams}
     * @memberof BTCommentParams
     */
    viewData?: BTViewDataParams;
    /**
     * 
     * @type {string}
     * @memberof BTCommentParams
     */
    workspaceId?: string;
}

/**
 * Check if a given object implements the BTCommentParams interface.
 */
export function instanceOfBTCommentParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTCommentParamsFromJSON(json: any): BTCommentParams {
    return BTCommentParamsFromJSONTyped(json, false);
}

export function BTCommentParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTCommentParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assemblyFeature': !exists(json, 'assemblyFeature') ? undefined : json['assemblyFeature'],
        'assignee': !exists(json, 'assignee') ? undefined : json['assignee'],
        'coordinates': !exists(json, 'coordinates') ? undefined : CoordinatesParamsFromJSON(json['coordinates']),
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementFeature': !exists(json, 'elementFeature') ? undefined : json['elementFeature'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementOccurrence': !exists(json, 'elementOccurrence') ? undefined : json['elementOccurrence'],
        'elementQuery': !exists(json, 'elementQuery') ? undefined : json['elementQuery'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'objectId': !exists(json, 'objectId') ? undefined : json['objectId'],
        'objectType': !exists(json, 'objectType') ? undefined : json['objectType'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'versionId': !exists(json, 'versionId') ? undefined : json['versionId'],
        'viewData': !exists(json, 'viewData') ? undefined : BTViewDataParamsFromJSON(json['viewData']),
        'workspaceId': !exists(json, 'workspaceId') ? undefined : json['workspaceId'],
    };
}

export function BTCommentParamsToJSON(value?: BTCommentParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assemblyFeature': value.assemblyFeature,
        'assignee': value.assignee,
        'coordinates': CoordinatesParamsToJSON(value.coordinates),
        'documentId': value.documentId,
        'elementFeature': value.elementFeature,
        'elementId': value.elementId,
        'elementOccurrence': value.elementOccurrence,
        'elementQuery': value.elementQuery,
        'id': value.id,
        'message': value.message,
        'objectId': value.objectId,
        'objectType': value.objectType,
        'parentId': value.parentId,
        'versionId': value.versionId,
        'viewData': BTViewDataParamsToJSON(value.viewData),
        'workspaceId': value.workspaceId,
    };
}

