/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAppElementErrorCode } from './BTAppElementErrorCode';
import {
    BTAppElementErrorCodeFromJSON,
    BTAppElementErrorCodeFromJSONTyped,
    BTAppElementErrorCodeToJSON,
} from './BTAppElementErrorCode';

/**
 * 
 * @export
 * @interface BTAppElementBulkCreateInfo
 */
export interface BTAppElementBulkCreateInfo {
    /**
     * The latest document microversion, after the edit was committed.
     * @type {string}
     * @memberof BTAppElementBulkCreateInfo
     */
    documentMicroversionId: string;
    /**
     * The ids of the created elements.
     * @type {Array<string>}
     * @memberof BTAppElementBulkCreateInfo
     */
    elementIds?: Array<string>;
    /**
     * The microversion ids of the created elements, at creation time.
     * @type {Array<string>}
     * @memberof BTAppElementBulkCreateInfo
     */
    elementMicroversions?: Array<string>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     * @type {number}
     * @memberof BTAppElementBulkCreateInfo
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     * @type {string}
     * @memberof BTAppElementBulkCreateInfo
     */
    errorDescription?: string;
    /**
     * 
     * @type {BTAppElementErrorCode}
     * @memberof BTAppElementBulkCreateInfo
     */
    errorValue?: BTAppElementErrorCode;
}

/**
 * Check if a given object implements the BTAppElementBulkCreateInfo interface.
 */
export function instanceOfBTAppElementBulkCreateInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "documentMicroversionId" in value;

    return isInstance;
}

export function BTAppElementBulkCreateInfoFromJSON(json: any): BTAppElementBulkCreateInfo {
    return BTAppElementBulkCreateInfoFromJSONTyped(json, false);
}

export function BTAppElementBulkCreateInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAppElementBulkCreateInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentMicroversionId': json['documentMicroversionId'],
        'elementIds': !exists(json, 'elementIds') ? undefined : json['elementIds'],
        'elementMicroversions': !exists(json, 'elementMicroversions') ? undefined : json['elementMicroversions'],
        'errorCode': !exists(json, 'errorCode') ? undefined : json['errorCode'],
        'errorDescription': !exists(json, 'errorDescription') ? undefined : json['errorDescription'],
        'errorValue': !exists(json, 'errorValue') ? undefined : BTAppElementErrorCodeFromJSON(json['errorValue']),
    };
}

export function BTAppElementBulkCreateInfoToJSON(value?: BTAppElementBulkCreateInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'documentMicroversionId': value.documentMicroversionId,
        'elementIds': value.elementIds,
        'elementMicroversions': value.elementMicroversions,
        'errorCode': value.errorCode,
        'errorDescription': value.errorDescription,
        'errorValue': BTAppElementErrorCodeToJSON(value.errorValue),
    };
}

