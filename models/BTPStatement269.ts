/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTPAnnotation231 } from './BTPAnnotation231';
import {
    BTPAnnotation231FromJSON,
    BTPAnnotation231FromJSONTyped,
    BTPAnnotation231ToJSON,
} from './BTPAnnotation231';
import type { BTPNode7 } from './BTPNode7';
import {
    BTPNode7FromJSON,
    BTPNode7FromJSONTyped,
    BTPNode7ToJSON,
 BTPNode7SuperToJSON,
} from './BTPNode7';
import type { BTPSpace10 } from './BTPSpace10';
import {
    BTPSpace10FromJSON,
    BTPSpace10FromJSONTyped,
    BTPSpace10ToJSON,
} from './BTPSpace10';
import type { GBTPDefinitionType } from './GBTPDefinitionType';
import {
    GBTPDefinitionTypeFromJSON,
    GBTPDefinitionTypeFromJSONTyped,
    GBTPDefinitionTypeToJSON,
} from './GBTPDefinitionType';

import {
     BTPStatementAssignment270FromJSONTyped,
    BTPStatementAssignment270ToJSON,
     BTPStatementBlock271FromJSONTyped,
    BTPStatementBlock271ToJSON,
     BTPStatementBreak272FromJSONTyped,
    BTPStatementBreak272ToJSON,
     BTPStatementCompressedQuery1237FromJSONTyped,
    BTPStatementCompressedQuery1237ToJSON,
     BTPStatementConstantDeclaration273FromJSONTyped,
    BTPStatementConstantDeclaration273ToJSON,
     BTPStatementContinue274FromJSONTyped,
    BTPStatementContinue274ToJSON,
     BTPStatementExpression275FromJSONTyped,
    BTPStatementExpression275ToJSON,
     BTPStatementIf276FromJSONTyped,
    BTPStatementIf276ToJSON,
     BTPStatementLoop277FromJSONTyped,
    BTPStatementLoop277ToJSON,
     BTPStatementReturn281FromJSONTyped,
    BTPStatementReturn281ToJSON,
     BTPStatementThrow1080FromJSONTyped,
    BTPStatementThrow1080ToJSON,
     BTPStatementTry1523FromJSONTyped,
    BTPStatementTry1523ToJSON,
     BTPStatementVarDeclaration282FromJSONTyped,
    BTPStatementVarDeclaration282ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTPStatement269
 */
export interface BTPStatement269 extends BTPNode7 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTPStatement269
     */
    btType?: string;
    /**
     * 
     * @type {BTPAnnotation231}
     * @memberof BTPStatement269
     */
    annotation?: BTPAnnotation231;
}

/**
 * Check if a given object implements the BTPStatement269 interface.
 */
export function instanceOfBTPStatement269(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPStatement269FromJSON(json: any): BTPStatement269 {
    return BTPStatement269FromJSONTyped(json, false);
}

export function BTPStatement269FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPStatement269 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTPStatementAssignment-270') {
            return BTPStatementAssignment270FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementBlock-271') {
            return BTPStatementBlock271FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementBreak-272') {
            return BTPStatementBreak272FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementCompressedQuery-1237') {
            return BTPStatementCompressedQuery1237FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementConstantDeclaration-273') {
            return BTPStatementConstantDeclaration273FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementContinue-274') {
            return BTPStatementContinue274FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementExpression-275') {
            return BTPStatementExpression275FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementIf-276') {
            return BTPStatementIf276FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementLoop-277') {
            return BTPStatementLoop277FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementReturn-281') {
            return BTPStatementReturn281FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementThrow-1080') {
            return BTPStatementThrow1080FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementTry-1523') {
            return BTPStatementTry1523FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPStatementVarDeclaration-282') {
            return BTPStatementVarDeclaration282FromJSONTyped(json, true);
        }
    }
    return {
        ...BTPNode7FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'annotation': !exists(json, 'annotation') ? undefined : BTPAnnotation231FromJSON(json['annotation']),
    };
}

export function BTPStatement269SuperToJSON(value?: BTPStatement269 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTPNode7SuperToJSON(value),
        'btType': value.btType,
        'annotation': BTPAnnotation231ToJSON(value.annotation),
    };
}



export function BTPStatement269ToJSON(value?: BTPStatement269 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTPStatementAssignment-270') {
        return BTPStatementAssignment270ToJSON(value);
    }
    if (value.btType === 'BTPStatementBlock-271') {
        return BTPStatementBlock271ToJSON(value);
    }
    if (value.btType === 'BTPStatementBreak-272') {
        return BTPStatementBreak272ToJSON(value);
    }
    if (value.btType === 'BTPStatementCompressedQuery-1237') {
        return BTPStatementCompressedQuery1237ToJSON(value);
    }
    if (value.btType === 'BTPStatementConstantDeclaration-273') {
        return BTPStatementConstantDeclaration273ToJSON(value);
    }
    if (value.btType === 'BTPStatementContinue-274') {
        return BTPStatementContinue274ToJSON(value);
    }
    if (value.btType === 'BTPStatementExpression-275') {
        return BTPStatementExpression275ToJSON(value);
    }
    if (value.btType === 'BTPStatementIf-276') {
        return BTPStatementIf276ToJSON(value);
    }
    if (value.btType === 'BTPStatementLoop-277') {
        return BTPStatementLoop277ToJSON(value);
    }
    if (value.btType === 'BTPStatementReturn-281') {
        return BTPStatementReturn281ToJSON(value);
    }
    if (value.btType === 'BTPStatementThrow-1080') {
        return BTPStatementThrow1080ToJSON(value);
    }
    if (value.btType === 'BTPStatementTry-1523') {
        return BTPStatementTry1523ToJSON(value);
    }
    if (value.btType === 'BTPStatementVarDeclaration-282') {
        return BTPStatementVarDeclaration282ToJSON(value);
    }
    return BTPStatement269SuperToJSON(value);
}
