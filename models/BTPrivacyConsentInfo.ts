/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BTPrivacyConsentInfo
 */
export interface BTPrivacyConsentInfo {
    /**
     * 
     * @type {Date}
     * @memberof BTPrivacyConsentInfo
     */
    communicationsOptInDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BTPrivacyConsentInfo
     */
    communicationsOptOutDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof BTPrivacyConsentInfo
     */
    communicationsStatus?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTPrivacyConsentInfo
     */
    consentVersion?: string;
    /**
     * 
     * @type {Date}
     * @memberof BTPrivacyConsentInfo
     */
    dataProcessingOptInDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BTPrivacyConsentInfo
     */
    dataProcessingOptOutDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof BTPrivacyConsentInfo
     */
    dataProcessingStatus?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTPrivacyConsentInfo
     */
    eulaVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof BTPrivacyConsentInfo
     */
    userId?: string;
}

/**
 * Check if a given object implements the BTPrivacyConsentInfo interface.
 */
export function instanceOfBTPrivacyConsentInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPrivacyConsentInfoFromJSON(json: any): BTPrivacyConsentInfo {
    return BTPrivacyConsentInfoFromJSONTyped(json, false);
}

export function BTPrivacyConsentInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPrivacyConsentInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'communicationsOptInDate': !exists(json, 'communicationsOptInDate') ? undefined : (new Date(json['communicationsOptInDate'])),
        'communicationsOptOutDate': !exists(json, 'communicationsOptOutDate') ? undefined : (new Date(json['communicationsOptOutDate'])),
        'communicationsStatus': !exists(json, 'communicationsStatus') ? undefined : json['communicationsStatus'],
        'consentVersion': !exists(json, 'consentVersion') ? undefined : json['consentVersion'],
        'dataProcessingOptInDate': !exists(json, 'dataProcessingOptInDate') ? undefined : (new Date(json['dataProcessingOptInDate'])),
        'dataProcessingOptOutDate': !exists(json, 'dataProcessingOptOutDate') ? undefined : (new Date(json['dataProcessingOptOutDate'])),
        'dataProcessingStatus': !exists(json, 'dataProcessingStatus') ? undefined : json['dataProcessingStatus'],
        'eulaVersion': !exists(json, 'eulaVersion') ? undefined : json['eulaVersion'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function BTPrivacyConsentInfoToJSON(value?: BTPrivacyConsentInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'communicationsOptInDate': value.communicationsOptInDate === undefined ? undefined : (value.communicationsOptInDate.toISOString()),
        'communicationsOptOutDate': value.communicationsOptOutDate === undefined ? undefined : (value.communicationsOptOutDate.toISOString()),
        'communicationsStatus': value.communicationsStatus,
        'consentVersion': value.consentVersion,
        'dataProcessingOptInDate': value.dataProcessingOptInDate === undefined ? undefined : (value.dataProcessingOptInDate.toISOString()),
        'dataProcessingOptOutDate': value.dataProcessingOptOutDate === undefined ? undefined : (value.dataProcessingOptOutDate.toISOString()),
        'dataProcessingStatus': value.dataProcessingStatus,
        'eulaVersion': value.eulaVersion,
        'userId': value.userId,
    };
}

