/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTUserSummaryInfo } from './BTUserSummaryInfo';
import {
    BTUserSummaryInfoFromJSON,
    BTUserSummaryInfoFromJSONTyped,
    BTUserSummaryInfoToJSON,
} from './BTUserSummaryInfo';
import type { BTWebhookOptions } from './BTWebhookOptions';
import {
    BTWebhookOptionsFromJSON,
    BTWebhookOptionsFromJSONTyped,
    BTWebhookOptionsToJSON,
} from './BTWebhookOptions';

/**
 * 
 * @export
 * @interface BTWebhookInfo
 */
export interface BTWebhookInfo {
    /**
     * Company admins can register webhooks to listen to all company events.
     * @type {string}
     * @memberof BTWebhookInfo
     */
    companyId?: string;
    /**
     * 
     * @type {BTUserSummaryInfo}
     * @memberof BTWebhookInfo
     */
    createdBy?: BTUserSummaryInfo;
    /**
     * 
     * @type {string}
     * @memberof BTWebhookInfo
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWebhookInfo
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof BTWebhookInfo
     */
    droppedEventCount?: number;
    /**
     * List of events for which webhook callback is invoked.
     * @type {Array<string>}
     * @memberof BTWebhookInfo
     */
    events?: Array<string>;
    /**
     * Applications can pass this parameter as X-Session-ID with every REST call to distinguish webhooks triggered by self.
     * @type {string}
     * @memberof BTWebhookInfo
     */
    externalSessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWebhookInfo
     */
    filter?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWebhookInfo
     */
    folderId?: string;
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTWebhookInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTWebhookInfo
     */
    id?: string;
    /**
     * Transient webhooks are automatically cleaned up after a period of inactivity.
     * @type {boolean}
     * @memberof BTWebhookInfo
     */
    isTransient?: boolean;
    /**
     * Name of the resource.
     * @type {string}
     * @memberof BTWebhookInfo
     */
    name?: string;
    /**
     * 
     * @type {BTWebhookOptions}
     * @memberof BTWebhookInfo
     */
    options?: BTWebhookOptions;
    /**
     * 
     * @type {string}
     * @memberof BTWebhookInfo
     */
    projectId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWebhookInfo
     */
    url?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTWebhookInfo
     */
    viewRef?: string;
}

/**
 * Check if a given object implements the BTWebhookInfo interface.
 */
export function instanceOfBTWebhookInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTWebhookInfoFromJSON(json: any): BTWebhookInfo {
    return BTWebhookInfoFromJSONTyped(json, false);
}

export function BTWebhookInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTWebhookInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'companyId': !exists(json, 'companyId') ? undefined : json['companyId'],
        'createdBy': !exists(json, 'createdBy') ? undefined : BTUserSummaryInfoFromJSON(json['createdBy']),
        'data': !exists(json, 'data') ? undefined : json['data'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'droppedEventCount': !exists(json, 'droppedEventCount') ? undefined : json['droppedEventCount'],
        'events': !exists(json, 'events') ? undefined : json['events'],
        'externalSessionId': !exists(json, 'externalSessionId') ? undefined : json['externalSessionId'],
        'filter': !exists(json, 'filter') ? undefined : json['filter'],
        'folderId': !exists(json, 'folderId') ? undefined : json['folderId'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isTransient': !exists(json, 'isTransient') ? undefined : json['isTransient'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'options': !exists(json, 'options') ? undefined : BTWebhookOptionsFromJSON(json['options']),
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
    };
}

export function BTWebhookInfoToJSON(value?: BTWebhookInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'companyId': value.companyId,
        'createdBy': BTUserSummaryInfoToJSON(value.createdBy),
        'data': value.data,
        'description': value.description,
        'droppedEventCount': value.droppedEventCount,
        'events': value.events,
        'externalSessionId': value.externalSessionId,
        'filter': value.filter,
        'folderId': value.folderId,
        'href': value.href,
        'id': value.id,
        'isTransient': value.isTransient,
        'name': value.name,
        'options': BTWebhookOptionsToJSON(value.options),
        'projectId': value.projectId,
        'url': value.url,
        'viewRef': value.viewRef,
    };
}

