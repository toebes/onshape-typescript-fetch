/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTOptionallyConfiguredValue } from './BTOptionallyConfiguredValue';
import {
    BTOptionallyConfiguredValueFromJSON,
    BTOptionallyConfiguredValueFromJSONTyped,
    BTOptionallyConfiguredValueToJSON,
} from './BTOptionallyConfiguredValue';

/**
 * List of variable studio references
 * @export
 * @interface BTVariableStudioReferenceInfo
 */
export interface BTVariableStudioReferenceInfo {
    /**
     * Optional map of configuration parameter id to value
     * @type {{ [key: string]: BTOptionallyConfiguredValue; }}
     * @memberof BTVariableStudioReferenceInfo
     */
    configurationIdToValue?: { [key: string]: BTOptionallyConfiguredValue; };
    /**
     * Whether all variables in the referenced variable studio are included
     * @type {boolean}
     * @memberof BTVariableStudioReferenceInfo
     */
    entireVariableStudio?: boolean;
    /**
     * DocumentId of referenced variable studio, blank for intra-workspace references
     * @type {string}
     * @memberof BTVariableStudioReferenceInfo
     */
    referenceDocumentId?: string;
    /**
     * ElementId of referenced variable studio
     * @type {string}
     * @memberof BTVariableStudioReferenceInfo
     */
    referenceElementId: string;
    /**
     * VersionId of referenced variable studio, blank for intra-workspace references
     * @type {string}
     * @memberof BTVariableStudioReferenceInfo
     */
    referenceVersionId?: string;
    /**
     * Optional list of selected variables
     * @type {Array<string>}
     * @memberof BTVariableStudioReferenceInfo
     */
    variableNames?: Array<string>;
}

/**
 * Check if a given object implements the BTVariableStudioReferenceInfo interface.
 */
export function instanceOfBTVariableStudioReferenceInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "referenceElementId" in value;

    return isInstance;
}

export function BTVariableStudioReferenceInfoFromJSON(json: any): BTVariableStudioReferenceInfo {
    return BTVariableStudioReferenceInfoFromJSONTyped(json, false);
}

export function BTVariableStudioReferenceInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTVariableStudioReferenceInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configurationIdToValue': !exists(json, 'configurationIdToValue') ? undefined : (mapValues(json['configurationIdToValue'], BTOptionallyConfiguredValueFromJSON)),
        'entireVariableStudio': !exists(json, 'entireVariableStudio') ? undefined : json['entireVariableStudio'],
        'referenceDocumentId': !exists(json, 'referenceDocumentId') ? undefined : json['referenceDocumentId'],
        'referenceElementId': json['referenceElementId'],
        'referenceVersionId': !exists(json, 'referenceVersionId') ? undefined : json['referenceVersionId'],
        'variableNames': !exists(json, 'variableNames') ? undefined : json['variableNames'],
    };
}

export function BTVariableStudioReferenceInfoToJSON(value?: BTVariableStudioReferenceInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configurationIdToValue': value.configurationIdToValue === undefined ? undefined : (mapValues(value.configurationIdToValue, BTOptionallyConfiguredValueToJSON)),
        'entireVariableStudio': value.entireVariableStudio,
        'referenceDocumentId': value.referenceDocumentId,
        'referenceElementId': value.referenceElementId,
        'referenceVersionId': value.referenceVersionId,
        'variableNames': value.variableNames,
    };
}

