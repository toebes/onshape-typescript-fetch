/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTDocumentVersionElementIds1897 } from './BTDocumentVersionElementIds1897';
import {
    BTDocumentVersionElementIds1897FromJSON,
    BTDocumentVersionElementIds1897FromJSONTyped,
    BTDocumentVersionElementIds1897ToJSON,
} from './BTDocumentVersionElementIds1897';
import type { BTObjectId } from './BTObjectId';
import {
    BTObjectIdFromJSON,
    BTObjectIdFromJSONTyped,
    BTObjectIdToJSON,
} from './BTObjectId';
import type { BTPNode7 } from './BTPNode7';
import {
    BTPNode7FromJSON,
    BTPNode7FromJSONTyped,
    BTPNode7ToJSON,
} from './BTPNode7';

/**
 * 
 * @export
 * @interface BTLocationInfo226
 */
export interface BTLocationInfo226 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTLocationInfo226
     */
    btType?: string;
    /**
     * 
     * @type {number}
     * @memberof BTLocationInfo226
     */
    character?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLocationInfo226
     */
    column?: number;
    /**
     * 
     * @type {string}
     * @memberof BTLocationInfo226
     */
    document?: string;
    /**
     * 
     * @type {string}
     * @memberof BTLocationInfo226
     */
    elementMicroversion?: string;
    /**
     * 
     * @type {number}
     * @memberof BTLocationInfo226
     */
    endCharacter?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLocationInfo226
     */
    endColumn?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLocationInfo226
     */
    endLine?: number;
    /**
     * 
     * @type {BTPNode7}
     * @memberof BTLocationInfo226
     */
    fromNode?: BTPNode7;
    /**
     * 
     * @type {BTLocationInfo226}
     * @memberof BTLocationInfo226
     */
    fromTemplate?: BTLocationInfo226;
    /**
     * 
     * @type {number}
     * @memberof BTLocationInfo226
     */
    languageVersion?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLocationInfo226
     */
    line?: number;
    /**
     * 
     * @type {BTDocumentVersionElementIds1897}
     * @memberof BTLocationInfo226
     */
    moduleIds?: BTDocumentVersionElementIds1897;
    /**
     * 
     * @type {string}
     * @memberof BTLocationInfo226
     */
    nodeId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTLocationInfo226
     */
    parseNodeId?: string;
    /**
     * 
     * @type {BTObjectId}
     * @memberof BTLocationInfo226
     */
    parseNodeIdRaw?: BTObjectId;
    /**
     * 
     * @type {string}
     * @memberof BTLocationInfo226
     */
    topLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof BTLocationInfo226
     */
    version?: string;
}

/**
 * Check if a given object implements the BTLocationInfo226 interface.
 */
export function instanceOfBTLocationInfo226(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTLocationInfo226FromJSON(json: any): BTLocationInfo226 {
    return BTLocationInfo226FromJSONTyped(json, false);
}

export function BTLocationInfo226FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTLocationInfo226 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'character': !exists(json, 'character') ? undefined : json['character'],
        'column': !exists(json, 'column') ? undefined : json['column'],
        'document': !exists(json, 'document') ? undefined : json['document'],
        'elementMicroversion': !exists(json, 'elementMicroversion') ? undefined : json['elementMicroversion'],
        'endCharacter': !exists(json, 'endCharacter') ? undefined : json['endCharacter'],
        'endColumn': !exists(json, 'endColumn') ? undefined : json['endColumn'],
        'endLine': !exists(json, 'endLine') ? undefined : json['endLine'],
        'fromNode': !exists(json, 'fromNode') ? undefined : BTPNode7FromJSON(json['fromNode']),
        'fromTemplate': !exists(json, 'fromTemplate') ? undefined : BTLocationInfo226FromJSON(json['fromTemplate']),
        'languageVersion': !exists(json, 'languageVersion') ? undefined : json['languageVersion'],
        'line': !exists(json, 'line') ? undefined : json['line'],
        'moduleIds': !exists(json, 'moduleIds') ? undefined : BTDocumentVersionElementIds1897FromJSON(json['moduleIds']),
        'nodeId': !exists(json, 'nodeId') ? undefined : json['nodeId'],
        'parseNodeId': !exists(json, 'parseNodeId') ? undefined : json['parseNodeId'],
        'parseNodeIdRaw': !exists(json, 'parseNodeIdRaw') ? undefined : BTObjectIdFromJSON(json['parseNodeIdRaw']),
        'topLevel': !exists(json, 'topLevel') ? undefined : json['topLevel'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function BTLocationInfo226ToJSON(value?: BTLocationInfo226 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'character': value.character,
        'column': value.column,
        'document': value.document,
        'elementMicroversion': value.elementMicroversion,
        'endCharacter': value.endCharacter,
        'endColumn': value.endColumn,
        'endLine': value.endLine,
        'fromNode': BTPNode7ToJSON(value.fromNode),
        'fromTemplate': BTLocationInfo226ToJSON(value.fromTemplate),
        'languageVersion': value.languageVersion,
        'line': value.line,
        'moduleIds': BTDocumentVersionElementIds1897ToJSON(value.moduleIds),
        'nodeId': value.nodeId,
        'parseNodeId': value.parseNodeId,
        'parseNodeIdRaw': BTObjectIdToJSON(value.parseNodeIdRaw),
        'topLevel': value.topLevel,
        'version': value.version,
    };
}

