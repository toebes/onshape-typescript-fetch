/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     BTTableCellParameter2399FromJSONTyped,
    BTTableCellParameter2399ToJSON,
     BTTableTestCellDouble2509FromJSONTyped,
    BTTableTestCellDouble2509ToJSON,
     BTTableTestCellString2112FromJSONTyped,
    BTTableTestCellString2112ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTTableCell1114
 */
export interface BTTableCell1114 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTTableCell1114
     */
    btType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTTableCell1114
     */
    isEverVisible?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTTableCell1114
     */
    isReadOnly?: boolean;
}

/**
 * Check if a given object implements the BTTableCell1114 interface.
 */
export function instanceOfBTTableCell1114(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTTableCell1114FromJSON(json: any): BTTableCell1114 {
    return BTTableCell1114FromJSONTyped(json, false);
}

export function BTTableCell1114FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTTableCell1114 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTTableCellParameter-2399') {
            return BTTableCellParameter2399FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTTableTestCellDouble-2509') {
            return BTTableTestCellDouble2509FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTTableTestCellString-2112') {
            return BTTableTestCellString2112FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'isEverVisible': !exists(json, 'isEverVisible') ? undefined : json['isEverVisible'],
        'isReadOnly': !exists(json, 'isReadOnly') ? undefined : json['isReadOnly'],
    };
}

export function BTTableCell1114SuperToJSON(value?: BTTableCell1114 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'isEverVisible': value.isEverVisible,
        'isReadOnly': value.isReadOnly,
    };
}



export function BTTableCell1114ToJSON(value?: BTTableCell1114 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTTableCellParameter-2399') {
        return BTTableCellParameter2399ToJSON(value);
    }
    if (value.btType === 'BTTableTestCellDouble-2509') {
        return BTTableTestCellDouble2509ToJSON(value);
    }
    if (value.btType === 'BTTableTestCellString-2112') {
        return BTTableTestCellString2112ToJSON(value);
    }
    return BTTableCell1114SuperToJSON(value);
}
