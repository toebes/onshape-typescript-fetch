/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BTCompanyUserParams
 */
export interface BTCompanyUserParams {
    /**
     * Indicates the user is an admin if true.
     * @type {boolean}
     * @memberof BTCompanyUserParams
     */
    admin?: boolean;
    /**
     * Company ID of the user.
     * @type {string}
     * @memberof BTCompanyUserParams
     */
    companyId?: string;
    /**
     * String to override documentation name.
     * @type {string}
     * @memberof BTCompanyUserParams
     */
    documentationNameOverride?: string;
    /**
     * Email ID of the company user.
     * @type {string}
     * @memberof BTCompanyUserParams
     */
    email?: string;
    /**
     * List of global permissions to grant.
     * @type {Array<number>}
     * @memberof BTCompanyUserParams
     */
    globalPermissions?: Array<number>;
    /**
     * Indicates the user is a guest user if true.
     * @type {boolean}
     * @memberof BTCompanyUserParams
     */
    guest?: boolean;
    /**
     * Indicates the user is a light user if true.
     * @type {boolean}
     * @memberof BTCompanyUserParams
     */
    light?: boolean;
}

/**
 * Check if a given object implements the BTCompanyUserParams interface.
 */
export function instanceOfBTCompanyUserParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTCompanyUserParamsFromJSON(json: any): BTCompanyUserParams {
    return BTCompanyUserParamsFromJSONTyped(json, false);
}

export function BTCompanyUserParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTCompanyUserParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'admin': !exists(json, 'admin') ? undefined : json['admin'],
        'companyId': !exists(json, 'companyId') ? undefined : json['companyId'],
        'documentationNameOverride': !exists(json, 'documentationNameOverride') ? undefined : json['documentationNameOverride'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'globalPermissions': !exists(json, 'globalPermissions') ? undefined : json['globalPermissions'],
        'guest': !exists(json, 'guest') ? undefined : json['guest'],
        'light': !exists(json, 'light') ? undefined : json['light'],
    };
}

export function BTCompanyUserParamsToJSON(value?: BTCompanyUserParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'admin': value.admin,
        'companyId': value.companyId,
        'documentationNameOverride': value.documentationNameOverride,
        'email': value.email,
        'globalPermissions': value.globalPermissions,
        'guest': value.guest,
        'light': value.light,
    };
}

