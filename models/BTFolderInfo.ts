/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTElementLibrarySummaryInfo } from './BTElementLibrarySummaryInfo';
import {
    BTElementLibrarySummaryInfoFromJSON,
    BTElementLibrarySummaryInfoFromJSONTyped,
    BTElementLibrarySummaryInfoToJSON,
} from './BTElementLibrarySummaryInfo';
import type { BTGlobalTreeNodeInfo } from './BTGlobalTreeNodeInfo';
import {
    BTGlobalTreeNodeInfoFromJSON,
    BTGlobalTreeNodeInfoFromJSONTyped,
    BTGlobalTreeNodeInfoToJSON,
 BTGlobalTreeNodeInfoSuperToJSON,
} from './BTGlobalTreeNodeInfo';
import type { BTOwnerInfo } from './BTOwnerInfo';
import {
    BTOwnerInfoFromJSON,
    BTOwnerInfoFromJSONTyped,
    BTOwnerInfoToJSON,
} from './BTOwnerInfo';
import type { BTUserBasicSummaryInfo } from './BTUserBasicSummaryInfo';
import {
    BTUserBasicSummaryInfoFromJSON,
    BTUserBasicSummaryInfoFromJSONTyped,
    BTUserBasicSummaryInfoToJSON,
} from './BTUserBasicSummaryInfo';

/**
 * 
 * @export
 * @interface BTFolderInfo
 */
export interface BTFolderInfo extends BTGlobalTreeNodeInfo {
    /**
     * 
     * @type {boolean}
     * @memberof BTFolderInfo
     */
    active?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTFolderInfo
     */
    canUnshare?: boolean;
    /**
     * 
     * @type {Array<BTElementLibrarySummaryInfo>}
     * @memberof BTFolderInfo
     */
    elementLibrarySummaryInfo?: Array<BTElementLibrarySummaryInfo>;
    /**
     * 
     * @type {boolean}
     * @memberof BTFolderInfo
     */
    isOrphaned?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTFolderInfo
     */
    parentId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTFolderInfo
     */
    permissionSet?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof BTFolderInfo
     */
    trash?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof BTFolderInfo
     */
    trashedAt?: Date;
}

/**
 * Check if a given object implements the BTFolderInfo interface.
 */
export function instanceOfBTFolderInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTFolderInfoFromJSON(json: any): BTFolderInfo {
    return BTFolderInfoFromJSONTyped(json, false);
}

export function BTFolderInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTFolderInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTGlobalTreeNodeInfoFromJSONTyped(json, ignoreDiscriminator),
        'active': !exists(json, 'active') ? undefined : json['active'],
        'canUnshare': !exists(json, 'canUnshare') ? undefined : json['canUnshare'],
        'elementLibrarySummaryInfo': !exists(json, 'elementLibrarySummaryInfo') ? undefined : ((json['elementLibrarySummaryInfo'] as Array<any>).map(BTElementLibrarySummaryInfoFromJSON)),
        'isOrphaned': !exists(json, 'isOrphaned') ? undefined : json['isOrphaned'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'permissionSet': !exists(json, 'permissionSet') ? undefined : json['permissionSet'],
        'trash': !exists(json, 'trash') ? undefined : json['trash'],
        'trashedAt': !exists(json, 'trashedAt') ? undefined : (new Date(json['trashedAt'])),
    };
}

export function BTFolderInfoToJSON(value?: BTFolderInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTGlobalTreeNodeInfoSuperToJSON(value),
        'active': value.active,
        'canUnshare': value.canUnshare,
        'elementLibrarySummaryInfo': value.elementLibrarySummaryInfo === undefined ? undefined : ((value.elementLibrarySummaryInfo as Array<any>).map(BTElementLibrarySummaryInfoToJSON)),
        'isOrphaned': value.isOrphaned,
        'parentId': value.parentId,
        'permissionSet': value.permissionSet,
        'trash': value.trash,
        'trashedAt': value.trashedAt === undefined ? undefined : (value.trashedAt.toISOString()),
    };
}

