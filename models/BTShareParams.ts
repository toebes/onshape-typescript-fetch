/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTShareEntryParams } from './BTShareEntryParams';
import {
    BTShareEntryParamsFromJSON,
    BTShareEntryParamsFromJSONTyped,
    BTShareEntryParamsToJSON,
} from './BTShareEntryParams';

/**
 * 
 * @export
 * @interface BTShareParams
 */
export interface BTShareParams {
    /**
     * 
     * @type {string}
     * @memberof BTShareParams
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTShareParams
     */
    elementId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTShareParams
     */
    encodedConfiguration?: string;
    /**
     * 
     * @type {Array<BTShareEntryParams>}
     * @memberof BTShareParams
     */
    entries?: Array<BTShareEntryParams>;
    /**
     * 
     * @type {string}
     * @memberof BTShareParams
     */
    folderId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTShareParams
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof BTShareParams
     */
    permission?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTShareParams
     */
    permissionSet?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof BTShareParams
     */
    update?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTShareParams
     */
    workspaceId?: string;
}

/**
 * Check if a given object implements the BTShareParams interface.
 */
export function instanceOfBTShareParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTShareParamsFromJSON(json: any): BTShareParams {
    return BTShareParamsFromJSONTyped(json, false);
}

export function BTShareParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTShareParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'encodedConfiguration': !exists(json, 'encodedConfiguration') ? undefined : json['encodedConfiguration'],
        'entries': !exists(json, 'entries') ? undefined : ((json['entries'] as Array<any>).map(BTShareEntryParamsFromJSON)),
        'folderId': !exists(json, 'folderId') ? undefined : json['folderId'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'permission': !exists(json, 'permission') ? undefined : json['permission'],
        'permissionSet': !exists(json, 'permissionSet') ? undefined : json['permissionSet'],
        'update': !exists(json, 'update') ? undefined : json['update'],
        'workspaceId': !exists(json, 'workspaceId') ? undefined : json['workspaceId'],
    };
}

export function BTShareParamsToJSON(value?: BTShareParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'documentId': value.documentId,
        'elementId': value.elementId,
        'encodedConfiguration': value.encodedConfiguration,
        'entries': value.entries === undefined ? undefined : ((value.entries as Array<any>).map(BTShareEntryParamsToJSON)),
        'folderId': value.folderId,
        'message': value.message,
        'permission': value.permission,
        'permissionSet': value.permissionSet,
        'update': value.update,
        'workspaceId': value.workspaceId,
    };
}

