/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTTableColumnSpec1967 } from './BTTableColumnSpec1967';
import {
    BTTableColumnSpec1967FromJSON,
    BTTableColumnSpec1967FromJSONTyped,
    BTTableColumnSpec1967ToJSON,
} from './BTTableColumnSpec1967';

import {
     BTConfiguredValuesColumnInfo1025FromJSONTyped,
    BTConfiguredValuesColumnInfo1025ToJSON,
     BTFSTableColumnInfo623FromJSONTyped,
    BTFSTableColumnInfo623ToJSON,
     BTNamedPositionValuesColumnInfo816FromJSONTyped,
    BTNamedPositionValuesColumnInfo816ToJSON,
     BTPropertyTableColumnInfo2161FromJSONTyped,
    BTPropertyTableColumnInfo2161ToJSON,
     BTSimulationTableColumnInfo1785FromJSONTyped,
    BTSimulationTableColumnInfo1785ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTTableColumnInfo1222
 */
export interface BTTableColumnInfo1222 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTTableColumnInfo1222
     */
    btType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTableColumnInfo1222
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTableColumnInfo1222
     */
    nodeId?: string;
    /**
     * 
     * @type {BTTableColumnSpec1967}
     * @memberof BTTableColumnInfo1222
     */
    specification?: BTTableColumnSpec1967;
}

/**
 * Check if a given object implements the BTTableColumnInfo1222 interface.
 */
export function instanceOfBTTableColumnInfo1222(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTTableColumnInfo1222FromJSON(json: any): BTTableColumnInfo1222 {
    return BTTableColumnInfo1222FromJSONTyped(json, false);
}

export function BTTableColumnInfo1222FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTTableColumnInfo1222 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTConfiguredValuesColumnInfo-1025') {
            return BTConfiguredValuesColumnInfo1025FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSTableColumnInfo-623') {
            return BTFSTableColumnInfo623FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTNamedPositionValuesColumnInfo-816') {
            return BTNamedPositionValuesColumnInfo816FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPropertyTableColumnInfo-2161') {
            return BTPropertyTableColumnInfo2161FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTSimulationTableColumnInfo-1785') {
            return BTSimulationTableColumnInfo1785FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'nodeId': !exists(json, 'nodeId') ? undefined : json['nodeId'],
        'specification': !exists(json, 'specification') ? undefined : BTTableColumnSpec1967FromJSON(json['specification']),
    };
}

export function BTTableColumnInfo1222SuperToJSON(value?: BTTableColumnInfo1222 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'id': value.id,
        'nodeId': value.nodeId,
        'specification': BTTableColumnSpec1967ToJSON(value.specification),
    };
}



export function BTTableColumnInfo1222ToJSON(value?: BTTableColumnInfo1222 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTConfiguredValuesColumnInfo-1025') {
        return BTConfiguredValuesColumnInfo1025ToJSON(value);
    }
    if (value.btType === 'BTFSTableColumnInfo-623') {
        return BTFSTableColumnInfo623ToJSON(value);
    }
    if (value.btType === 'BTNamedPositionValuesColumnInfo-816') {
        return BTNamedPositionValuesColumnInfo816ToJSON(value);
    }
    if (value.btType === 'BTPropertyTableColumnInfo-2161') {
        return BTPropertyTableColumnInfo2161ToJSON(value);
    }
    if (value.btType === 'BTSimulationTableColumnInfo-1785') {
        return BTSimulationTableColumnInfo1785ToJSON(value);
    }
    return BTTableColumnInfo1222SuperToJSON(value);
}
