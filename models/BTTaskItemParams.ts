/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * References to add to the task.
 * @export
 * @interface BTTaskItemParams
 */
export interface BTTaskItemParams {
    /**
     * Body type to reference from a task.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    bodyType?: string;
    /**
     * Configuration of reference. Used to restrict a reference to a specific configuration of an element.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    _configuration?: string;
    /**
     * Description of the reference.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    description?: string;
    /**
     * Id of a document. Required to reference a document or anything contained within it.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    documentId?: string;
    /**
     * Id of an element reference. Used when referencing an element.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    elementId?: string;
    /**
     * Type of element reference. Options are 0 (Part Studio), 1 (Assembly), 2 (Drawing), 3 (Feature Studio), 4 (Blob), 5 (Application), 6 (Table), 7 (Bill of Materials),  8 (Variable Studio), or 9 (Publication Item).
     * @type {number}
     * @memberof BTTaskItemParams
     */
    elementType?: number;
    /**
     * Mimetype of reference. Used when referencing blob elements.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    mimeType?: string;
    /**
     * Name of the reference.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    name?: string;
    /**
     * Determinstic Id of a part. Used when referencing parts.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    partId?: string;
    /**
     * Id of a revision to reference from a task.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    revisionId?: string;
    /**
     * Id of a document version. Used when referencing the version itself or an element or part in it.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    versionId?: string;
    /**
     * Id of a document workspace. Used when referencing the workspace itself or an element or part in it.
     * @type {string}
     * @memberof BTTaskItemParams
     */
    workspaceId?: string;
}

/**
 * Check if a given object implements the BTTaskItemParams interface.
 */
export function instanceOfBTTaskItemParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTTaskItemParamsFromJSON(json: any): BTTaskItemParams {
    return BTTaskItemParamsFromJSONTyped(json, false);
}

export function BTTaskItemParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTTaskItemParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bodyType': !exists(json, 'bodyType') ? undefined : json['bodyType'],
        '_configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementType': !exists(json, 'elementType') ? undefined : json['elementType'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'partId': !exists(json, 'partId') ? undefined : json['partId'],
        'revisionId': !exists(json, 'revisionId') ? undefined : json['revisionId'],
        'versionId': !exists(json, 'versionId') ? undefined : json['versionId'],
        'workspaceId': !exists(json, 'workspaceId') ? undefined : json['workspaceId'],
    };
}

export function BTTaskItemParamsToJSON(value?: BTTaskItemParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bodyType': value.bodyType,
        'configuration': value._configuration,
        'description': value.description,
        'documentId': value.documentId,
        'elementId': value.elementId,
        'elementType': value.elementType,
        'mimeType': value.mimeType,
        'name': value.name,
        'partId': value.partId,
        'revisionId': value.revisionId,
        'versionId': value.versionId,
        'workspaceId': value.workspaceId,
    };
}

