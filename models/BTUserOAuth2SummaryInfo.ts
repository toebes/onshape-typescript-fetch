/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTCompanySummaryInfo } from './BTCompanySummaryInfo';
import {
    BTCompanySummaryInfoFromJSON,
    BTCompanySummaryInfoFromJSONTyped,
    BTCompanySummaryInfoToJSON,
} from './BTCompanySummaryInfo';
import type { BTRole } from './BTRole';
import {
    BTRoleFromJSON,
    BTRoleFromJSONTyped,
    BTRoleToJSON,
} from './BTRole';
import type { BTUserSummaryInfo } from './BTUserSummaryInfo';
import {
    BTUserSummaryInfoFromJSON,
    BTUserSummaryInfoFromJSONTyped,
    BTUserSummaryInfoToJSON,
 BTUserSummaryInfoSuperToJSON,
} from './BTUserSummaryInfo';
import type { GlobalPermissionInfo } from './GlobalPermissionInfo';
import {
    GlobalPermissionInfoFromJSON,
    GlobalPermissionInfoFromJSONTyped,
    GlobalPermissionInfoToJSON,
} from './GlobalPermissionInfo';

/**
 * 
 * @export
 * @interface BTUserOAuth2SummaryInfo
 */
export interface BTUserOAuth2SummaryInfo extends BTUserSummaryInfo {
    /**
     * 
     * @type {string}
     * @memberof BTUserOAuth2SummaryInfo
     */
    clientId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTUserOAuth2SummaryInfo
     */
    companyPlan?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTUserOAuth2SummaryInfo
     */
    oauth2Scopes?: number;
    /**
     * 
     * @type {string}
     * @memberof BTUserOAuth2SummaryInfo
     */
    planGroup?: string;
    /**
     * 
     * @type {number}
     * @memberof BTUserOAuth2SummaryInfo
     */
    role?: number;
    /**
     * 
     * @type {Set<BTRole>}
     * @memberof BTUserOAuth2SummaryInfo
     */
    roles?: Set<BTRole>;
}

/**
 * Check if a given object implements the BTUserOAuth2SummaryInfo interface.
 */
export function instanceOfBTUserOAuth2SummaryInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTUserOAuth2SummaryInfoFromJSON(json: any): BTUserOAuth2SummaryInfo {
    return BTUserOAuth2SummaryInfoFromJSONTyped(json, false);
}

export function BTUserOAuth2SummaryInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTUserOAuth2SummaryInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTUserSummaryInfoFromJSONTyped(json, ignoreDiscriminator),
        'clientId': !exists(json, 'clientId') ? undefined : json['clientId'],
        'companyPlan': !exists(json, 'companyPlan') ? undefined : json['companyPlan'],
        'oauth2Scopes': !exists(json, 'oauth2Scopes') ? undefined : json['oauth2Scopes'],
        'planGroup': !exists(json, 'planGroup') ? undefined : json['planGroup'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'roles': !exists(json, 'roles') ? undefined : (new Set((json['roles'] as Array<any>).map(BTRoleFromJSON))),
    };
}

export function BTUserOAuth2SummaryInfoToJSON(value?: BTUserOAuth2SummaryInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTUserSummaryInfoSuperToJSON(value),
        'clientId': value.clientId,
        'companyPlan': value.companyPlan,
        'oauth2Scopes': value.oauth2Scopes,
        'planGroup': value.planGroup,
        'role': value.role,
        'roles': value.roles === undefined ? undefined : (Array.from(value.roles as Set<any>).map(BTRoleToJSON)),
    };
}

