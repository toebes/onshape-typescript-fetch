/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     BTFSValueArray1499FromJSONTyped,
    BTFSValueArray1499ToJSON,
     BTFSValueBoolean1195FromJSONTyped,
    BTFSValueBoolean1195ToJSON,
     BTFSValueMap2062FromJSONTyped,
    BTFSValueMap2062ToJSON,
     BTFSValueNumber772FromJSONTyped,
    BTFSValueNumber772ToJSON,
     BTFSValueOther1124FromJSONTyped,
    BTFSValueOther1124ToJSON,
     BTFSValueString1422FromJSONTyped,
    BTFSValueString1422ToJSON,
     BTFSValueTooBig1247FromJSONTyped,
    BTFSValueTooBig1247ToJSON,
     BTFSValueUndefined2003FromJSONTyped,
    BTFSValueUndefined2003ToJSON,
     BTFSValueWithUnits1817FromJSONTyped,
    BTFSValueWithUnits1817ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTFSValue1888
 */
export interface BTFSValue1888 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTFSValue1888
     */
    btType: string;
    /**
     * 
     * @type {string}
     * @memberof BTFSValue1888
     */
    typeTag?: string;
}

/**
 * Check if a given object implements the BTFSValue1888 interface.
 */
export function instanceOfBTFSValue1888(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "btType" in value;

    return isInstance;
}

export function BTFSValue1888FromJSON(json: any): BTFSValue1888 {
    return BTFSValue1888FromJSONTyped(json, false);
}

export function BTFSValue1888FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTFSValue1888 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTFSValueArray-1499') {
            return BTFSValueArray1499FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueBoolean-1195') {
            return BTFSValueBoolean1195FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueMap-2062') {
            return BTFSValueMap2062FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueNumber-772') {
            return BTFSValueNumber772FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueOther-1124') {
            return BTFSValueOther1124FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueString-1422') {
            return BTFSValueString1422FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueTooBig-1247') {
            return BTFSValueTooBig1247FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueUndefined-2003') {
            return BTFSValueUndefined2003FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSValueWithUnits-1817') {
            return BTFSValueWithUnits1817FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': json['btType'],
        'typeTag': !exists(json, 'typeTag') ? undefined : json['typeTag'],
    };
}

export function BTFSValue1888SuperToJSON(value?: BTFSValue1888 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'typeTag': value.typeTag,
    };
}



export function BTFSValue1888ToJSON(value?: BTFSValue1888 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTFSValueArray-1499') {
        return BTFSValueArray1499ToJSON(value);
    }
    if (value.btType === 'BTFSValueBoolean-1195') {
        return BTFSValueBoolean1195ToJSON(value);
    }
    if (value.btType === 'BTFSValueMap-2062') {
        return BTFSValueMap2062ToJSON(value);
    }
    if (value.btType === 'BTFSValueNumber-772') {
        return BTFSValueNumber772ToJSON(value);
    }
    if (value.btType === 'BTFSValueOther-1124') {
        return BTFSValueOther1124ToJSON(value);
    }
    if (value.btType === 'BTFSValueString-1422') {
        return BTFSValueString1422ToJSON(value);
    }
    if (value.btType === 'BTFSValueTooBig-1247') {
        return BTFSValueTooBig1247ToJSON(value);
    }
    if (value.btType === 'BTFSValueUndefined-2003') {
        return BTFSValueUndefined2003ToJSON(value);
    }
    if (value.btType === 'BTFSValueWithUnits-1817') {
        return BTFSValueWithUnits1817ToJSON(value);
    }
    return BTFSValue1888SuperToJSON(value);
}
