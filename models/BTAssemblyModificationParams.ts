/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAssemblyTransformDefinitionParams } from './BTAssemblyTransformDefinitionParams';
import {
    BTAssemblyTransformDefinitionParamsFromJSON,
    BTAssemblyTransformDefinitionParamsFromJSONTyped,
    BTAssemblyTransformDefinitionParamsToJSON,
} from './BTAssemblyTransformDefinitionParams';

/**
 * 
 * @export
 * @interface BTAssemblyModificationParams
 */
export interface BTAssemblyModificationParams {
    /**
     * 
     * @type {Array<string>}
     * @memberof BTAssemblyModificationParams
     */
    deleteInstances?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BTAssemblyModificationParams
     */
    editDescription?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTAssemblyModificationParams
     */
    suppressInstances?: Array<string>;
    /**
     * 
     * @type {Array<BTAssemblyTransformDefinitionParams>}
     * @memberof BTAssemblyModificationParams
     */
    transformDefinitions?: Array<BTAssemblyTransformDefinitionParams>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTAssemblyModificationParams
     */
    unsuppressInstances?: Array<string>;
}

/**
 * Check if a given object implements the BTAssemblyModificationParams interface.
 */
export function instanceOfBTAssemblyModificationParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTAssemblyModificationParamsFromJSON(json: any): BTAssemblyModificationParams {
    return BTAssemblyModificationParamsFromJSONTyped(json, false);
}

export function BTAssemblyModificationParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAssemblyModificationParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deleteInstances': !exists(json, 'deleteInstances') ? undefined : json['deleteInstances'],
        'editDescription': !exists(json, 'editDescription') ? undefined : json['editDescription'],
        'suppressInstances': !exists(json, 'suppressInstances') ? undefined : json['suppressInstances'],
        'transformDefinitions': !exists(json, 'transformDefinitions') ? undefined : ((json['transformDefinitions'] as Array<any>).map(BTAssemblyTransformDefinitionParamsFromJSON)),
        'unsuppressInstances': !exists(json, 'unsuppressInstances') ? undefined : json['unsuppressInstances'],
    };
}

export function BTAssemblyModificationParamsToJSON(value?: BTAssemblyModificationParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deleteInstances': value.deleteInstances,
        'editDescription': value.editDescription,
        'suppressInstances': value.suppressInstances,
        'transformDefinitions': value.transformDefinitions === undefined ? undefined : ((value.transformDefinitions as Array<any>).map(BTAssemblyTransformDefinitionParamsToJSON)),
        'unsuppressInstances': value.unsuppressInstances,
    };
}

