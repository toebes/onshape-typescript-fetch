/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAliasInfo } from './BTAliasInfo';
import {
    BTAliasInfoFromJSON,
    BTAliasInfoFromJSONTyped,
    BTAliasInfoToJSON,
} from './BTAliasInfo';
import type { BTRbacRoleInfo } from './BTRbacRoleInfo';
import {
    BTRbacRoleInfoFromJSON,
    BTRbacRoleInfoFromJSONTyped,
    BTRbacRoleInfoToJSON,
} from './BTRbacRoleInfo';
import type { BTTeamSummaryInfo } from './BTTeamSummaryInfo';
import {
    BTTeamSummaryInfoFromJSON,
    BTTeamSummaryInfoFromJSONTyped,
    BTTeamSummaryInfoToJSON,
} from './BTTeamSummaryInfo';
import type { BTUserSummaryInfo } from './BTUserSummaryInfo';
import {
    BTUserSummaryInfoFromJSON,
    BTUserSummaryInfoFromJSONTyped,
    BTUserSummaryInfoToJSON,
} from './BTUserSummaryInfo';

/**
 * Array of items in the current page.
 * @export
 * @interface BTWorkflowObserverOptionInfo
 */
export interface BTWorkflowObserverOptionInfo {
    /**
     * 
     * @type {BTAliasInfo}
     * @memberof BTWorkflowObserverOptionInfo
     */
    alias?: BTAliasInfo;
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTWorkflowObserverOptionInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTWorkflowObserverOptionInfo
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof BTWorkflowObserverOptionInfo
     */
    identityType?: number;
    /**
     * 
     * @type {BTRbacRoleInfo}
     * @memberof BTWorkflowObserverOptionInfo
     */
    role?: BTRbacRoleInfo;
    /**
     * 
     * @type {BTTeamSummaryInfo}
     * @memberof BTWorkflowObserverOptionInfo
     */
    team?: BTTeamSummaryInfo;
    /**
     * 
     * @type {BTUserSummaryInfo}
     * @memberof BTWorkflowObserverOptionInfo
     */
    user?: BTUserSummaryInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTWorkflowObserverOptionInfo
     */
    viewRef?: string;
}

/**
 * Check if a given object implements the BTWorkflowObserverOptionInfo interface.
 */
export function instanceOfBTWorkflowObserverOptionInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTWorkflowObserverOptionInfoFromJSON(json: any): BTWorkflowObserverOptionInfo {
    return BTWorkflowObserverOptionInfoFromJSONTyped(json, false);
}

export function BTWorkflowObserverOptionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTWorkflowObserverOptionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': !exists(json, 'alias') ? undefined : BTAliasInfoFromJSON(json['alias']),
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'identityType': !exists(json, 'identityType') ? undefined : json['identityType'],
        'role': !exists(json, 'role') ? undefined : BTRbacRoleInfoFromJSON(json['role']),
        'team': !exists(json, 'team') ? undefined : BTTeamSummaryInfoFromJSON(json['team']),
        'user': !exists(json, 'user') ? undefined : BTUserSummaryInfoFromJSON(json['user']),
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
    };
}

export function BTWorkflowObserverOptionInfoToJSON(value?: BTWorkflowObserverOptionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': BTAliasInfoToJSON(value.alias),
        'href': value.href,
        'id': value.id,
        'identityType': value.identityType,
        'role': BTRbacRoleInfoToJSON(value.role),
        'team': BTTeamSummaryInfoToJSON(value.team),
        'user': BTUserSummaryInfoToJSON(value.user),
        'viewRef': value.viewRef,
    };
}

