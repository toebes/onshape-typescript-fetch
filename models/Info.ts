/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Contact } from './Contact';
import {
    ContactFromJSON,
    ContactFromJSONTyped,
    ContactToJSON,
} from './Contact';
import type { License } from './License';
import {
    LicenseFromJSON,
    LicenseFromJSONTyped,
    LicenseToJSON,
} from './License';

/**
 * 
 * @export
 * @interface Info
 */
export interface Info {
    /**
     * 
     * @type {Contact}
     * @memberof Info
     */
    contact?: Contact;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Info
     */
    extensions?: { [key: string]: object; };
    /**
     * 
     * @type {License}
     * @memberof Info
     */
    license?: License;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    summary?: string;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    termsOfService?: string;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    version?: string;
}

/**
 * Check if a given object implements the Info interface.
 */
export function instanceOfInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InfoFromJSON(json: any): Info {
    return InfoFromJSONTyped(json, false);
}

export function InfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Info {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contact': !exists(json, 'contact') ? undefined : ContactFromJSON(json['contact']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'license': !exists(json, 'license') ? undefined : LicenseFromJSON(json['license']),
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'termsOfService': !exists(json, 'termsOfService') ? undefined : json['termsOfService'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function InfoToJSON(value?: Info | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contact': ContactToJSON(value.contact),
        'description': value.description,
        'extensions': value.extensions,
        'license': LicenseToJSON(value.license),
        'summary': value.summary,
        'termsOfService': value.termsOfService,
        'title': value.title,
        'version': value.version,
    };
}

