/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMAssemblyMirrorFeature3037 } from './BTMAssemblyMirrorFeature3037';
import {
    BTMAssemblyMirrorFeature3037FromJSON,
    BTMAssemblyMirrorFeature3037FromJSONTyped,
    BTMAssemblyMirrorFeature3037ToJSON,
} from './BTMAssemblyMirrorFeature3037';
import type { BTNodeWithReference } from './BTNodeWithReference';
import {
    BTNodeWithReferenceFromJSON,
    BTNodeWithReferenceFromJSONTyped,
    BTNodeWithReferenceToJSON,
} from './BTNodeWithReference';

/**
 * 
 * @export
 * @interface BTAssemblyMirror2996AllOf
 */
export interface BTAssemblyMirror2996AllOf {
    /**
     * 
     * @type {string}
     * @memberof BTAssemblyMirror2996AllOf
     */
    btType?: string;
    /**
     * 
     * @type {BTMAssemblyMirrorFeature3037}
     * @memberof BTAssemblyMirror2996AllOf
     */
    mirrorFeature?: BTMAssemblyMirrorFeature3037;
    /**
     * 
     * @type {Array<BTNodeWithReference>}
     * @memberof BTAssemblyMirror2996AllOf
     */
    nodeWithReferenceList?: Array<BTNodeWithReference>;
}

/**
 * Check if a given object implements the BTAssemblyMirror2996AllOf interface.
 */
export function instanceOfBTAssemblyMirror2996AllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTAssemblyMirror2996AllOfFromJSON(json: any): BTAssemblyMirror2996AllOf {
    return BTAssemblyMirror2996AllOfFromJSONTyped(json, false);
}

export function BTAssemblyMirror2996AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAssemblyMirror2996AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'mirrorFeature': !exists(json, 'mirrorFeature') ? undefined : BTMAssemblyMirrorFeature3037FromJSON(json['mirrorFeature']),
        'nodeWithReferenceList': !exists(json, 'nodeWithReferenceList') ? undefined : ((json['nodeWithReferenceList'] as Array<any>).map(BTNodeWithReferenceFromJSON)),
    };
}

export function BTAssemblyMirror2996AllOfToJSON(value?: BTAssemblyMirror2996AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'mirrorFeature': BTMAssemblyMirrorFeature3037ToJSON(value.mirrorFeature),
        'nodeWithReferenceList': value.nodeWithReferenceList === undefined ? undefined : ((value.nodeWithReferenceList as Array<any>).map(BTNodeWithReferenceToJSON)),
    };
}

