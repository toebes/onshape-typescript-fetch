/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTGlobalTreeNodeInfo } from './BTGlobalTreeNodeInfo';
import {
    BTGlobalTreeNodeInfoFromJSON,
    BTGlobalTreeNodeInfoFromJSONTyped,
    BTGlobalTreeNodeInfoToJSON,
 BTGlobalTreeNodeInfoSuperToJSON,
} from './BTGlobalTreeNodeInfo';
import type { BTOwnerInfo } from './BTOwnerInfo';
import {
    BTOwnerInfoFromJSON,
    BTOwnerInfoFromJSONTyped,
    BTOwnerInfoToJSON,
} from './BTOwnerInfo';
import type { BTUserBasicSummaryInfo } from './BTUserBasicSummaryInfo';
import {
    BTUserBasicSummaryInfoFromJSON,
    BTUserBasicSummaryInfoFromJSONTyped,
    BTUserBasicSummaryInfoToJSON,
} from './BTUserBasicSummaryInfo';

/**
 * 
 * @export
 * @interface BTClassroomInfo
 */
export interface BTClassroomInfo extends BTGlobalTreeNodeInfo {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BTClassroomInfo
     */
    assignmentsWithErrors?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof BTClassroomInfo
     */
    educator?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTClassroomInfo
     */
    numberOfAssignments?: number;
    /**
     * 
     * @type {number}
     * @memberof BTClassroomInfo
     */
    numberOfMembers?: number;
    /**
     * 
     * @type {number}
     * @memberof BTClassroomInfo
     */
    state?: number;
    /**
     * 
     * @type {string}
     * @memberof BTClassroomInfo
     */
    stateName?: string;
    /**
     * 
     * @type {string}
     * @memberof BTClassroomInfo
     */
    title?: string;
}

/**
 * Check if a given object implements the BTClassroomInfo interface.
 */
export function instanceOfBTClassroomInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTClassroomInfoFromJSON(json: any): BTClassroomInfo {
    return BTClassroomInfoFromJSONTyped(json, false);
}

export function BTClassroomInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTClassroomInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTGlobalTreeNodeInfoFromJSONTyped(json, ignoreDiscriminator),
        'assignmentsWithErrors': !exists(json, 'assignmentsWithErrors') ? undefined : json['assignmentsWithErrors'],
        'educator': !exists(json, 'educator') ? undefined : json['educator'],
        'numberOfAssignments': !exists(json, 'numberOfAssignments') ? undefined : json['numberOfAssignments'],
        'numberOfMembers': !exists(json, 'numberOfMembers') ? undefined : json['numberOfMembers'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'stateName': !exists(json, 'stateName') ? undefined : json['stateName'],
        'title': !exists(json, 'title') ? undefined : json['title'],
    };
}

export function BTClassroomInfoToJSON(value?: BTClassroomInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTGlobalTreeNodeInfoSuperToJSON(value),
        'assignmentsWithErrors': value.assignmentsWithErrors,
        'educator': value.educator,
        'numberOfAssignments': value.numberOfAssignments,
        'numberOfMembers': value.numberOfMembers,
        'state': value.state,
        'stateName': value.stateName,
        'title': value.title,
    };
}

