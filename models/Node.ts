/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    camera?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Node
     */
    children?: Array<number>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Node
     */
    extensions?: { [key: string]: object; };
    /**
     * 
     * @type {object}
     * @memberof Node
     */
    extras?: object;
    /**
     * 
     * @type {Array<number>}
     * @memberof Node
     */
    matrix?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    mesh?: number;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    name?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Node
     */
    rotation?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Node
     */
    scale?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    skin?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Node
     */
    translation?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Node
     */
    weights?: Array<number>;
}

/**
 * Check if a given object implements the Node interface.
 */
export function instanceOfNode(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NodeFromJSON(json: any): Node {
    return NodeFromJSONTyped(json, false);
}

export function NodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Node {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'camera': !exists(json, 'camera') ? undefined : json['camera'],
        'children': !exists(json, 'children') ? undefined : json['children'],
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'extras': !exists(json, 'extras') ? undefined : json['extras'],
        'matrix': !exists(json, 'matrix') ? undefined : json['matrix'],
        'mesh': !exists(json, 'mesh') ? undefined : json['mesh'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'rotation': !exists(json, 'rotation') ? undefined : json['rotation'],
        'scale': !exists(json, 'scale') ? undefined : json['scale'],
        'skin': !exists(json, 'skin') ? undefined : json['skin'],
        'translation': !exists(json, 'translation') ? undefined : json['translation'],
        'weights': !exists(json, 'weights') ? undefined : json['weights'],
    };
}

export function NodeToJSON(value?: Node | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'camera': value.camera,
        'children': value.children,
        'extensions': value.extensions,
        'extras': value.extras,
        'matrix': value.matrix,
        'mesh': value.mesh,
        'name': value.name,
        'rotation': value.rotation,
        'scale': value.scale,
        'skin': value.skin,
        'translation': value.translation,
        'weights': value.weights,
    };
}

