/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTVector3d389 } from './BTVector3d389';
import {
    BTVector3d389FromJSON,
    BTVector3d389FromJSONTyped,
    BTVector3d389ToJSON,
} from './BTVector3d389';

/**
 * Mass properties information.
 * @export
 * @interface BTMassPropertiesInfo
 */
export interface BTMassPropertiesInfo {
    /**
     * Centroid, center of gravity, center of mass
     * @type {Array<number>}
     * @memberof BTMassPropertiesInfo
     */
    centroid?: Array<number>;
    /**
     * `true` if the part has mass.
     * @type {boolean}
     * @memberof BTMassPropertiesInfo
     */
    hasMass?: boolean;
    /**
     * Mass moments of inertia
     * @type {Array<number>}
     * @memberof BTMassPropertiesInfo
     */
    inertia?: Array<number>;
    /**
     * Mass
     * @type {Array<number>}
     * @memberof BTMassPropertiesInfo
     */
    mass?: Array<number>;
    /**
     * Number of parts without mass.
     * @type {number}
     * @memberof BTMassPropertiesInfo
     */
    massMissingCount?: number;
    /**
     * Surface area
     * @type {Array<number>}
     * @memberof BTMassPropertiesInfo
     */
    periphery?: Array<number>;
    /**
     * Vector coordinates of the principal axes. Use `BTVector3d-389` as the `btType`.
     * @type {Array<BTVector3d389>}
     * @memberof BTMassPropertiesInfo
     */
    principalAxes?: Array<BTVector3d389>;
    /**
     * Principal moments of inertia
     * @type {Array<number>}
     * @memberof BTMassPropertiesInfo
     */
    principalInertia?: Array<number>;
    /**
     * Volume
     * @type {Array<number>}
     * @memberof BTMassPropertiesInfo
     */
    volume?: Array<number>;
}

/**
 * Check if a given object implements the BTMassPropertiesInfo interface.
 */
export function instanceOfBTMassPropertiesInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTMassPropertiesInfoFromJSON(json: any): BTMassPropertiesInfo {
    return BTMassPropertiesInfoFromJSONTyped(json, false);
}

export function BTMassPropertiesInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTMassPropertiesInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'centroid': !exists(json, 'centroid') ? undefined : json['centroid'],
        'hasMass': !exists(json, 'hasMass') ? undefined : json['hasMass'],
        'inertia': !exists(json, 'inertia') ? undefined : json['inertia'],
        'mass': !exists(json, 'mass') ? undefined : json['mass'],
        'massMissingCount': !exists(json, 'massMissingCount') ? undefined : json['massMissingCount'],
        'periphery': !exists(json, 'periphery') ? undefined : json['periphery'],
        'principalAxes': !exists(json, 'principalAxes') ? undefined : ((json['principalAxes'] as Array<any>).map(BTVector3d389FromJSON)),
        'principalInertia': !exists(json, 'principalInertia') ? undefined : json['principalInertia'],
        'volume': !exists(json, 'volume') ? undefined : json['volume'],
    };
}

export function BTMassPropertiesInfoToJSON(value?: BTMassPropertiesInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'centroid': value.centroid,
        'hasMass': value.hasMass,
        'inertia': value.inertia,
        'mass': value.mass,
        'massMissingCount': value.massMissingCount,
        'periphery': value.periphery,
        'principalAxes': value.principalAxes === undefined ? undefined : ((value.principalAxes as Array<any>).map(BTVector3d389ToJSON)),
        'principalInertia': value.principalInertia,
        'volume': value.volume,
    };
}

