/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTApplicationTargetInfo } from './BTApplicationTargetInfo';
import {
    BTApplicationTargetInfoFromJSON,
    BTApplicationTargetInfoFromJSONTyped,
    BTApplicationTargetInfoToJSON,
} from './BTApplicationTargetInfo';
import type { BTThumbnailInfo } from './BTThumbnailInfo';
import {
    BTThumbnailInfoFromJSON,
    BTThumbnailInfoFromJSONTyped,
    BTThumbnailInfoToJSON,
} from './BTThumbnailInfo';
import type { BTZipFileInfo } from './BTZipFileInfo';
import {
    BTZipFileInfoFromJSON,
    BTZipFileInfoFromJSONTyped,
    BTZipFileInfoToJSON,
} from './BTZipFileInfo';
import type { GBTElementType } from './GBTElementType';
import {
    GBTElementTypeFromJSON,
    GBTElementTypeFromJSONTyped,
    GBTElementTypeToJSON,
} from './GBTElementType';

/**
 * 
 * @export
 * @interface BTDocumentElementInfo
 */
export interface BTDocumentElementInfo {
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    accelerationUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    angleUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    angularVelocityUnits?: string;
    /**
     * 
     * @type {BTApplicationTargetInfo}
     * @memberof BTDocumentElementInfo
     */
    applicationTarget?: BTApplicationTargetInfo;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    areaUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    dataType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTDocumentElementInfo
     */
    deleted?: boolean;
    /**
     * 
     * @type {GBTElementType}
     * @memberof BTDocumentElementInfo
     */
    elementType?: GBTElementType;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    energyUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    filename?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    forceUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    foreignDataId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    lengthUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    massUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    microversionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    momentUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    pressureUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    prettyType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTDocumentElementInfo
     */
    safeToShow?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    specifiedUnit?: string;
    /**
     * 
     * @type {BTThumbnailInfo}
     * @memberof BTDocumentElementInfo
     */
    thumbnailInfo?: BTThumbnailInfo;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    thumbnails?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    timeUnits?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTDocumentElementInfo
     */
    unupdatable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentElementInfo
     */
    volumeUnits?: string;
    /**
     * 
     * @type {BTZipFileInfo}
     * @memberof BTDocumentElementInfo
     */
    zip?: BTZipFileInfo;
}

/**
 * Check if a given object implements the BTDocumentElementInfo interface.
 */
export function instanceOfBTDocumentElementInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTDocumentElementInfoFromJSON(json: any): BTDocumentElementInfo {
    return BTDocumentElementInfoFromJSONTyped(json, false);
}

export function BTDocumentElementInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTDocumentElementInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accelerationUnits': !exists(json, 'accelerationUnits') ? undefined : json['accelerationUnits'],
        'angleUnits': !exists(json, 'angleUnits') ? undefined : json['angleUnits'],
        'angularVelocityUnits': !exists(json, 'angularVelocityUnits') ? undefined : json['angularVelocityUnits'],
        'applicationTarget': !exists(json, 'applicationTarget') ? undefined : BTApplicationTargetInfoFromJSON(json['applicationTarget']),
        'areaUnits': !exists(json, 'areaUnits') ? undefined : json['areaUnits'],
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'elementType': !exists(json, 'elementType') ? undefined : GBTElementTypeFromJSON(json['elementType']),
        'energyUnits': !exists(json, 'energyUnits') ? undefined : json['energyUnits'],
        'filename': !exists(json, 'filename') ? undefined : json['filename'],
        'forceUnits': !exists(json, 'forceUnits') ? undefined : json['forceUnits'],
        'foreignDataId': !exists(json, 'foreignDataId') ? undefined : json['foreignDataId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lengthUnits': !exists(json, 'lengthUnits') ? undefined : json['lengthUnits'],
        'massUnits': !exists(json, 'massUnits') ? undefined : json['massUnits'],
        'microversionId': !exists(json, 'microversionId') ? undefined : json['microversionId'],
        'momentUnits': !exists(json, 'momentUnits') ? undefined : json['momentUnits'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'pressureUnits': !exists(json, 'pressureUnits') ? undefined : json['pressureUnits'],
        'prettyType': !exists(json, 'prettyType') ? undefined : json['prettyType'],
        'safeToShow': !exists(json, 'safeToShow') ? undefined : json['safeToShow'],
        'specifiedUnit': !exists(json, 'specifiedUnit') ? undefined : json['specifiedUnit'],
        'thumbnailInfo': !exists(json, 'thumbnailInfo') ? undefined : BTThumbnailInfoFromJSON(json['thumbnailInfo']),
        'thumbnails': !exists(json, 'thumbnails') ? undefined : json['thumbnails'],
        'timeUnits': !exists(json, 'timeUnits') ? undefined : json['timeUnits'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'unupdatable': !exists(json, 'unupdatable') ? undefined : json['unupdatable'],
        'volumeUnits': !exists(json, 'volumeUnits') ? undefined : json['volumeUnits'],
        'zip': !exists(json, 'zip') ? undefined : BTZipFileInfoFromJSON(json['zip']),
    };
}

export function BTDocumentElementInfoToJSON(value?: BTDocumentElementInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accelerationUnits': value.accelerationUnits,
        'angleUnits': value.angleUnits,
        'angularVelocityUnits': value.angularVelocityUnits,
        'applicationTarget': BTApplicationTargetInfoToJSON(value.applicationTarget),
        'areaUnits': value.areaUnits,
        'dataType': value.dataType,
        'deleted': value.deleted,
        'elementType': GBTElementTypeToJSON(value.elementType),
        'energyUnits': value.energyUnits,
        'filename': value.filename,
        'forceUnits': value.forceUnits,
        'foreignDataId': value.foreignDataId,
        'id': value.id,
        'lengthUnits': value.lengthUnits,
        'massUnits': value.massUnits,
        'microversionId': value.microversionId,
        'momentUnits': value.momentUnits,
        'name': value.name,
        'pressureUnits': value.pressureUnits,
        'prettyType': value.prettyType,
        'safeToShow': value.safeToShow,
        'specifiedUnit': value.specifiedUnit,
        'thumbnailInfo': BTThumbnailInfoToJSON(value.thumbnailInfo),
        'thumbnails': value.thumbnails,
        'timeUnits': value.timeUnits,
        'type': value.type,
        'unupdatable': value.unupdatable,
        'volumeUnits': value.volumeUnits,
        'zip': BTZipFileInfoToJSON(value.zip),
    };
}

