/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTBaseEntityData33 } from './BTBaseEntityData33';
import {
    BTBaseEntityData33FromJSON,
    BTBaseEntityData33FromJSONTyped,
    BTBaseEntityData33ToJSON,
} from './BTBaseEntityData33';
import type { BTDomainSpecificMetadata961 } from './BTDomainSpecificMetadata961';
import {
    BTDomainSpecificMetadata961FromJSON,
    BTDomainSpecificMetadata961FromJSONTyped,
    BTDomainSpecificMetadata961ToJSON,
} from './BTDomainSpecificMetadata961';
import type { BTEntityGeometry35 } from './BTEntityGeometry35';
import {
    BTEntityGeometry35FromJSON,
    BTEntityGeometry35FromJSONTyped,
    BTEntityGeometry35ToJSON,
} from './BTEntityGeometry35';
import type { BTFeatureEntity34 } from './BTFeatureEntity34';
import {
    BTFeatureEntity34FromJSON,
    BTFeatureEntity34FromJSONTyped,
    BTFeatureEntity34ToJSON,
 BTFeatureEntity34SuperToJSON,
} from './BTFeatureEntity34';
import type { GBTSketchCurveType } from './GBTSketchCurveType';
import {
    GBTSketchCurveTypeFromJSON,
    GBTSketchCurveTypeFromJSONTyped,
    GBTSketchCurveTypeToJSON,
} from './GBTSketchCurveType';

/**
 * 
 * @export
 * @interface BTSketchEntity25
 */
export interface BTSketchEntity25 extends BTFeatureEntity34 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTSketchEntity25
     */
    btType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTSketchEntity25
     */
    isConstruction?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTSketchEntity25
     */
    isFromSplineControlPolygon?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTSketchEntity25
     */
    isFromSplineHandle?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTSketchEntity25
     */
    isTextStroke?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTSketchEntity25
     */
    isUserPoint?: boolean;
    /**
     * 
     * @type {GBTSketchCurveType}
     * @memberof BTSketchEntity25
     */
    sketchCurveType?: GBTSketchCurveType;
    /**
     * 
     * @type {string}
     * @memberof BTSketchEntity25
     */
    sketchEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTSketchEntity25
     */
    sketchFeatureId?: string;
    /**
     * 
     * @type {number}
     * @memberof BTSketchEntity25
     */
    solveStatus?: number;
}

/**
 * Check if a given object implements the BTSketchEntity25 interface.
 */
export function instanceOfBTSketchEntity25(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTSketchEntity25FromJSON(json: any): BTSketchEntity25 {
    return BTSketchEntity25FromJSONTyped(json, false);
}

export function BTSketchEntity25FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTSketchEntity25 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTFeatureEntity34FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'isConstruction': !exists(json, 'isConstruction') ? undefined : json['isConstruction'],
        'isFromSplineControlPolygon': !exists(json, 'isFromSplineControlPolygon') ? undefined : json['isFromSplineControlPolygon'],
        'isFromSplineHandle': !exists(json, 'isFromSplineHandle') ? undefined : json['isFromSplineHandle'],
        'isTextStroke': !exists(json, 'isTextStroke') ? undefined : json['isTextStroke'],
        'isUserPoint': !exists(json, 'isUserPoint') ? undefined : json['isUserPoint'],
        'sketchCurveType': !exists(json, 'sketchCurveType') ? undefined : GBTSketchCurveTypeFromJSON(json['sketchCurveType']),
        'sketchEntityId': !exists(json, 'sketchEntityId') ? undefined : json['sketchEntityId'],
        'sketchFeatureId': !exists(json, 'sketchFeatureId') ? undefined : json['sketchFeatureId'],
        'solveStatus': !exists(json, 'solveStatus') ? undefined : json['solveStatus'],
    };
}

export function BTSketchEntity25ToJSON(value?: BTSketchEntity25 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTFeatureEntity34SuperToJSON(value),
        'btType': value.btType,
        'isConstruction': value.isConstruction,
        'isFromSplineControlPolygon': value.isFromSplineControlPolygon,
        'isFromSplineHandle': value.isFromSplineHandle,
        'isTextStroke': value.isTextStroke,
        'isUserPoint': value.isUserPoint,
        'sketchCurveType': GBTSketchCurveTypeToJSON(value.sketchCurveType),
        'sketchEntityId': value.sketchEntityId,
        'sketchFeatureId': value.sketchFeatureId,
        'solveStatus': value.solveStatus,
    };
}

