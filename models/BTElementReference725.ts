/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTDocumentWithVersionAndElementId } from './BTDocumentWithVersionAndElementId';
import {
    BTDocumentWithVersionAndElementIdFromJSON,
    BTDocumentWithVersionAndElementIdFromJSONTyped,
    BTDocumentWithVersionAndElementIdToJSON,
} from './BTDocumentWithVersionAndElementId';
import type { BTDocumentWithVersionId } from './BTDocumentWithVersionId';
import {
    BTDocumentWithVersionIdFromJSON,
    BTDocumentWithVersionIdFromJSONTyped,
    BTDocumentWithVersionIdToJSON,
} from './BTDocumentWithVersionId';
import type { BTFullElementId756 } from './BTFullElementId756';
import {
    BTFullElementId756FromJSON,
    BTFullElementId756FromJSONTyped,
    BTFullElementId756ToJSON,
} from './BTFullElementId756';
import type { BTMicroversionIdAndConfiguration2338 } from './BTMicroversionIdAndConfiguration2338';
import {
    BTMicroversionIdAndConfiguration2338FromJSON,
    BTMicroversionIdAndConfiguration2338FromJSONTyped,
    BTMicroversionIdAndConfiguration2338ToJSON,
} from './BTMicroversionIdAndConfiguration2338';

import {
     BTExternalReference1936FromJSONTyped,
    BTExternalReference1936ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTElementReference725
 */
export interface BTElementReference725 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTElementReference725
     */
    btType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTElementReference725
     */
    configured?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTElementReference725
     */
    documentVersionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTElementReference725
     */
    elementId?: string;
    /**
     * 
     * @type {BTDocumentWithVersionId}
     * @memberof BTElementReference725
     */
    externalDocumentWithVersion?: BTDocumentWithVersionId;
    /**
     * 
     * @type {BTDocumentWithVersionAndElementId}
     * @memberof BTElementReference725
     */
    externalDocumentWithVersionAndElementId?: BTDocumentWithVersionAndElementId;
    /**
     * 
     * @type {boolean}
     * @memberof BTElementReference725
     */
    externalReference?: boolean;
    /**
     * 
     * @type {BTFullElementId756}
     * @memberof BTElementReference725
     */
    fullElementId?: BTFullElementId756;
    /**
     * 
     * @type {BTMicroversionIdAndConfiguration2338}
     * @memberof BTElementReference725
     */
    microversionIdAndConfiguration?: BTMicroversionIdAndConfiguration2338;
    /**
     * 
     * @type {string}
     * @memberof BTElementReference725
     */
    nodeId?: string;
}

/**
 * Check if a given object implements the BTElementReference725 interface.
 */
export function instanceOfBTElementReference725(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTElementReference725FromJSON(json: any): BTElementReference725 {
    return BTElementReference725FromJSONTyped(json, false);
}

export function BTElementReference725FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTElementReference725 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTExternalReference-1936') {
            return BTExternalReference1936FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'configured': !exists(json, 'configured') ? undefined : json['configured'],
        'documentVersionId': !exists(json, 'documentVersionId') ? undefined : json['documentVersionId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'externalDocumentWithVersion': !exists(json, 'externalDocumentWithVersion') ? undefined : BTDocumentWithVersionIdFromJSON(json['externalDocumentWithVersion']),
        'externalDocumentWithVersionAndElementId': !exists(json, 'externalDocumentWithVersionAndElementId') ? undefined : BTDocumentWithVersionAndElementIdFromJSON(json['externalDocumentWithVersionAndElementId']),
        'externalReference': !exists(json, 'externalReference') ? undefined : json['externalReference'],
        'fullElementId': !exists(json, 'fullElementId') ? undefined : BTFullElementId756FromJSON(json['fullElementId']),
        'microversionIdAndConfiguration': !exists(json, 'microversionIdAndConfiguration') ? undefined : BTMicroversionIdAndConfiguration2338FromJSON(json['microversionIdAndConfiguration']),
        'nodeId': !exists(json, 'nodeId') ? undefined : json['nodeId'],
    };
}

export function BTElementReference725SuperToJSON(value?: BTElementReference725 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'configured': value.configured,
        'documentVersionId': value.documentVersionId,
        'elementId': value.elementId,
        'externalDocumentWithVersion': BTDocumentWithVersionIdToJSON(value.externalDocumentWithVersion),
        'externalDocumentWithVersionAndElementId': BTDocumentWithVersionAndElementIdToJSON(value.externalDocumentWithVersionAndElementId),
        'externalReference': value.externalReference,
        'fullElementId': BTFullElementId756ToJSON(value.fullElementId),
        'microversionIdAndConfiguration': BTMicroversionIdAndConfiguration2338ToJSON(value.microversionIdAndConfiguration),
        'nodeId': value.nodeId,
    };
}



export function BTElementReference725ToJSON(value?: BTElementReference725 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTExternalReference-1936') {
        return BTExternalReference1936ToJSON(value);
    }
    return BTElementReference725SuperToJSON(value);
}
