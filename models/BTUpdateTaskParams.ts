/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTPropertyValueParam } from './BTPropertyValueParam';
import {
    BTPropertyValueParamFromJSON,
    BTPropertyValueParamFromJSONTyped,
    BTPropertyValueParamToJSON,
} from './BTPropertyValueParam';
import type { BTTaskItemParams } from './BTTaskItemParams';
import {
    BTTaskItemParamsFromJSON,
    BTTaskItemParamsFromJSONTyped,
    BTTaskItemParamsToJSON,
} from './BTTaskItemParams';

/**
 * 
 * @export
 * @interface BTUpdateTaskParams
 */
export interface BTUpdateTaskParams {
    /**
     * Use to transfer task ownership to the company.
     * @type {string}
     * @memberof BTUpdateTaskParams
     */
    companyId?: string;
    /**
     * References to remove from the task.
     * @type {Set<string>}
     * @memberof BTUpdateTaskParams
     */
    deleteItemIds?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof BTUpdateTaskParams
     */
    descriptionParamValue?: string;
    /**
     * References to add to the task.
     * @type {Array<BTTaskItemParams>}
     * @memberof BTUpdateTaskParams
     */
    itemParams?: Array<BTTaskItemParams>;
    /**
     * 
     * @type {string}
     * @memberof BTUpdateTaskParams
     */
    nameParamValue?: string;
    /**
     * Task metadata properties.
     * @type {Array<BTPropertyValueParam>}
     * @memberof BTUpdateTaskParams
     */
    propertyValues?: Array<BTPropertyValueParam>;
}

/**
 * Check if a given object implements the BTUpdateTaskParams interface.
 */
export function instanceOfBTUpdateTaskParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTUpdateTaskParamsFromJSON(json: any): BTUpdateTaskParams {
    return BTUpdateTaskParamsFromJSONTyped(json, false);
}

export function BTUpdateTaskParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTUpdateTaskParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'companyId': !exists(json, 'companyId') ? undefined : json['companyId'],
        'deleteItemIds': !exists(json, 'deleteItemIds') ? undefined : json['deleteItemIds'],
        'descriptionParamValue': !exists(json, 'descriptionParamValue') ? undefined : json['descriptionParamValue'],
        'itemParams': !exists(json, 'itemParams') ? undefined : ((json['itemParams'] as Array<any>).map(BTTaskItemParamsFromJSON)),
        'nameParamValue': !exists(json, 'nameParamValue') ? undefined : json['nameParamValue'],
        'propertyValues': !exists(json, 'propertyValues') ? undefined : ((json['propertyValues'] as Array<any>).map(BTPropertyValueParamFromJSON)),
    };
}

export function BTUpdateTaskParamsToJSON(value?: BTUpdateTaskParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'companyId': value.companyId,
        'deleteItemIds': value.deleteItemIds === undefined ? undefined : Array.from(value.deleteItemIds as Set<any>),
        'descriptionParamValue': value.descriptionParamValue,
        'itemParams': value.itemParams === undefined ? undefined : ((value.itemParams as Array<any>).map(BTTaskItemParamsToJSON)),
        'nameParamValue': value.nameParamValue,
        'propertyValues': value.propertyValues === undefined ? undefined : ((value.propertyValues as Array<any>).map(BTPropertyValueParamToJSON)),
    };
}

