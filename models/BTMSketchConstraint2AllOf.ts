/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GBTConstraintType } from './GBTConstraintType';
import {
    GBTConstraintTypeFromJSON,
    GBTConstraintTypeFromJSONTyped,
    GBTConstraintTypeToJSON,
} from './GBTConstraintType';

/**
 * 
 * @export
 * @interface BTMSketchConstraint2AllOf
 */
export interface BTMSketchConstraint2AllOf {
    /**
     * 
     * @type {string}
     * @memberof BTMSketchConstraint2AllOf
     */
    btType?: string;
    /**
     * 
     * @type {GBTConstraintType}
     * @memberof BTMSketchConstraint2AllOf
     */
    constraintType?: GBTConstraintType;
    /**
     * 
     * @type {boolean}
     * @memberof BTMSketchConstraint2AllOf
     */
    drivenDimension?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTMSketchConstraint2AllOf
     */
    hasOffsetData1?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTMSketchConstraint2AllOf
     */
    hasOffsetData2?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTMSketchConstraint2AllOf
     */
    hasPierceParameter?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof BTMSketchConstraint2AllOf
     */
    helpParameters?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof BTMSketchConstraint2AllOf
     */
    offsetDistance1?: number;
    /**
     * 
     * @type {number}
     * @memberof BTMSketchConstraint2AllOf
     */
    offsetDistance2?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BTMSketchConstraint2AllOf
     */
    offsetOrientation1?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTMSketchConstraint2AllOf
     */
    offsetOrientation2?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTMSketchConstraint2AllOf
     */
    pierceParameter?: number;
}

/**
 * Check if a given object implements the BTMSketchConstraint2AllOf interface.
 */
export function instanceOfBTMSketchConstraint2AllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTMSketchConstraint2AllOfFromJSON(json: any): BTMSketchConstraint2AllOf {
    return BTMSketchConstraint2AllOfFromJSONTyped(json, false);
}

export function BTMSketchConstraint2AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTMSketchConstraint2AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'constraintType': !exists(json, 'constraintType') ? undefined : GBTConstraintTypeFromJSON(json['constraintType']),
        'drivenDimension': !exists(json, 'drivenDimension') ? undefined : json['drivenDimension'],
        'hasOffsetData1': !exists(json, 'hasOffsetData1') ? undefined : json['hasOffsetData1'],
        'hasOffsetData2': !exists(json, 'hasOffsetData2') ? undefined : json['hasOffsetData2'],
        'hasPierceParameter': !exists(json, 'hasPierceParameter') ? undefined : json['hasPierceParameter'],
        'helpParameters': !exists(json, 'helpParameters') ? undefined : json['helpParameters'],
        'offsetDistance1': !exists(json, 'offsetDistance1') ? undefined : json['offsetDistance1'],
        'offsetDistance2': !exists(json, 'offsetDistance2') ? undefined : json['offsetDistance2'],
        'offsetOrientation1': !exists(json, 'offsetOrientation1') ? undefined : json['offsetOrientation1'],
        'offsetOrientation2': !exists(json, 'offsetOrientation2') ? undefined : json['offsetOrientation2'],
        'pierceParameter': !exists(json, 'pierceParameter') ? undefined : json['pierceParameter'],
    };
}

export function BTMSketchConstraint2AllOfToJSON(value?: BTMSketchConstraint2AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'constraintType': GBTConstraintTypeToJSON(value.constraintType),
        'drivenDimension': value.drivenDimension,
        'hasOffsetData1': value.hasOffsetData1,
        'hasOffsetData2': value.hasOffsetData2,
        'hasPierceParameter': value.hasPierceParameter,
        'helpParameters': value.helpParameters,
        'offsetDistance1': value.offsetDistance1,
        'offsetDistance2': value.offsetDistance2,
        'offsetOrientation1': value.offsetOrientation1,
        'offsetOrientation2': value.offsetOrientation2,
        'pierceParameter': value.pierceParameter,
    };
}

