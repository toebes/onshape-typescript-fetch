/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BTPublicationItemParams
 */
export interface BTPublicationItemParams {
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    dataType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    elementId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    encodedConfiguration?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTPublicationItemParams
     */
    isApplication?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPublicationItemParams
     */
    isAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPublicationItemParams
     */
    isBlob?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPublicationItemParams
     */
    isWholePartStudio?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    mimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    partId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    partName?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    partNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    revision?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    revisionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPublicationItemParams
     */
    versionId?: string;
}

/**
 * Check if a given object implements the BTPublicationItemParams interface.
 */
export function instanceOfBTPublicationItemParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPublicationItemParamsFromJSON(json: any): BTPublicationItemParams {
    return BTPublicationItemParamsFromJSONTyped(json, false);
}

export function BTPublicationItemParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPublicationItemParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'encodedConfiguration': !exists(json, 'encodedConfiguration') ? undefined : json['encodedConfiguration'],
        'isApplication': !exists(json, 'isApplication') ? undefined : json['isApplication'],
        'isAssembly': !exists(json, 'isAssembly') ? undefined : json['isAssembly'],
        'isBlob': !exists(json, 'isBlob') ? undefined : json['isBlob'],
        'isWholePartStudio': !exists(json, 'isWholePartStudio') ? undefined : json['isWholePartStudio'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'partId': !exists(json, 'partId') ? undefined : json['partId'],
        'partName': !exists(json, 'partName') ? undefined : json['partName'],
        'partNumber': !exists(json, 'partNumber') ? undefined : json['partNumber'],
        'revision': !exists(json, 'revision') ? undefined : json['revision'],
        'revisionId': !exists(json, 'revisionId') ? undefined : json['revisionId'],
        'versionId': !exists(json, 'versionId') ? undefined : json['versionId'],
    };
}

export function BTPublicationItemParamsToJSON(value?: BTPublicationItemParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dataType': value.dataType,
        'documentId': value.documentId,
        'elementId': value.elementId,
        'encodedConfiguration': value.encodedConfiguration,
        'isApplication': value.isApplication,
        'isAssembly': value.isAssembly,
        'isBlob': value.isBlob,
        'isWholePartStudio': value.isWholePartStudio,
        'mimeType': value.mimeType,
        'partId': value.partId,
        'partName': value.partName,
        'partNumber': value.partNumber,
        'revision': value.revision,
        'revisionId': value.revisionId,
        'versionId': value.versionId,
    };
}

