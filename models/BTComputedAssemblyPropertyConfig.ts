/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTComputedAssemblyPropertyAggregationOperator } from './BTComputedAssemblyPropertyAggregationOperator';
import {
    BTComputedAssemblyPropertyAggregationOperatorFromJSON,
    BTComputedAssemblyPropertyAggregationOperatorFromJSONTyped,
    BTComputedAssemblyPropertyAggregationOperatorToJSON,
} from './BTComputedAssemblyPropertyAggregationOperator';
import type { BTComputedAssemblyPropertyErrorPolicy } from './BTComputedAssemblyPropertyErrorPolicy';
import {
    BTComputedAssemblyPropertyErrorPolicyFromJSON,
    BTComputedAssemblyPropertyErrorPolicyFromJSONTyped,
    BTComputedAssemblyPropertyErrorPolicyToJSON,
} from './BTComputedAssemblyPropertyErrorPolicy';

/**
 * 
 * @export
 * @interface BTComputedAssemblyPropertyConfig
 */
export interface BTComputedAssemblyPropertyConfig {
    /**
     * 
     * @type {string}
     * @memberof BTComputedAssemblyPropertyConfig
     */
    aggregatedPropertyId?: string;
    /**
     * 
     * @type {BTComputedAssemblyPropertyAggregationOperator}
     * @memberof BTComputedAssemblyPropertyConfig
     */
    aggregationOperator?: BTComputedAssemblyPropertyAggregationOperator;
    /**
     * 
     * @type {BTComputedAssemblyPropertyErrorPolicy}
     * @memberof BTComputedAssemblyPropertyConfig
     */
    errorValuePolicy?: BTComputedAssemblyPropertyErrorPolicy;
    /**
     * 
     * @type {string}
     * @memberof BTComputedAssemblyPropertyConfig
     */
    filterPropertyId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTComputedAssemblyPropertyConfig
     */
    isFilterPropertyInverted?: boolean;
    /**
     * 
     * @type {BTComputedAssemblyPropertyErrorPolicy}
     * @memberof BTComputedAssemblyPropertyConfig
     */
    missingValuePolicy?: BTComputedAssemblyPropertyErrorPolicy;
    /**
     * 
     * @type {string}
     * @memberof BTComputedAssemblyPropertyConfig
     */
    secondaryPropertyId?: string;
}

/**
 * Check if a given object implements the BTComputedAssemblyPropertyConfig interface.
 */
export function instanceOfBTComputedAssemblyPropertyConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTComputedAssemblyPropertyConfigFromJSON(json: any): BTComputedAssemblyPropertyConfig {
    return BTComputedAssemblyPropertyConfigFromJSONTyped(json, false);
}

export function BTComputedAssemblyPropertyConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTComputedAssemblyPropertyConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aggregatedPropertyId': !exists(json, 'aggregatedPropertyId') ? undefined : json['aggregatedPropertyId'],
        'aggregationOperator': !exists(json, 'aggregationOperator') ? undefined : BTComputedAssemblyPropertyAggregationOperatorFromJSON(json['aggregationOperator']),
        'errorValuePolicy': !exists(json, 'errorValuePolicy') ? undefined : BTComputedAssemblyPropertyErrorPolicyFromJSON(json['errorValuePolicy']),
        'filterPropertyId': !exists(json, 'filterPropertyId') ? undefined : json['filterPropertyId'],
        'isFilterPropertyInverted': !exists(json, 'isFilterPropertyInverted') ? undefined : json['isFilterPropertyInverted'],
        'missingValuePolicy': !exists(json, 'missingValuePolicy') ? undefined : BTComputedAssemblyPropertyErrorPolicyFromJSON(json['missingValuePolicy']),
        'secondaryPropertyId': !exists(json, 'secondaryPropertyId') ? undefined : json['secondaryPropertyId'],
    };
}

export function BTComputedAssemblyPropertyConfigToJSON(value?: BTComputedAssemblyPropertyConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aggregatedPropertyId': value.aggregatedPropertyId,
        'aggregationOperator': BTComputedAssemblyPropertyAggregationOperatorToJSON(value.aggregationOperator),
        'errorValuePolicy': BTComputedAssemblyPropertyErrorPolicyToJSON(value.errorValuePolicy),
        'filterPropertyId': value.filterPropertyId,
        'isFilterPropertyInverted': value.isFilterPropertyInverted,
        'missingValuePolicy': BTComputedAssemblyPropertyErrorPolicyToJSON(value.missingValuePolicy),
        'secondaryPropertyId': value.secondaryPropertyId,
    };
}

