/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTCompanySummaryInfo } from './BTCompanySummaryInfo';
import {
    BTCompanySummaryInfoFromJSON,
    BTCompanySummaryInfoFromJSONTyped,
    BTCompanySummaryInfoToJSON,
} from './BTCompanySummaryInfo';
import type { BTUserBasicSummaryInfo } from './BTUserBasicSummaryInfo';
import {
    BTUserBasicSummaryInfoFromJSON,
    BTUserBasicSummaryInfoFromJSONTyped,
    BTUserBasicSummaryInfoToJSON,
} from './BTUserBasicSummaryInfo';

/**
 * 
 * @export
 * @interface BTCompanyUserInfo
 */
export interface BTCompanyUserInfo {
    /**
     * 
     * @type {boolean}
     * @memberof BTCompanyUserInfo
     */
    admin?: boolean;
    /**
     * 
     * @type {BTCompanySummaryInfo}
     * @memberof BTCompanyUserInfo
     */
    company?: BTCompanySummaryInfo;
    /**
     * 
     * @type {string}
     * @memberof BTCompanyUserInfo
     */
    documentationNameOverride?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTCompanyUserInfo
     */
    guest?: boolean;
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTCompanyUserInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTCompanyUserInfo
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof BTCompanyUserInfo
     */
    lastLoginTime?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof BTCompanyUserInfo
     */
    light?: boolean;
    /**
     * Name of the resource.
     * @type {string}
     * @memberof BTCompanyUserInfo
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof BTCompanyUserInfo
     */
    state?: number;
    /**
     * 
     * @type {BTUserBasicSummaryInfo}
     * @memberof BTCompanyUserInfo
     */
    user?: BTUserBasicSummaryInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTCompanyUserInfo
     */
    viewRef?: string;
}

/**
 * Check if a given object implements the BTCompanyUserInfo interface.
 */
export function instanceOfBTCompanyUserInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTCompanyUserInfoFromJSON(json: any): BTCompanyUserInfo {
    return BTCompanyUserInfoFromJSONTyped(json, false);
}

export function BTCompanyUserInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTCompanyUserInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'admin': !exists(json, 'admin') ? undefined : json['admin'],
        'company': !exists(json, 'company') ? undefined : BTCompanySummaryInfoFromJSON(json['company']),
        'documentationNameOverride': !exists(json, 'documentationNameOverride') ? undefined : json['documentationNameOverride'],
        'guest': !exists(json, 'guest') ? undefined : json['guest'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lastLoginTime': !exists(json, 'lastLoginTime') ? undefined : (new Date(json['lastLoginTime'])),
        'light': !exists(json, 'light') ? undefined : json['light'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'user': !exists(json, 'user') ? undefined : BTUserBasicSummaryInfoFromJSON(json['user']),
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
    };
}

export function BTCompanyUserInfoToJSON(value?: BTCompanyUserInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'admin': value.admin,
        'company': BTCompanySummaryInfoToJSON(value.company),
        'documentationNameOverride': value.documentationNameOverride,
        'guest': value.guest,
        'href': value.href,
        'id': value.id,
        'lastLoginTime': value.lastLoginTime === undefined ? undefined : (value.lastLoginTime.toISOString()),
        'light': value.light,
        'name': value.name,
        'state': value.state,
        'user': BTUserBasicSummaryInfoToJSON(value.user),
        'viewRef': value.viewRef,
    };
}

