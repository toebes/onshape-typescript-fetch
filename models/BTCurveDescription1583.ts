/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTVector3d389 } from './BTVector3d389';
import {
    BTVector3d389FromJSON,
    BTVector3d389FromJSONTyped,
    BTVector3d389ToJSON,
} from './BTVector3d389';
import type { GBTCurveTypeEnum } from './GBTCurveTypeEnum';
import {
    GBTCurveTypeEnumFromJSON,
    GBTCurveTypeEnumFromJSONTyped,
    GBTCurveTypeEnumToJSON,
} from './GBTCurveTypeEnum';

import {
     BTCircleDescription1145FromJSONTyped,
    BTCircleDescription1145ToJSON,
     BTEllipseDescription866FromJSONTyped,
    BTEllipseDescription866ToJSON,
     BTLineDescription1559FromJSONTyped,
    BTLineDescription1559ToJSON,
     BTSplineDescription2118FromJSONTyped,
    BTSplineDescription2118ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTCurveDescription1583
 */
export interface BTCurveDescription1583 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTCurveDescription1583
     */
    btType?: string;
    /**
     * 
     * @type {BTVector3d389}
     * @memberof BTCurveDescription1583
     */
    direction?: BTVector3d389;
    /**
     * 
     * @type {BTVector3d389}
     * @memberof BTCurveDescription1583
     */
    directionOrientedWithFace?: BTVector3d389;
    /**
     * 
     * @type {BTVector3d389}
     * @memberof BTCurveDescription1583
     */
    origin?: BTVector3d389;
    /**
     * 
     * @type {GBTCurveTypeEnum}
     * @memberof BTCurveDescription1583
     */
    type?: GBTCurveTypeEnum;
}

/**
 * Check if a given object implements the BTCurveDescription1583 interface.
 */
export function instanceOfBTCurveDescription1583(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTCurveDescription1583FromJSON(json: any): BTCurveDescription1583 {
    return BTCurveDescription1583FromJSONTyped(json, false);
}

export function BTCurveDescription1583FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTCurveDescription1583 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTCircleDescription-1145') {
            return BTCircleDescription1145FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTEllipseDescription-866') {
            return BTEllipseDescription866FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTLineDescription-1559') {
            return BTLineDescription1559FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTSplineDescription-2118') {
            return BTSplineDescription2118FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'direction': !exists(json, 'direction') ? undefined : BTVector3d389FromJSON(json['direction']),
        'directionOrientedWithFace': !exists(json, 'directionOrientedWithFace') ? undefined : BTVector3d389FromJSON(json['directionOrientedWithFace']),
        'origin': !exists(json, 'origin') ? undefined : BTVector3d389FromJSON(json['origin']),
        'type': !exists(json, 'type') ? undefined : GBTCurveTypeEnumFromJSON(json['type']),
    };
}

export function BTCurveDescription1583SuperToJSON(value?: BTCurveDescription1583 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'direction': BTVector3d389ToJSON(value.direction),
        'directionOrientedWithFace': BTVector3d389ToJSON(value.directionOrientedWithFace),
        'origin': BTVector3d389ToJSON(value.origin),
        'type': GBTCurveTypeEnumToJSON(value.type),
    };
}



export function BTCurveDescription1583ToJSON(value?: BTCurveDescription1583 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTCircleDescription-1145') {
        return BTCircleDescription1145ToJSON(value);
    }
    if (value.btType === 'BTEllipseDescription-866') {
        return BTEllipseDescription866ToJSON(value);
    }
    if (value.btType === 'BTLineDescription-1559') {
        return BTLineDescription1559ToJSON(value);
    }
    if (value.btType === 'BTSplineDescription-2118') {
        return BTSplineDescription2118ToJSON(value);
    }
    return BTCurveDescription1583SuperToJSON(value);
}
