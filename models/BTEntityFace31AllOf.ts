/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTImmutableByteArray } from './BTImmutableByteArray';
import {
    BTImmutableByteArrayFromJSON,
    BTImmutableByteArrayFromJSONTyped,
    BTImmutableByteArrayToJSON,
} from './BTImmutableByteArray';
import type { BTImmutableDoubleArray } from './BTImmutableDoubleArray';
import {
    BTImmutableDoubleArrayFromJSON,
    BTImmutableDoubleArrayFromJSONTyped,
    BTImmutableDoubleArrayToJSON,
} from './BTImmutableDoubleArray';
import type { BTImmutableFloatArray } from './BTImmutableFloatArray';
import {
    BTImmutableFloatArrayFromJSON,
    BTImmutableFloatArrayFromJSONTyped,
    BTImmutableFloatArrayToJSON,
} from './BTImmutableFloatArray';
import type { BTImmutableIntArray } from './BTImmutableIntArray';
import {
    BTImmutableIntArrayFromJSON,
    BTImmutableIntArrayFromJSONTyped,
    BTImmutableIntArrayToJSON,
} from './BTImmutableIntArray';
import type { GBTSurfaceType } from './GBTSurfaceType';
import {
    GBTSurfaceTypeFromJSON,
    GBTSurfaceTypeFromJSONTyped,
    GBTSurfaceTypeToJSON,
} from './GBTSurfaceType';

/**
 * 
 * @export
 * @interface BTEntityFace31AllOf
 */
export interface BTEntityFace31AllOf {
    /**
     * 
     * @type {string}
     * @memberof BTEntityFace31AllOf
     */
    btType?: string;
    /**
     * 
     * @type {BTImmutableByteArray}
     * @memberof BTEntityFace31AllOf
     */
    compressedUvs?: BTImmutableByteArray;
    /**
     * 
     * @type {boolean}
     * @memberof BTEntityFace31AllOf
     */
    flipComputedNormals?: boolean;
    /**
     * 
     * @type {BTImmutableIntArray}
     * @memberof BTEntityFace31AllOf
     */
    indices?: BTImmutableIntArray;
    /**
     * 
     * @type {boolean}
     * @memberof BTEntityFace31AllOf
     */
    indicesStoredAsDifferences?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTEntityFace31AllOf
     */
    isPlanar?: boolean;
    /**
     * 
     * @type {BTImmutableFloatArray}
     * @memberof BTEntityFace31AllOf
     */
    maxPrincipleCurvatureMagnitudes?: BTImmutableFloatArray;
    /**
     * 
     * @type {BTImmutableFloatArray}
     * @memberof BTEntityFace31AllOf
     */
    minPrincipleCurvatureMagnitudes?: BTImmutableFloatArray;
    /**
     * 
     * @type {BTImmutableFloatArray}
     * @memberof BTEntityFace31AllOf
     */
    normals?: BTImmutableFloatArray;
    /**
     * 
     * @type {BTImmutableFloatArray}
     * @memberof BTEntityFace31AllOf
     */
    points?: BTImmutableFloatArray;
    /**
     * 
     * @type {BTImmutableDoubleArray}
     * @memberof BTEntityFace31AllOf
     */
    surfaceParameters?: BTImmutableDoubleArray;
    /**
     * 
     * @type {GBTSurfaceType}
     * @memberof BTEntityFace31AllOf
     */
    surfaceType?: GBTSurfaceType;
    /**
     * 
     * @type {BTImmutableFloatArray}
     * @memberof BTEntityFace31AllOf
     */
    textureCoordinates?: BTImmutableFloatArray;
    /**
     * 
     * @type {number}
     * @memberof BTEntityFace31AllOf
     */
    triangleCount?: number;
}

/**
 * Check if a given object implements the BTEntityFace31AllOf interface.
 */
export function instanceOfBTEntityFace31AllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTEntityFace31AllOfFromJSON(json: any): BTEntityFace31AllOf {
    return BTEntityFace31AllOfFromJSONTyped(json, false);
}

export function BTEntityFace31AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTEntityFace31AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'compressedUvs': !exists(json, 'compressedUvs') ? undefined : BTImmutableByteArrayFromJSON(json['compressedUvs']),
        'flipComputedNormals': !exists(json, 'flipComputedNormals') ? undefined : json['flipComputedNormals'],
        'indices': !exists(json, 'indices') ? undefined : BTImmutableIntArrayFromJSON(json['indices']),
        'indicesStoredAsDifferences': !exists(json, 'indicesStoredAsDifferences') ? undefined : json['indicesStoredAsDifferences'],
        'isPlanar': !exists(json, 'isPlanar') ? undefined : json['isPlanar'],
        'maxPrincipleCurvatureMagnitudes': !exists(json, 'maxPrincipleCurvatureMagnitudes') ? undefined : BTImmutableFloatArrayFromJSON(json['maxPrincipleCurvatureMagnitudes']),
        'minPrincipleCurvatureMagnitudes': !exists(json, 'minPrincipleCurvatureMagnitudes') ? undefined : BTImmutableFloatArrayFromJSON(json['minPrincipleCurvatureMagnitudes']),
        'normals': !exists(json, 'normals') ? undefined : BTImmutableFloatArrayFromJSON(json['normals']),
        'points': !exists(json, 'points') ? undefined : BTImmutableFloatArrayFromJSON(json['points']),
        'surfaceParameters': !exists(json, 'surfaceParameters') ? undefined : BTImmutableDoubleArrayFromJSON(json['surfaceParameters']),
        'surfaceType': !exists(json, 'surfaceType') ? undefined : GBTSurfaceTypeFromJSON(json['surfaceType']),
        'textureCoordinates': !exists(json, 'textureCoordinates') ? undefined : BTImmutableFloatArrayFromJSON(json['textureCoordinates']),
        'triangleCount': !exists(json, 'triangleCount') ? undefined : json['triangleCount'],
    };
}

export function BTEntityFace31AllOfToJSON(value?: BTEntityFace31AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'compressedUvs': BTImmutableByteArrayToJSON(value.compressedUvs),
        'flipComputedNormals': value.flipComputedNormals,
        'indices': BTImmutableIntArrayToJSON(value.indices),
        'indicesStoredAsDifferences': value.indicesStoredAsDifferences,
        'isPlanar': value.isPlanar,
        'maxPrincipleCurvatureMagnitudes': BTImmutableFloatArrayToJSON(value.maxPrincipleCurvatureMagnitudes),
        'minPrincipleCurvatureMagnitudes': BTImmutableFloatArrayToJSON(value.minPrincipleCurvatureMagnitudes),
        'normals': BTImmutableFloatArrayToJSON(value.normals),
        'points': BTImmutableFloatArrayToJSON(value.points),
        'surfaceParameters': BTImmutableDoubleArrayToJSON(value.surfaceParameters),
        'surfaceType': GBTSurfaceTypeToJSON(value.surfaceType),
        'textureCoordinates': BTImmutableFloatArrayToJSON(value.textureCoordinates),
        'triangleCount': value.triangleCount,
    };
}

