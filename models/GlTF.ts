/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Accessor } from './Accessor';
import {
    AccessorFromJSON,
    AccessorFromJSONTyped,
    AccessorToJSON,
} from './Accessor';
import type { Animation } from './Animation';
import {
    AnimationFromJSON,
    AnimationFromJSONTyped,
    AnimationToJSON,
} from './Animation';
import type { Asset } from './Asset';
import {
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
} from './Asset';
import type { Buffer } from './Buffer';
import {
    BufferFromJSON,
    BufferFromJSONTyped,
    BufferToJSON,
} from './Buffer';
import type { BufferView } from './BufferView';
import {
    BufferViewFromJSON,
    BufferViewFromJSONTyped,
    BufferViewToJSON,
} from './BufferView';
import type { Camera } from './Camera';
import {
    CameraFromJSON,
    CameraFromJSONTyped,
    CameraToJSON,
} from './Camera';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
} from './Image';
import type { Material } from './Material';
import {
    MaterialFromJSON,
    MaterialFromJSONTyped,
    MaterialToJSON,
} from './Material';
import type { Mesh } from './Mesh';
import {
    MeshFromJSON,
    MeshFromJSONTyped,
    MeshToJSON,
} from './Mesh';
import type { Node } from './Node';
import {
    NodeFromJSON,
    NodeFromJSONTyped,
    NodeToJSON,
} from './Node';
import type { Sampler } from './Sampler';
import {
    SamplerFromJSON,
    SamplerFromJSONTyped,
    SamplerToJSON,
} from './Sampler';
import type { Scene } from './Scene';
import {
    SceneFromJSON,
    SceneFromJSONTyped,
    SceneToJSON,
} from './Scene';
import type { Skin } from './Skin';
import {
    SkinFromJSON,
    SkinFromJSONTyped,
    SkinToJSON,
} from './Skin';
import type { Texture } from './Texture';
import {
    TextureFromJSON,
    TextureFromJSONTyped,
    TextureToJSON,
} from './Texture';

/**
 * 
 * @export
 * @interface GlTF
 */
export interface GlTF {
    /**
     * 
     * @type {Array<Accessor>}
     * @memberof GlTF
     */
    accessors?: Array<Accessor>;
    /**
     * 
     * @type {Array<Animation>}
     * @memberof GlTF
     */
    animations?: Array<Animation>;
    /**
     * 
     * @type {Asset}
     * @memberof GlTF
     */
    asset?: Asset;
    /**
     * 
     * @type {Array<BufferView>}
     * @memberof GlTF
     */
    bufferViews?: Array<BufferView>;
    /**
     * 
     * @type {Array<Buffer>}
     * @memberof GlTF
     */
    buffers?: Array<Buffer>;
    /**
     * 
     * @type {Array<Camera>}
     * @memberof GlTF
     */
    cameras?: Array<Camera>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof GlTF
     */
    extensions?: { [key: string]: object; };
    /**
     * 
     * @type {Array<string>}
     * @memberof GlTF
     */
    extensionsRequired?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GlTF
     */
    extensionsUsed?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof GlTF
     */
    extras?: object;
    /**
     * 
     * @type {Array<Image>}
     * @memberof GlTF
     */
    images?: Array<Image>;
    /**
     * 
     * @type {Array<Material>}
     * @memberof GlTF
     */
    materials?: Array<Material>;
    /**
     * 
     * @type {Array<Mesh>}
     * @memberof GlTF
     */
    meshes?: Array<Mesh>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof GlTF
     */
    nodes?: Array<Node>;
    /**
     * 
     * @type {Array<Sampler>}
     * @memberof GlTF
     */
    samplers?: Array<Sampler>;
    /**
     * 
     * @type {number}
     * @memberof GlTF
     */
    scene?: number;
    /**
     * 
     * @type {Array<Scene>}
     * @memberof GlTF
     */
    scenes?: Array<Scene>;
    /**
     * 
     * @type {Array<Skin>}
     * @memberof GlTF
     */
    skins?: Array<Skin>;
    /**
     * 
     * @type {Array<Texture>}
     * @memberof GlTF
     */
    textures?: Array<Texture>;
}

/**
 * Check if a given object implements the GlTF interface.
 */
export function instanceOfGlTF(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GlTFFromJSON(json: any): GlTF {
    return GlTFFromJSONTyped(json, false);
}

export function GlTFFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlTF {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessors': !exists(json, 'accessors') ? undefined : ((json['accessors'] as Array<any>).map(AccessorFromJSON)),
        'animations': !exists(json, 'animations') ? undefined : ((json['animations'] as Array<any>).map(AnimationFromJSON)),
        'asset': !exists(json, 'asset') ? undefined : AssetFromJSON(json['asset']),
        'bufferViews': !exists(json, 'bufferViews') ? undefined : ((json['bufferViews'] as Array<any>).map(BufferViewFromJSON)),
        'buffers': !exists(json, 'buffers') ? undefined : ((json['buffers'] as Array<any>).map(BufferFromJSON)),
        'cameras': !exists(json, 'cameras') ? undefined : ((json['cameras'] as Array<any>).map(CameraFromJSON)),
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'extensionsRequired': !exists(json, 'extensionsRequired') ? undefined : json['extensionsRequired'],
        'extensionsUsed': !exists(json, 'extensionsUsed') ? undefined : json['extensionsUsed'],
        'extras': !exists(json, 'extras') ? undefined : json['extras'],
        'images': !exists(json, 'images') ? undefined : ((json['images'] as Array<any>).map(ImageFromJSON)),
        'materials': !exists(json, 'materials') ? undefined : ((json['materials'] as Array<any>).map(MaterialFromJSON)),
        'meshes': !exists(json, 'meshes') ? undefined : ((json['meshes'] as Array<any>).map(MeshFromJSON)),
        'nodes': !exists(json, 'nodes') ? undefined : ((json['nodes'] as Array<any>).map(NodeFromJSON)),
        'samplers': !exists(json, 'samplers') ? undefined : ((json['samplers'] as Array<any>).map(SamplerFromJSON)),
        'scene': !exists(json, 'scene') ? undefined : json['scene'],
        'scenes': !exists(json, 'scenes') ? undefined : ((json['scenes'] as Array<any>).map(SceneFromJSON)),
        'skins': !exists(json, 'skins') ? undefined : ((json['skins'] as Array<any>).map(SkinFromJSON)),
        'textures': !exists(json, 'textures') ? undefined : ((json['textures'] as Array<any>).map(TextureFromJSON)),
    };
}

export function GlTFToJSON(value?: GlTF | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessors': value.accessors === undefined ? undefined : ((value.accessors as Array<any>).map(AccessorToJSON)),
        'animations': value.animations === undefined ? undefined : ((value.animations as Array<any>).map(AnimationToJSON)),
        'asset': AssetToJSON(value.asset),
        'bufferViews': value.bufferViews === undefined ? undefined : ((value.bufferViews as Array<any>).map(BufferViewToJSON)),
        'buffers': value.buffers === undefined ? undefined : ((value.buffers as Array<any>).map(BufferToJSON)),
        'cameras': value.cameras === undefined ? undefined : ((value.cameras as Array<any>).map(CameraToJSON)),
        'extensions': value.extensions,
        'extensionsRequired': value.extensionsRequired,
        'extensionsUsed': value.extensionsUsed,
        'extras': value.extras,
        'images': value.images === undefined ? undefined : ((value.images as Array<any>).map(ImageToJSON)),
        'materials': value.materials === undefined ? undefined : ((value.materials as Array<any>).map(MaterialToJSON)),
        'meshes': value.meshes === undefined ? undefined : ((value.meshes as Array<any>).map(MeshToJSON)),
        'nodes': value.nodes === undefined ? undefined : ((value.nodes as Array<any>).map(NodeToJSON)),
        'samplers': value.samplers === undefined ? undefined : ((value.samplers as Array<any>).map(SamplerToJSON)),
        'scene': value.scene,
        'scenes': value.scenes === undefined ? undefined : ((value.scenes as Array<any>).map(SceneToJSON)),
        'skins': value.skins === undefined ? undefined : ((value.skins as Array<any>).map(SkinToJSON)),
        'textures': value.textures === undefined ? undefined : ((value.textures as Array<any>).map(TextureToJSON)),
    };
}

