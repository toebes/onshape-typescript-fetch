/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMMateConnector66 } from './BTMMateConnector66';
import {
    BTMMateConnector66FromJSON,
    BTMMateConnector66FromJSONTyped,
    BTMMateConnector66ToJSON,
} from './BTMMateConnector66';
import type { BTMParameterQueryWithOccurrenceList67 } from './BTMParameterQueryWithOccurrenceList67';
import {
    BTMParameterQueryWithOccurrenceList67FromJSON,
    BTMParameterQueryWithOccurrenceList67FromJSONTyped,
    BTMParameterQueryWithOccurrenceList67ToJSON,
} from './BTMParameterQueryWithOccurrenceList67';

/**
 * 
 * @export
 * @interface BTMWidthMate1011AllOf
 */
export interface BTMWidthMate1011AllOf {
    /**
     * 
     * @type {string}
     * @memberof BTMWidthMate1011AllOf
     */
    btType?: string;
    /**
     * 
     * @type {Array<BTMMateConnector66>}
     * @memberof BTMWidthMate1011AllOf
     */
    mateConnectorsNotUsedInQuery?: Array<BTMMateConnector66>;
    /**
     * 
     * @type {BTMParameterQueryWithOccurrenceList67}
     * @memberof BTMWidthMate1011AllOf
     */
    tabMateConnectorQueryList?: BTMParameterQueryWithOccurrenceList67;
    /**
     * 
     * @type {BTMParameterQueryWithOccurrenceList67}
     * @memberof BTMWidthMate1011AllOf
     */
    widthMateConnectorQueryList?: BTMParameterQueryWithOccurrenceList67;
}

/**
 * Check if a given object implements the BTMWidthMate1011AllOf interface.
 */
export function instanceOfBTMWidthMate1011AllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTMWidthMate1011AllOfFromJSON(json: any): BTMWidthMate1011AllOf {
    return BTMWidthMate1011AllOfFromJSONTyped(json, false);
}

export function BTMWidthMate1011AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTMWidthMate1011AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'mateConnectorsNotUsedInQuery': !exists(json, 'mateConnectorsNotUsedInQuery') ? undefined : ((json['mateConnectorsNotUsedInQuery'] as Array<any>).map(BTMMateConnector66FromJSON)),
        'tabMateConnectorQueryList': !exists(json, 'tabMateConnectorQueryList') ? undefined : BTMParameterQueryWithOccurrenceList67FromJSON(json['tabMateConnectorQueryList']),
        'widthMateConnectorQueryList': !exists(json, 'widthMateConnectorQueryList') ? undefined : BTMParameterQueryWithOccurrenceList67FromJSON(json['widthMateConnectorQueryList']),
    };
}

export function BTMWidthMate1011AllOfToJSON(value?: BTMWidthMate1011AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'mateConnectorsNotUsedInQuery': value.mateConnectorsNotUsedInQuery === undefined ? undefined : ((value.mateConnectorsNotUsedInQuery as Array<any>).map(BTMMateConnector66ToJSON)),
        'tabMateConnectorQueryList': BTMParameterQueryWithOccurrenceList67ToJSON(value.tabMateConnectorQueryList),
        'widthMateConnectorQueryList': BTMParameterQueryWithOccurrenceList67ToJSON(value.widthMateConnectorQueryList),
    };
}

