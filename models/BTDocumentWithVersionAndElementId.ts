/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ObjectId } from './ObjectId';
import {
    ObjectIdFromJSON,
    ObjectIdFromJSONTyped,
    ObjectIdToJSON,
} from './ObjectId';

/**
 * 
 * @export
 * @interface BTDocumentWithVersionAndElementId
 */
export interface BTDocumentWithVersionAndElementId {
    /**
     * 
     * @type {string}
     * @memberof BTDocumentWithVersionAndElementId
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentWithVersionAndElementId
     */
    documentVersionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentWithVersionAndElementId
     */
    elementId?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof BTDocumentWithVersionAndElementId
     */
    elementLibraryId?: ObjectId;
    /**
     * 
     * @type {ObjectId}
     * @memberof BTDocumentWithVersionAndElementId
     */
    elementLibraryVersion?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentWithVersionAndElementId
     */
    partNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentWithVersionAndElementId
     */
    revision?: string;
    /**
     * 
     * @type {string}
     * @memberof BTDocumentWithVersionAndElementId
     */
    uniqueVersionId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTDocumentWithVersionAndElementId
     */
    validElementLibraryReference?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTDocumentWithVersionAndElementId
     */
    validRevisionReference?: boolean;
}

/**
 * Check if a given object implements the BTDocumentWithVersionAndElementId interface.
 */
export function instanceOfBTDocumentWithVersionAndElementId(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTDocumentWithVersionAndElementIdFromJSON(json: any): BTDocumentWithVersionAndElementId {
    return BTDocumentWithVersionAndElementIdFromJSONTyped(json, false);
}

export function BTDocumentWithVersionAndElementIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTDocumentWithVersionAndElementId {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'documentVersionId': !exists(json, 'documentVersionId') ? undefined : json['documentVersionId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementLibraryId': !exists(json, 'elementLibraryId') ? undefined : ObjectIdFromJSON(json['elementLibraryId']),
        'elementLibraryVersion': !exists(json, 'elementLibraryVersion') ? undefined : ObjectIdFromJSON(json['elementLibraryVersion']),
        'partNumber': !exists(json, 'partNumber') ? undefined : json['partNumber'],
        'revision': !exists(json, 'revision') ? undefined : json['revision'],
        'uniqueVersionId': !exists(json, 'uniqueVersionId') ? undefined : json['uniqueVersionId'],
        'validElementLibraryReference': !exists(json, 'validElementLibraryReference') ? undefined : json['validElementLibraryReference'],
        'validRevisionReference': !exists(json, 'validRevisionReference') ? undefined : json['validRevisionReference'],
    };
}

export function BTDocumentWithVersionAndElementIdToJSON(value?: BTDocumentWithVersionAndElementId | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'documentId': value.documentId,
        'documentVersionId': value.documentVersionId,
        'elementId': value.elementId,
        'elementLibraryId': ObjectIdToJSON(value.elementLibraryId),
        'elementLibraryVersion': ObjectIdToJSON(value.elementLibraryVersion),
        'partNumber': value.partNumber,
        'revision': value.revision,
        'uniqueVersionId': value.uniqueVersionId,
        'validElementLibraryReference': value.validElementLibraryReference,
        'validRevisionReference': value.validRevisionReference,
    };
}

