/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTParameterLookupTableEntry1667 } from './BTParameterLookupTableEntry1667';
import {
    BTParameterLookupTableEntry1667FromJSON,
    BTParameterLookupTableEntry1667FromJSONTyped,
    BTParameterLookupTableEntry1667ToJSON,
} from './BTParameterLookupTableEntry1667';

/**
 * 
 * @export
 * @interface BTParameterLookupTableListEntry1916
 */
export interface BTParameterLookupTableListEntry1916 {
    /**
     * 
     * @type {number}
     * @memberof BTParameterLookupTableListEntry1916
     */
    additionalLocalizedStrings?: number;
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTParameterLookupTableListEntry1916
     */
    btType?: string;
    /**
     * 
     * @type {number}
     * @memberof BTParameterLookupTableListEntry1916
     */
    defaultIndex?: number;
    /**
     * 
     * @type {string}
     * @memberof BTParameterLookupTableListEntry1916
     */
    displayName?: string;
    /**
     * 
     * @type {Array<BTParameterLookupTableEntry1667>}
     * @memberof BTParameterLookupTableListEntry1916
     */
    entries?: Array<BTParameterLookupTableEntry1667>;
    /**
     * 
     * @type {string}
     * @memberof BTParameterLookupTableListEntry1916
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof BTParameterLookupTableListEntry1916
     */
    localizableName?: string;
    /**
     * 
     * @type {string}
     * @memberof BTParameterLookupTableListEntry1916
     */
    localizedLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof BTParameterLookupTableListEntry1916
     */
    localizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof BTParameterLookupTableListEntry1916
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTParameterLookupTableListEntry1916
     */
    stringsToLocalize?: Array<string>;
}

/**
 * Check if a given object implements the BTParameterLookupTableListEntry1916 interface.
 */
export function instanceOfBTParameterLookupTableListEntry1916(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTParameterLookupTableListEntry1916FromJSON(json: any): BTParameterLookupTableListEntry1916 {
    return BTParameterLookupTableListEntry1916FromJSONTyped(json, false);
}

export function BTParameterLookupTableListEntry1916FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTParameterLookupTableListEntry1916 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'additionalLocalizedStrings': !exists(json, 'additionalLocalizedStrings') ? undefined : json['additionalLocalizedStrings'],
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'defaultIndex': !exists(json, 'defaultIndex') ? undefined : json['defaultIndex'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'entries': !exists(json, 'entries') ? undefined : ((json['entries'] as Array<any>).map(BTParameterLookupTableEntry1667FromJSON)),
        'label': !exists(json, 'label') ? undefined : json['label'],
        'localizableName': !exists(json, 'localizableName') ? undefined : json['localizableName'],
        'localizedLabel': !exists(json, 'localizedLabel') ? undefined : json['localizedLabel'],
        'localizedName': !exists(json, 'localizedName') ? undefined : json['localizedName'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'stringsToLocalize': !exists(json, 'stringsToLocalize') ? undefined : json['stringsToLocalize'],
    };
}

export function BTParameterLookupTableListEntry1916ToJSON(value?: BTParameterLookupTableListEntry1916 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'additionalLocalizedStrings': value.additionalLocalizedStrings,
        'btType': value.btType,
        'defaultIndex': value.defaultIndex,
        'displayName': value.displayName,
        'entries': value.entries === undefined ? undefined : ((value.entries as Array<any>).map(BTParameterLookupTableEntry1667ToJSON)),
        'label': value.label,
        'localizableName': value.localizableName,
        'localizedLabel': value.localizedLabel,
        'localizedName': value.localizedName,
        'name': value.name,
        'stringsToLocalize': value.stringsToLocalize,
    };
}

