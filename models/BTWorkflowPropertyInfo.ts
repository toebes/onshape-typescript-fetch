/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMetadataEnumValueInfo } from './BTMetadataEnumValueInfo';
import {
    BTMetadataEnumValueInfoFromJSON,
    BTMetadataEnumValueInfoFromJSONTyped,
    BTMetadataEnumValueInfoToJSON,
} from './BTMetadataEnumValueInfo';
import type { BTMetadataPropertyUiHintsInfo } from './BTMetadataPropertyUiHintsInfo';
import {
    BTMetadataPropertyUiHintsInfoFromJSON,
    BTMetadataPropertyUiHintsInfoFromJSONTyped,
    BTMetadataPropertyUiHintsInfoToJSON,
} from './BTMetadataPropertyUiHintsInfo';
import type { BTMetadataPropertyValidatorInfo } from './BTMetadataPropertyValidatorInfo';
import {
    BTMetadataPropertyValidatorInfoFromJSON,
    BTMetadataPropertyValidatorInfoFromJSONTyped,
    BTMetadataPropertyValidatorInfoToJSON,
} from './BTMetadataPropertyValidatorInfo';
import type { BTWorkflowableObjectObserver } from './BTWorkflowableObjectObserver';
import {
    BTWorkflowableObjectObserverFromJSON,
    BTWorkflowableObjectObserverFromJSONTyped,
    BTWorkflowableObjectObserverToJSON,
} from './BTWorkflowableObjectObserver';

/**
 * 
 * @export
 * @interface BTWorkflowPropertyInfo
 */
export interface BTWorkflowPropertyInfo {
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    aggregationSkippedFilteredOutValues?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    computedAssemblyProperty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    computedProperty?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowPropertyInfo
     */
    computedPropertyError?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowPropertyInfo
     */
    computedPropertyEvalInfo?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowPropertyInfo
     */
    dateFormat?: string;
    /**
     * 
     * @type {object}
     * @memberof BTWorkflowPropertyInfo
     */
    defaultValue?: object;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    dirty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    editable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    editableInUi?: boolean;
    /**
     * 
     * @type {Array<BTMetadataEnumValueInfo>}
     * @memberof BTWorkflowPropertyInfo
     */
    enumValues?: Array<BTMetadataEnumValueInfo>;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    hideInUi?: boolean;
    /**
     * 
     * @type {object}
     * @memberof BTWorkflowPropertyInfo
     */
    initialValue?: object;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    isApproverProperty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    isNotifierProperty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    multivalued?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowPropertyInfo
     */
    name?: string;
    /**
     * 
     * @type {Array<BTWorkflowableObjectObserver>}
     * @memberof BTWorkflowPropertyInfo
     */
    observers?: Array<BTWorkflowableObjectObserver>;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowPropertyInfo
     */
    propertyId?: string;
    /**
     * 0: Unknown | 1: Not computed | 2: Computed without override | 3: Computed with override | 4: Computed with subassembly overrides | 5: Overridden
     * @type {number}
     * @memberof BTWorkflowPropertyInfo
     */
    propertyOverrideStatus?: number;
    /**
     * 
     * @type {number}
     * @memberof BTWorkflowPropertyInfo
     */
    propertySource?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowPropertyInfo
     */
    schemaId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    teamsOnly?: boolean;
    /**
     * 
     * @type {BTMetadataPropertyUiHintsInfo}
     * @memberof BTWorkflowPropertyInfo
     */
    uiHints?: BTMetadataPropertyUiHintsInfo;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowPropertyInfo
     */
    usersOnly?: boolean;
    /**
     * 
     * @type {BTMetadataPropertyValidatorInfo}
     * @memberof BTWorkflowPropertyInfo
     */
    validator?: BTMetadataPropertyValidatorInfo;
    /**
     * 
     * @type {object}
     * @memberof BTWorkflowPropertyInfo
     */
    value?: object;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowPropertyInfo
     */
    valueType?: string;
}

/**
 * Check if a given object implements the BTWorkflowPropertyInfo interface.
 */
export function instanceOfBTWorkflowPropertyInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTWorkflowPropertyInfoFromJSON(json: any): BTWorkflowPropertyInfo {
    return BTWorkflowPropertyInfoFromJSONTyped(json, false);
}

export function BTWorkflowPropertyInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTWorkflowPropertyInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aggregationSkippedFilteredOutValues': !exists(json, 'aggregationSkippedFilteredOutValues') ? undefined : json['aggregationSkippedFilteredOutValues'],
        'computedAssemblyProperty': !exists(json, 'computedAssemblyProperty') ? undefined : json['computedAssemblyProperty'],
        'computedProperty': !exists(json, 'computedProperty') ? undefined : json['computedProperty'],
        'computedPropertyError': !exists(json, 'computedPropertyError') ? undefined : json['computedPropertyError'],
        'computedPropertyEvalInfo': !exists(json, 'computedPropertyEvalInfo') ? undefined : json['computedPropertyEvalInfo'],
        'dateFormat': !exists(json, 'dateFormat') ? undefined : json['dateFormat'],
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'dirty': !exists(json, 'dirty') ? undefined : json['dirty'],
        'editable': !exists(json, 'editable') ? undefined : json['editable'],
        'editableInUi': !exists(json, 'editableInUi') ? undefined : json['editableInUi'],
        'enumValues': !exists(json, 'enumValues') ? undefined : ((json['enumValues'] as Array<any>).map(BTMetadataEnumValueInfoFromJSON)),
        'hideInUi': !exists(json, 'hideInUi') ? undefined : json['hideInUi'],
        'initialValue': !exists(json, 'initialValue') ? undefined : json['initialValue'],
        'isApproverProperty': !exists(json, 'isApproverProperty') ? undefined : json['isApproverProperty'],
        'isNotifierProperty': !exists(json, 'isNotifierProperty') ? undefined : json['isNotifierProperty'],
        'multivalued': !exists(json, 'multivalued') ? undefined : json['multivalued'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'observers': !exists(json, 'observers') ? undefined : ((json['observers'] as Array<any>).map(BTWorkflowableObjectObserverFromJSON)),
        'propertyId': !exists(json, 'propertyId') ? undefined : json['propertyId'],
        'propertyOverrideStatus': !exists(json, 'propertyOverrideStatus') ? undefined : json['propertyOverrideStatus'],
        'propertySource': !exists(json, 'propertySource') ? undefined : json['propertySource'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'schemaId': !exists(json, 'schemaId') ? undefined : json['schemaId'],
        'teamsOnly': !exists(json, 'teamsOnly') ? undefined : json['teamsOnly'],
        'uiHints': !exists(json, 'uiHints') ? undefined : BTMetadataPropertyUiHintsInfoFromJSON(json['uiHints']),
        'usersOnly': !exists(json, 'usersOnly') ? undefined : json['usersOnly'],
        'validator': !exists(json, 'validator') ? undefined : BTMetadataPropertyValidatorInfoFromJSON(json['validator']),
        'value': !exists(json, 'value') ? undefined : json['value'],
        'valueType': !exists(json, 'valueType') ? undefined : json['valueType'],
    };
}

export function BTWorkflowPropertyInfoToJSON(value?: BTWorkflowPropertyInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aggregationSkippedFilteredOutValues': value.aggregationSkippedFilteredOutValues,
        'computedAssemblyProperty': value.computedAssemblyProperty,
        'computedProperty': value.computedProperty,
        'computedPropertyError': value.computedPropertyError,
        'computedPropertyEvalInfo': value.computedPropertyEvalInfo,
        'dateFormat': value.dateFormat,
        'defaultValue': value.defaultValue,
        'dirty': value.dirty,
        'editable': value.editable,
        'editableInUi': value.editableInUi,
        'enumValues': value.enumValues === undefined ? undefined : ((value.enumValues as Array<any>).map(BTMetadataEnumValueInfoToJSON)),
        'hideInUi': value.hideInUi,
        'initialValue': value.initialValue,
        'isApproverProperty': value.isApproverProperty,
        'isNotifierProperty': value.isNotifierProperty,
        'multivalued': value.multivalued,
        'name': value.name,
        'observers': value.observers === undefined ? undefined : ((value.observers as Array<any>).map(BTWorkflowableObjectObserverToJSON)),
        'propertyId': value.propertyId,
        'propertyOverrideStatus': value.propertyOverrideStatus,
        'propertySource': value.propertySource,
        'required': value.required,
        'schemaId': value.schemaId,
        'teamsOnly': value.teamsOnly,
        'uiHints': BTMetadataPropertyUiHintsInfoToJSON(value.uiHints),
        'usersOnly': value.usersOnly,
        'validator': BTMetadataPropertyValidatorInfoToJSON(value.validator),
        'value': value.value,
        'valueType': value.valueType,
    };
}

