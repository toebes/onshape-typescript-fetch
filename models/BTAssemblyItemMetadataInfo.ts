/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAssemblyItemMetadataRequestInfo } from './BTAssemblyItemMetadataRequestInfo';
import {
    BTAssemblyItemMetadataRequestInfoFromJSON,
    BTAssemblyItemMetadataRequestInfoFromJSONTyped,
    BTAssemblyItemMetadataRequestInfoToJSON,
} from './BTAssemblyItemMetadataRequestInfo';

/**
 * 
 * @export
 * @interface BTAssemblyItemMetadataInfo
 */
export interface BTAssemblyItemMetadataInfo {
    /**
     * 
     * @type {Array<BTAssemblyItemMetadataInfo>}
     * @memberof BTAssemblyItemMetadataInfo
     */
    children?: Array<BTAssemblyItemMetadataInfo>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BTAssemblyItemMetadataInfo
     */
    propertyIdToError?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BTAssemblyItemMetadataInfo
     */
    propertyIdToEvalInfo?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BTAssemblyItemMetadataInfo
     */
    propertyIdToOverrideStatus?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BTAssemblyItemMetadataInfo
     */
    propertyIdToSourceType?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BTAssemblyItemMetadataInfo
     */
    propertyIdToValue?: { [key: string]: string; };
    /**
     * 
     * @type {BTAssemblyItemMetadataRequestInfo}
     * @memberof BTAssemblyItemMetadataInfo
     */
    requestInfo?: BTAssemblyItemMetadataRequestInfo;
}

/**
 * Check if a given object implements the BTAssemblyItemMetadataInfo interface.
 */
export function instanceOfBTAssemblyItemMetadataInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTAssemblyItemMetadataInfoFromJSON(json: any): BTAssemblyItemMetadataInfo {
    return BTAssemblyItemMetadataInfoFromJSONTyped(json, false);
}

export function BTAssemblyItemMetadataInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAssemblyItemMetadataInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'children': !exists(json, 'children') ? undefined : ((json['children'] as Array<any>).map(BTAssemblyItemMetadataInfoFromJSON)),
        'propertyIdToError': !exists(json, 'propertyIdToError') ? undefined : json['propertyIdToError'],
        'propertyIdToEvalInfo': !exists(json, 'propertyIdToEvalInfo') ? undefined : json['propertyIdToEvalInfo'],
        'propertyIdToOverrideStatus': !exists(json, 'propertyIdToOverrideStatus') ? undefined : json['propertyIdToOverrideStatus'],
        'propertyIdToSourceType': !exists(json, 'propertyIdToSourceType') ? undefined : json['propertyIdToSourceType'],
        'propertyIdToValue': !exists(json, 'propertyIdToValue') ? undefined : json['propertyIdToValue'],
        'requestInfo': !exists(json, 'requestInfo') ? undefined : BTAssemblyItemMetadataRequestInfoFromJSON(json['requestInfo']),
    };
}

export function BTAssemblyItemMetadataInfoToJSON(value?: BTAssemblyItemMetadataInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'children': value.children === undefined ? undefined : ((value.children as Array<any>).map(BTAssemblyItemMetadataInfoToJSON)),
        'propertyIdToError': value.propertyIdToError,
        'propertyIdToEvalInfo': value.propertyIdToEvalInfo,
        'propertyIdToOverrideStatus': value.propertyIdToOverrideStatus,
        'propertyIdToSourceType': value.propertyIdToSourceType,
        'propertyIdToValue': value.propertyIdToValue,
        'requestInfo': BTAssemblyItemMetadataRequestInfoToJSON(value.requestInfo),
    };
}

