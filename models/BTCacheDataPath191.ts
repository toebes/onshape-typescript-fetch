/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BTCacheDataPath191
 */
export interface BTCacheDataPath191 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTCacheDataPath191
     */
    btType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCacheDataPath191
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCacheDataPath191
     */
    elementId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCacheDataPath191
     */
    immutableContextVersion?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTCacheDataPath191
     */
    immutablePathContentsShouldExist?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTCacheDataPath191
     */
    isImmutableContextPath?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTCacheDataPath191
     */
    key?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTCacheDataPath191
     */
    keyContainsConfiguration?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTCacheDataPath191
     */
    region?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTCacheDataPath191
     */
    useLocalFileCache?: boolean;
}

/**
 * Check if a given object implements the BTCacheDataPath191 interface.
 */
export function instanceOfBTCacheDataPath191(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTCacheDataPath191FromJSON(json: any): BTCacheDataPath191 {
    return BTCacheDataPath191FromJSONTyped(json, false);
}

export function BTCacheDataPath191FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTCacheDataPath191 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'immutableContextVersion': !exists(json, 'immutableContextVersion') ? undefined : json['immutableContextVersion'],
        'immutablePathContentsShouldExist': !exists(json, 'immutablePathContentsShouldExist') ? undefined : json['immutablePathContentsShouldExist'],
        'isImmutableContextPath': !exists(json, 'isImmutableContextPath') ? undefined : json['isImmutableContextPath'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'keyContainsConfiguration': !exists(json, 'keyContainsConfiguration') ? undefined : json['keyContainsConfiguration'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'useLocalFileCache': !exists(json, 'useLocalFileCache') ? undefined : json['useLocalFileCache'],
    };
}

export function BTCacheDataPath191ToJSON(value?: BTCacheDataPath191 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'documentId': value.documentId,
        'elementId': value.elementId,
        'immutableContextVersion': value.immutableContextVersion,
        'immutablePathContentsShouldExist': value.immutablePathContentsShouldExist,
        'isImmutableContextPath': value.isImmutableContextPath,
        'key': value.key,
        'keyContainsConfiguration': value.keyContainsConfiguration,
        'region': value.region,
        'useLocalFileCache': value.useLocalFileCache,
    };
}

