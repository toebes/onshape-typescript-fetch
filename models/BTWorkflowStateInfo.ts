/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BTWorkflowStateInfo
 */
export interface BTWorkflowStateInfo {
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowStateInfo
     */
    approverSourceProperty?: string;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowStateInfo
     */
    displayName?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof BTWorkflowStateInfo
     */
    editPermissions?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof BTWorkflowStateInfo
     */
    editableProperties?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowStateInfo
     */
    name?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof BTWorkflowStateInfo
     */
    nonEditableProperties?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowStateInfo
     */
    notifierSourceProperty?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof BTWorkflowStateInfo
     */
    requiredItemProperties?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof BTWorkflowStateInfo
     */
    requiredProperties?: Set<string>;
}

/**
 * Check if a given object implements the BTWorkflowStateInfo interface.
 */
export function instanceOfBTWorkflowStateInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTWorkflowStateInfoFromJSON(json: any): BTWorkflowStateInfo {
    return BTWorkflowStateInfoFromJSONTyped(json, false);
}

export function BTWorkflowStateInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTWorkflowStateInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'approverSourceProperty': !exists(json, 'approverSourceProperty') ? undefined : json['approverSourceProperty'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'editPermissions': !exists(json, 'editPermissions') ? undefined : json['editPermissions'],
        'editableProperties': !exists(json, 'editableProperties') ? undefined : json['editableProperties'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nonEditableProperties': !exists(json, 'nonEditableProperties') ? undefined : json['nonEditableProperties'],
        'notifierSourceProperty': !exists(json, 'notifierSourceProperty') ? undefined : json['notifierSourceProperty'],
        'requiredItemProperties': !exists(json, 'requiredItemProperties') ? undefined : json['requiredItemProperties'],
        'requiredProperties': !exists(json, 'requiredProperties') ? undefined : json['requiredProperties'],
    };
}

export function BTWorkflowStateInfoToJSON(value?: BTWorkflowStateInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'approverSourceProperty': value.approverSourceProperty,
        'displayName': value.displayName,
        'editPermissions': value.editPermissions === undefined ? undefined : Array.from(value.editPermissions as Set<any>),
        'editableProperties': value.editableProperties === undefined ? undefined : Array.from(value.editableProperties as Set<any>),
        'name': value.name,
        'nonEditableProperties': value.nonEditableProperties === undefined ? undefined : Array.from(value.nonEditableProperties as Set<any>),
        'notifierSourceProperty': value.notifierSourceProperty,
        'requiredItemProperties': value.requiredItemProperties === undefined ? undefined : Array.from(value.requiredItemProperties as Set<any>),
        'requiredProperties': value.requiredProperties === undefined ? undefined : Array.from(value.requiredProperties as Set<any>),
    };
}

