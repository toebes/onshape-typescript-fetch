/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAssemblyPartInfo } from './BTAssemblyPartInfo';
import {
    BTAssemblyPartInfoFromJSON,
    BTAssemblyPartInfoFromJSONTyped,
    BTAssemblyPartInfoToJSON,
} from './BTAssemblyPartInfo';
import type { BTAssemblyPsFeatureInfo } from './BTAssemblyPsFeatureInfo';
import {
    BTAssemblyPsFeatureInfoFromJSON,
    BTAssemblyPsFeatureInfoFromJSONTyped,
    BTAssemblyPsFeatureInfoToJSON,
} from './BTAssemblyPsFeatureInfo';
import type { BTRootAssemblyInfo } from './BTRootAssemblyInfo';
import {
    BTRootAssemblyInfoFromJSON,
    BTRootAssemblyInfoFromJSONTyped,
    BTRootAssemblyInfoToJSON,
} from './BTRootAssemblyInfo';
import type { BTSubAssemblyInfo } from './BTSubAssemblyInfo';
import {
    BTSubAssemblyInfoFromJSON,
    BTSubAssemblyInfoFromJSONTyped,
    BTSubAssemblyInfoToJSON,
} from './BTSubAssemblyInfo';

/**
 * 
 * @export
 * @interface BTAssemblyDefinitionInfo
 */
export interface BTAssemblyDefinitionInfo {
    /**
     * 
     * @type {Array<BTAssemblyPsFeatureInfo>}
     * @memberof BTAssemblyDefinitionInfo
     */
    partStudioFeatures?: Array<BTAssemblyPsFeatureInfo>;
    /**
     * 
     * @type {Array<BTAssemblyPartInfo>}
     * @memberof BTAssemblyDefinitionInfo
     */
    parts?: Array<BTAssemblyPartInfo>;
    /**
     * 
     * @type {BTRootAssemblyInfo}
     * @memberof BTAssemblyDefinitionInfo
     */
    rootAssembly?: BTRootAssemblyInfo;
    /**
     * 
     * @type {Array<BTSubAssemblyInfo>}
     * @memberof BTAssemblyDefinitionInfo
     */
    subAssemblies?: Array<BTSubAssemblyInfo>;
}

/**
 * Check if a given object implements the BTAssemblyDefinitionInfo interface.
 */
export function instanceOfBTAssemblyDefinitionInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTAssemblyDefinitionInfoFromJSON(json: any): BTAssemblyDefinitionInfo {
    return BTAssemblyDefinitionInfoFromJSONTyped(json, false);
}

export function BTAssemblyDefinitionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAssemblyDefinitionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'partStudioFeatures': !exists(json, 'partStudioFeatures') ? undefined : ((json['partStudioFeatures'] as Array<any>).map(BTAssemblyPsFeatureInfoFromJSON)),
        'parts': !exists(json, 'parts') ? undefined : ((json['parts'] as Array<any>).map(BTAssemblyPartInfoFromJSON)),
        'rootAssembly': !exists(json, 'rootAssembly') ? undefined : BTRootAssemblyInfoFromJSON(json['rootAssembly']),
        'subAssemblies': !exists(json, 'subAssemblies') ? undefined : ((json['subAssemblies'] as Array<any>).map(BTSubAssemblyInfoFromJSON)),
    };
}

export function BTAssemblyDefinitionInfoToJSON(value?: BTAssemblyDefinitionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'partStudioFeatures': value.partStudioFeatures === undefined ? undefined : ((value.partStudioFeatures as Array<any>).map(BTAssemblyPsFeatureInfoToJSON)),
        'parts': value.parts === undefined ? undefined : ((value.parts as Array<any>).map(BTAssemblyPartInfoToJSON)),
        'rootAssembly': BTRootAssemblyInfoToJSON(value.rootAssembly),
        'subAssemblies': value.subAssemblies === undefined ? undefined : ((value.subAssemblies as Array<any>).map(BTSubAssemblyInfoToJSON)),
    };
}

