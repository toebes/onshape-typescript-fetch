/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Discriminator } from './Discriminator';
import {
    DiscriminatorFromJSON,
    DiscriminatorFromJSONTyped,
    DiscriminatorToJSON,
} from './Discriminator';
import type { ExternalDocumentation } from './ExternalDocumentation';
import {
    ExternalDocumentationFromJSON,
    ExternalDocumentationFromJSONTyped,
    ExternalDocumentationToJSON,
} from './ExternalDocumentation';
import type { SchemaObject } from './SchemaObject';
import {
    SchemaObjectFromJSON,
    SchemaObjectFromJSONTyped,
    SchemaObjectToJSON,
} from './SchemaObject';
import type { XML } from './XML';
import {
    XMLFromJSON,
    XMLFromJSONTyped,
    XMLToJSON,
} from './XML';

/**
 * 
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    additionalItems?: Schema;
    /**
     * 
     * @type {object}
     * @memberof Schema
     */
    additionalProperties?: object;
    /**
     * 
     * @type {Array<Schema>}
     * @memberof Schema
     */
    allOf?: Array<Schema>;
    /**
     * 
     * @type {Array<Schema>}
     * @memberof Schema
     */
    anyOf?: Array<Schema>;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    booleanSchemaValue?: boolean;
    /**
     * 
     * @type {object}
     * @memberof Schema
     */
    _const?: object;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    contains?: Schema;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    contentEncoding?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    contentMediaType?: string;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    contentSchema?: Schema;
    /**
     * 
     * @type {object}
     * @memberof Schema
     */
    _default?: object;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof Schema
     */
    dependentRequired?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {{ [key: string]: Schema; }}
     * @memberof Schema
     */
    dependentSchemas?: { [key: string]: Schema; };
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    deprecated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    description?: string;
    /**
     * 
     * @type {Discriminator}
     * @memberof Schema
     */
    discriminator?: Discriminator;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    _else?: Schema;
    /**
     * 
     * @type {Array<object>}
     * @memberof Schema
     */
    _enum?: Array<object>;
    /**
     * 
     * @type {object}
     * @memberof Schema
     */
    example?: object;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    exampleSetFlag?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof Schema
     */
    examples?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    exclusiveMaximum?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    exclusiveMaximumValue?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    exclusiveMinimum?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    exclusiveMinimumValue?: number;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Schema
     */
    extensions?: { [key: string]: object; };
    /**
     * 
     * @type {ExternalDocumentation}
     * @memberof Schema
     */
    externalDocs?: ExternalDocumentation;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    format?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    get$anchor?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    get$comment?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    get$id?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    get$ref?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    get$schema?: string;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    _if?: Schema;
    /**
     * 
     * @type {SchemaObject}
     * @memberof Schema
     */
    items?: SchemaObject;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Schema
     */
    jsonSchema?: { [key: string]: object; };
    /**
     * 
     * @type {object}
     * @memberof Schema
     */
    jsonSchemaImpl?: object;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    maxContains?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    maxItems?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    maxLength?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    maxProperties?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    maximum?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    minContains?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    minItems?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    minLength?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    minProperties?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    minimum?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    multipleOf?: number;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    not?: Schema;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    nullable?: boolean;
    /**
     * 
     * @type {Array<Schema>}
     * @memberof Schema
     */
    oneOf?: Array<Schema>;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    pattern?: string;
    /**
     * 
     * @type {{ [key: string]: Schema; }}
     * @memberof Schema
     */
    patternProperties?: { [key: string]: Schema; };
    /**
     * 
     * @type {Array<Schema>}
     * @memberof Schema
     */
    prefixItems?: Array<Schema>;
    /**
     * 
     * @type {{ [key: string]: Schema; }}
     * @memberof Schema
     */
    properties?: { [key: string]: Schema; };
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    propertyNames?: Schema;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    readOnly?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Schema
     */
    required?: Array<string>;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    then?: Schema;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    type?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof Schema
     */
    types?: Set<string>;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    unevaluatedItems?: Schema;
    /**
     * 
     * @type {Schema}
     * @memberof Schema
     */
    unevaluatedProperties?: Schema;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    uniqueItems?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Schema
     */
    writeOnly?: boolean;
    /**
     * 
     * @type {XML}
     * @memberof Schema
     */
    xml?: XML;
}

/**
 * Check if a given object implements the Schema interface.
 */
export function instanceOfSchema(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SchemaFromJSON(json: any): Schema {
    return SchemaFromJSONTyped(json, false);
}

export function SchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'additionalItems': !exists(json, 'additionalItems') ? undefined : SchemaFromJSON(json['additionalItems']),
        'additionalProperties': !exists(json, 'additionalProperties') ? undefined : json['additionalProperties'],
        'allOf': !exists(json, 'allOf') ? undefined : ((json['allOf'] as Array<any>).map(SchemaFromJSON)),
        'anyOf': !exists(json, 'anyOf') ? undefined : ((json['anyOf'] as Array<any>).map(SchemaFromJSON)),
        'booleanSchemaValue': !exists(json, 'booleanSchemaValue') ? undefined : json['booleanSchemaValue'],
        '_const': !exists(json, 'const') ? undefined : json['const'],
        'contains': !exists(json, 'contains') ? undefined : SchemaFromJSON(json['contains']),
        'contentEncoding': !exists(json, 'contentEncoding') ? undefined : json['contentEncoding'],
        'contentMediaType': !exists(json, 'contentMediaType') ? undefined : json['contentMediaType'],
        'contentSchema': !exists(json, 'contentSchema') ? undefined : SchemaFromJSON(json['contentSchema']),
        '_default': !exists(json, 'default') ? undefined : json['default'],
        'dependentRequired': !exists(json, 'dependentRequired') ? undefined : json['dependentRequired'],
        'dependentSchemas': !exists(json, 'dependentSchemas') ? undefined : (mapValues(json['dependentSchemas'], SchemaFromJSON)),
        'deprecated': !exists(json, 'deprecated') ? undefined : json['deprecated'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'discriminator': !exists(json, 'discriminator') ? undefined : DiscriminatorFromJSON(json['discriminator']),
        '_else': !exists(json, 'else') ? undefined : SchemaFromJSON(json['else']),
        '_enum': !exists(json, 'enum') ? undefined : json['enum'],
        'example': !exists(json, 'example') ? undefined : json['example'],
        'exampleSetFlag': !exists(json, 'exampleSetFlag') ? undefined : json['exampleSetFlag'],
        'examples': !exists(json, 'examples') ? undefined : json['examples'],
        'exclusiveMaximum': !exists(json, 'exclusiveMaximum') ? undefined : json['exclusiveMaximum'],
        'exclusiveMaximumValue': !exists(json, 'exclusiveMaximumValue') ? undefined : json['exclusiveMaximumValue'],
        'exclusiveMinimum': !exists(json, 'exclusiveMinimum') ? undefined : json['exclusiveMinimum'],
        'exclusiveMinimumValue': !exists(json, 'exclusiveMinimumValue') ? undefined : json['exclusiveMinimumValue'],
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'externalDocs': !exists(json, 'externalDocs') ? undefined : ExternalDocumentationFromJSON(json['externalDocs']),
        'format': !exists(json, 'format') ? undefined : json['format'],
        'get$anchor': !exists(json, 'get$anchor') ? undefined : json['get$anchor'],
        'get$comment': !exists(json, 'get$comment') ? undefined : json['get$comment'],
        'get$id': !exists(json, 'get$id') ? undefined : json['get$id'],
        'get$ref': !exists(json, 'get$ref') ? undefined : json['get$ref'],
        'get$schema': !exists(json, 'get$schema') ? undefined : json['get$schema'],
        '_if': !exists(json, 'if') ? undefined : SchemaFromJSON(json['if']),
        'items': !exists(json, 'items') ? undefined : SchemaObjectFromJSON(json['items']),
        'jsonSchema': !exists(json, 'jsonSchema') ? undefined : json['jsonSchema'],
        'jsonSchemaImpl': !exists(json, 'jsonSchemaImpl') ? undefined : json['jsonSchemaImpl'],
        'maxContains': !exists(json, 'maxContains') ? undefined : json['maxContains'],
        'maxItems': !exists(json, 'maxItems') ? undefined : json['maxItems'],
        'maxLength': !exists(json, 'maxLength') ? undefined : json['maxLength'],
        'maxProperties': !exists(json, 'maxProperties') ? undefined : json['maxProperties'],
        'maximum': !exists(json, 'maximum') ? undefined : json['maximum'],
        'minContains': !exists(json, 'minContains') ? undefined : json['minContains'],
        'minItems': !exists(json, 'minItems') ? undefined : json['minItems'],
        'minLength': !exists(json, 'minLength') ? undefined : json['minLength'],
        'minProperties': !exists(json, 'minProperties') ? undefined : json['minProperties'],
        'minimum': !exists(json, 'minimum') ? undefined : json['minimum'],
        'multipleOf': !exists(json, 'multipleOf') ? undefined : json['multipleOf'],
        'not': !exists(json, 'not') ? undefined : SchemaFromJSON(json['not']),
        'nullable': !exists(json, 'nullable') ? undefined : json['nullable'],
        'oneOf': !exists(json, 'oneOf') ? undefined : ((json['oneOf'] as Array<any>).map(SchemaFromJSON)),
        'pattern': !exists(json, 'pattern') ? undefined : json['pattern'],
        'patternProperties': !exists(json, 'patternProperties') ? undefined : (mapValues(json['patternProperties'], SchemaFromJSON)),
        'prefixItems': !exists(json, 'prefixItems') ? undefined : ((json['prefixItems'] as Array<any>).map(SchemaFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : (mapValues(json['properties'], SchemaFromJSON)),
        'propertyNames': !exists(json, 'propertyNames') ? undefined : SchemaFromJSON(json['propertyNames']),
        'readOnly': !exists(json, 'readOnly') ? undefined : json['readOnly'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'then': !exists(json, 'then') ? undefined : SchemaFromJSON(json['then']),
        'title': !exists(json, 'title') ? undefined : json['title'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'types': !exists(json, 'types') ? undefined : json['types'],
        'unevaluatedItems': !exists(json, 'unevaluatedItems') ? undefined : SchemaFromJSON(json['unevaluatedItems']),
        'unevaluatedProperties': !exists(json, 'unevaluatedProperties') ? undefined : SchemaFromJSON(json['unevaluatedProperties']),
        'uniqueItems': !exists(json, 'uniqueItems') ? undefined : json['uniqueItems'],
        'writeOnly': !exists(json, 'writeOnly') ? undefined : json['writeOnly'],
        'xml': !exists(json, 'xml') ? undefined : XMLFromJSON(json['xml']),
    };
}

export function SchemaToJSON(value?: Schema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'additionalItems': SchemaToJSON(value.additionalItems),
        'additionalProperties': value.additionalProperties,
        'allOf': value.allOf === undefined ? undefined : ((value.allOf as Array<any>).map(SchemaToJSON)),
        'anyOf': value.anyOf === undefined ? undefined : ((value.anyOf as Array<any>).map(SchemaToJSON)),
        'booleanSchemaValue': value.booleanSchemaValue,
        'const': value._const,
        'contains': SchemaToJSON(value.contains),
        'contentEncoding': value.contentEncoding,
        'contentMediaType': value.contentMediaType,
        'contentSchema': SchemaToJSON(value.contentSchema),
        'default': value._default,
        'dependentRequired': value.dependentRequired,
        'dependentSchemas': value.dependentSchemas === undefined ? undefined : (mapValues(value.dependentSchemas, SchemaToJSON)),
        'deprecated': value.deprecated,
        'description': value.description,
        'discriminator': DiscriminatorToJSON(value.discriminator),
        'else': SchemaToJSON(value._else),
        'enum': value._enum,
        'example': value.example,
        'exampleSetFlag': value.exampleSetFlag,
        'examples': value.examples,
        'exclusiveMaximum': value.exclusiveMaximum,
        'exclusiveMaximumValue': value.exclusiveMaximumValue,
        'exclusiveMinimum': value.exclusiveMinimum,
        'exclusiveMinimumValue': value.exclusiveMinimumValue,
        'extensions': value.extensions,
        'externalDocs': ExternalDocumentationToJSON(value.externalDocs),
        'format': value.format,
        'get$anchor': value.get$anchor,
        'get$comment': value.get$comment,
        'get$id': value.get$id,
        'get$ref': value.get$ref,
        'get$schema': value.get$schema,
        'if': SchemaToJSON(value._if),
        'items': SchemaObjectToJSON(value.items),
        'jsonSchema': value.jsonSchema,
        'jsonSchemaImpl': value.jsonSchemaImpl,
        'maxContains': value.maxContains,
        'maxItems': value.maxItems,
        'maxLength': value.maxLength,
        'maxProperties': value.maxProperties,
        'maximum': value.maximum,
        'minContains': value.minContains,
        'minItems': value.minItems,
        'minLength': value.minLength,
        'minProperties': value.minProperties,
        'minimum': value.minimum,
        'multipleOf': value.multipleOf,
        'not': SchemaToJSON(value.not),
        'nullable': value.nullable,
        'oneOf': value.oneOf === undefined ? undefined : ((value.oneOf as Array<any>).map(SchemaToJSON)),
        'pattern': value.pattern,
        'patternProperties': value.patternProperties === undefined ? undefined : (mapValues(value.patternProperties, SchemaToJSON)),
        'prefixItems': value.prefixItems === undefined ? undefined : ((value.prefixItems as Array<any>).map(SchemaToJSON)),
        'properties': value.properties === undefined ? undefined : (mapValues(value.properties, SchemaToJSON)),
        'propertyNames': SchemaToJSON(value.propertyNames),
        'readOnly': value.readOnly,
        'required': value.required,
        'then': SchemaToJSON(value.then),
        'title': value.title,
        'type': value.type,
        'types': value.types === undefined ? undefined : Array.from(value.types as Set<any>),
        'unevaluatedItems': SchemaToJSON(value.unevaluatedItems),
        'unevaluatedProperties': SchemaToJSON(value.unevaluatedProperties),
        'uniqueItems': value.uniqueItems,
        'writeOnly': value.writeOnly,
        'xml': XMLToJSON(value.xml),
    };
}

