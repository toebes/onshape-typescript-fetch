/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMergeUpgradeType } from './BTMergeUpgradeType';
import {
    BTMergeUpgradeTypeFromJSON,
    BTMergeUpgradeTypeFromJSONTyped,
    BTMergeUpgradeTypeToJSON,
} from './BTMergeUpgradeType';
import type { BTPendingUpgradeInfo } from './BTPendingUpgradeInfo';
import {
    BTPendingUpgradeInfoFromJSON,
    BTPendingUpgradeInfoFromJSONTyped,
    BTPendingUpgradeInfoToJSON,
} from './BTPendingUpgradeInfo';

/**
 * 
 * @export
 * @interface BTMergeUpgradeInfo
 */
export interface BTMergeUpgradeInfo {
    /**
     * 
     * @type {BTPendingUpgradeInfo}
     * @memberof BTMergeUpgradeInfo
     */
    pendingSourceUpgrade?: BTPendingUpgradeInfo;
    /**
     * 
     * @type {BTPendingUpgradeInfo}
     * @memberof BTMergeUpgradeInfo
     */
    pendingTargetUpgrade?: BTPendingUpgradeInfo;
    /**
     * 
     * @type {number}
     * @memberof BTMergeUpgradeInfo
     */
    recommendedVersion?: number;
    /**
     * 
     * @type {BTMergeUpgradeType}
     * @memberof BTMergeUpgradeInfo
     */
    type?: BTMergeUpgradeType;
}

/**
 * Check if a given object implements the BTMergeUpgradeInfo interface.
 */
export function instanceOfBTMergeUpgradeInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTMergeUpgradeInfoFromJSON(json: any): BTMergeUpgradeInfo {
    return BTMergeUpgradeInfoFromJSONTyped(json, false);
}

export function BTMergeUpgradeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTMergeUpgradeInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pendingSourceUpgrade': !exists(json, 'pendingSourceUpgrade') ? undefined : BTPendingUpgradeInfoFromJSON(json['pendingSourceUpgrade']),
        'pendingTargetUpgrade': !exists(json, 'pendingTargetUpgrade') ? undefined : BTPendingUpgradeInfoFromJSON(json['pendingTargetUpgrade']),
        'recommendedVersion': !exists(json, 'recommendedVersion') ? undefined : json['recommendedVersion'],
        'type': !exists(json, 'type') ? undefined : BTMergeUpgradeTypeFromJSON(json['type']),
    };
}

export function BTMergeUpgradeInfoToJSON(value?: BTMergeUpgradeInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pendingSourceUpgrade': BTPendingUpgradeInfoToJSON(value.pendingSourceUpgrade),
        'pendingTargetUpgrade': BTPendingUpgradeInfoToJSON(value.pendingTargetUpgrade),
        'recommendedVersion': value.recommendedVersion,
        'type': BTMergeUpgradeTypeToJSON(value.type),
    };
}

