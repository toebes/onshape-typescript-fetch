/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMetadataObjectInfo } from './BTMetadataObjectInfo';
import {
    BTMetadataObjectInfoFromJSON,
    BTMetadataObjectInfoFromJSONTyped,
    BTMetadataObjectInfoToJSON,
 BTMetadataObjectInfoSuperToJSON,
} from './BTMetadataObjectInfo';
import type { BTMetadataObjectListInfoBTMetadataPartInfo } from './BTMetadataObjectListInfoBTMetadataPartInfo';
import {
    BTMetadataObjectListInfoBTMetadataPartInfoFromJSON,
    BTMetadataObjectListInfoBTMetadataPartInfoFromJSONTyped,
    BTMetadataObjectListInfoBTMetadataPartInfoToJSON,
} from './BTMetadataObjectListInfoBTMetadataPartInfo';
import type { BTMetadataPropertyInfo } from './BTMetadataPropertyInfo';
import {
    BTMetadataPropertyInfoFromJSON,
    BTMetadataPropertyInfoFromJSONTyped,
    BTMetadataPropertyInfoToJSON,
} from './BTMetadataPropertyInfo';
import type { BTThumbnailInfo } from './BTThumbnailInfo';
import {
    BTThumbnailInfoFromJSON,
    BTThumbnailInfoFromJSONTyped,
    BTThumbnailInfoToJSON,
} from './BTThumbnailInfo';

/**
 * 
 * @export
 * @interface BTMetadataElementInfo
 */
export interface BTMetadataElementInfo extends BTMetadataObjectInfo {
    /**
     * 
     * @type {string}
     * @memberof BTMetadataElementInfo
     */
    elementId?: string;
    /**
     * 
     * @type {number}
     * @memberof BTMetadataElementInfo
     */
    elementType?: number;
    /**
     * 
     * @type {string}
     * @memberof BTMetadataElementInfo
     */
    mimeType?: string;
    /**
     * 
     * @type {BTMetadataObjectListInfoBTMetadataPartInfo}
     * @memberof BTMetadataElementInfo
     */
    parts?: BTMetadataObjectListInfoBTMetadataPartInfo;
}

/**
 * Check if a given object implements the BTMetadataElementInfo interface.
 */
export function instanceOfBTMetadataElementInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTMetadataElementInfoFromJSON(json: any): BTMetadataElementInfo {
    return BTMetadataElementInfoFromJSONTyped(json, false);
}

export function BTMetadataElementInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTMetadataElementInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTMetadataObjectInfoFromJSONTyped(json, ignoreDiscriminator),
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementType': !exists(json, 'elementType') ? undefined : json['elementType'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'parts': !exists(json, 'parts') ? undefined : BTMetadataObjectListInfoBTMetadataPartInfoFromJSON(json['parts']),
    };
}

export function BTMetadataElementInfoToJSON(value?: BTMetadataElementInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTMetadataObjectInfoSuperToJSON(value),
        'elementId': value.elementId,
        'elementType': value.elementType,
        'mimeType': value.mimeType,
        'parts': BTMetadataObjectListInfoBTMetadataPartInfoToJSON(value.parts),
    };
}

