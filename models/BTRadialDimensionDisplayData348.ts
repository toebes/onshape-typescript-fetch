/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTBSMatrix386 } from './BTBSMatrix386';
import {
    BTBSMatrix386FromJSON,
    BTBSMatrix386FromJSONTyped,
    BTBSMatrix386ToJSON,
} from './BTBSMatrix386';
import type { BTDimensionDisplayData323 } from './BTDimensionDisplayData323';
import {
    BTDimensionDisplayData323FromJSON,
    BTDimensionDisplayData323FromJSONTyped,
    BTDimensionDisplayData323ToJSON,
 BTDimensionDisplayData323SuperToJSON,
} from './BTDimensionDisplayData323';
import type { BTMatrix3x3340 } from './BTMatrix3x3340';
import {
    BTMatrix3x3340FromJSON,
    BTMatrix3x3340FromJSONTyped,
    BTMatrix3x3340ToJSON,
} from './BTMatrix3x3340';
import type { GBTRadiusDisplay } from './GBTRadiusDisplay';
import {
    GBTRadiusDisplayFromJSON,
    GBTRadiusDisplayFromJSONTyped,
    GBTRadiusDisplayToJSON,
} from './GBTRadiusDisplay';
import type { GBTTolerancePrecision } from './GBTTolerancePrecision';
import {
    GBTTolerancePrecisionFromJSON,
    GBTTolerancePrecisionFromJSONTyped,
    GBTTolerancePrecisionToJSON,
} from './GBTTolerancePrecision';
import type { GBTToleranceType } from './GBTToleranceType';
import {
    GBTToleranceTypeFromJSON,
    GBTToleranceTypeFromJSONTyped,
    GBTToleranceTypeToJSON,
} from './GBTToleranceType';

/**
 * 
 * @export
 * @interface BTRadialDimensionDisplayData348
 */
export interface BTRadialDimensionDisplayData348 extends BTDimensionDisplayData323 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTRadialDimensionDisplayData348
     */
    btType?: string;
    /**
     * 
     * @type {number}
     * @memberof BTRadialDimensionDisplayData348
     */
    positionR?: number;
    /**
     * 
     * @type {number}
     * @memberof BTRadialDimensionDisplayData348
     */
    positionT?: number;
    /**
     * 
     * @type {GBTRadiusDisplay}
     * @memberof BTRadialDimensionDisplayData348
     */
    radiusDisplay?: GBTRadiusDisplay;
    /**
     * 
     * @type {boolean}
     * @memberof BTRadialDimensionDisplayData348
     */
    realDiameter?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTRadialDimensionDisplayData348
     */
    witnessEndPoint0r?: number;
    /**
     * 
     * @type {number}
     * @memberof BTRadialDimensionDisplayData348
     */
    witnessEndPoint0t?: number;
    /**
     * 
     * @type {number}
     * @memberof BTRadialDimensionDisplayData348
     */
    witnessEndPoint1r?: number;
    /**
     * 
     * @type {number}
     * @memberof BTRadialDimensionDisplayData348
     */
    witnessEndPoint1t?: number;
}

/**
 * Check if a given object implements the BTRadialDimensionDisplayData348 interface.
 */
export function instanceOfBTRadialDimensionDisplayData348(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTRadialDimensionDisplayData348FromJSON(json: any): BTRadialDimensionDisplayData348 {
    return BTRadialDimensionDisplayData348FromJSONTyped(json, false);
}

export function BTRadialDimensionDisplayData348FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTRadialDimensionDisplayData348 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTDimensionDisplayData323FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'positionR': !exists(json, 'positionR') ? undefined : json['positionR'],
        'positionT': !exists(json, 'positionT') ? undefined : json['positionT'],
        'radiusDisplay': !exists(json, 'radiusDisplay') ? undefined : GBTRadiusDisplayFromJSON(json['radiusDisplay']),
        'realDiameter': !exists(json, 'realDiameter') ? undefined : json['realDiameter'],
        'witnessEndPoint0r': !exists(json, 'witnessEndPoint0r') ? undefined : json['witnessEndPoint0r'],
        'witnessEndPoint0t': !exists(json, 'witnessEndPoint0t') ? undefined : json['witnessEndPoint0t'],
        'witnessEndPoint1r': !exists(json, 'witnessEndPoint1r') ? undefined : json['witnessEndPoint1r'],
        'witnessEndPoint1t': !exists(json, 'witnessEndPoint1t') ? undefined : json['witnessEndPoint1t'],
    };
}

export function BTRadialDimensionDisplayData348ToJSON(value?: BTRadialDimensionDisplayData348 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTDimensionDisplayData323SuperToJSON(value),
        'btType': value.btType,
        'positionR': value.positionR,
        'positionT': value.positionT,
        'radiusDisplay': GBTRadiusDisplayToJSON(value.radiusDisplay),
        'realDiameter': value.realDiameter,
        'witnessEndPoint0r': value.witnessEndPoint0r,
        'witnessEndPoint0t': value.witnessEndPoint0t,
        'witnessEndPoint1r': value.witnessEndPoint1r,
        'witnessEndPoint1t': value.witnessEndPoint1t,
    };
}

