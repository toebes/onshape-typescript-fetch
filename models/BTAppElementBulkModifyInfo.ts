/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTAppElementErrorCode } from './BTAppElementErrorCode';
import {
    BTAppElementErrorCodeFromJSON,
    BTAppElementErrorCodeFromJSONTyped,
    BTAppElementErrorCodeToJSON,
} from './BTAppElementErrorCode';
import type { BTAppElementModifyInfo } from './BTAppElementModifyInfo';
import {
    BTAppElementModifyInfoFromJSON,
    BTAppElementModifyInfoFromJSONTyped,
    BTAppElementModifyInfoToJSON,
} from './BTAppElementModifyInfo';

/**
 * 
 * @export
 * @interface BTAppElementBulkModifyInfo
 */
export interface BTAppElementBulkModifyInfo {
    /**
     * The latest change id for the element, after the edit was committed. Deprecated in favor of elementChangeResults.
     * @type {string}
     * @memberof BTAppElementBulkModifyInfo
     * @deprecated
     */
    changeId?: string;
    /**
     * The latest change id for the document, after the edit was committed.
     * @type {string}
     * @memberof BTAppElementBulkModifyInfo
     */
    documentMicroversionId?: string;
    /**
     * The results of editing each element affected by the edit.
     * @type {Array<BTAppElementModifyInfo>}
     * @memberof BTAppElementBulkModifyInfo
     */
    elementChangeResults?: Array<BTAppElementModifyInfo>;
    /**
     * The id of the edited element, if a single element was edited. Deprecated in favor of elementChangeResults.
     * @type {string}
     * @memberof BTAppElementBulkModifyInfo
     * @deprecated
     */
    elementId?: string;
    /**
     * The ids of the edited elements. Deprecated in favor of elementChangeResults.
     * @type {Array<string>}
     * @memberof BTAppElementBulkModifyInfo
     * @deprecated
     */
    elementIds?: Array<string>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     * @type {number}
     * @memberof BTAppElementBulkModifyInfo
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     * @type {string}
     * @memberof BTAppElementBulkModifyInfo
     */
    errorDescription?: string;
    /**
     * 
     * @type {BTAppElementErrorCode}
     * @memberof BTAppElementBulkModifyInfo
     */
    errorValue?: BTAppElementErrorCode;
    /**
     * The latest change id for the element, before the edit was made. Deprecated in favor of elementChangeResults.
     * @type {string}
     * @memberof BTAppElementBulkModifyInfo
     * @deprecated
     */
    parentChangeId?: string;
    /**
     * The latest change id for the document, before the edit was made.
     * @type {string}
     * @memberof BTAppElementBulkModifyInfo
     */
    parentDocumentMicroversionId?: string;
    /**
     * Whether the properties of any edited application element were changed after the transaction was created. Deprecated in favor of elementChangeResults.
     * @type {boolean}
     * @memberof BTAppElementBulkModifyInfo
     * @deprecated
     */
    propertyEditsMerged?: boolean;
    /**
     * The id of the transaction in which the edit was applied. Deprecated in favor of elementChangeResults.
     * @type {string}
     * @memberof BTAppElementBulkModifyInfo
     * @deprecated
     */
    transactionId?: string;
}

/**
 * Check if a given object implements the BTAppElementBulkModifyInfo interface.
 */
export function instanceOfBTAppElementBulkModifyInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTAppElementBulkModifyInfoFromJSON(json: any): BTAppElementBulkModifyInfo {
    return BTAppElementBulkModifyInfoFromJSONTyped(json, false);
}

export function BTAppElementBulkModifyInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAppElementBulkModifyInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changeId': !exists(json, 'changeId') ? undefined : json['changeId'],
        'documentMicroversionId': !exists(json, 'documentMicroversionId') ? undefined : json['documentMicroversionId'],
        'elementChangeResults': !exists(json, 'elementChangeResults') ? undefined : ((json['elementChangeResults'] as Array<any>).map(BTAppElementModifyInfoFromJSON)),
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementIds': !exists(json, 'elementIds') ? undefined : json['elementIds'],
        'errorCode': !exists(json, 'errorCode') ? undefined : json['errorCode'],
        'errorDescription': !exists(json, 'errorDescription') ? undefined : json['errorDescription'],
        'errorValue': !exists(json, 'errorValue') ? undefined : BTAppElementErrorCodeFromJSON(json['errorValue']),
        'parentChangeId': !exists(json, 'parentChangeId') ? undefined : json['parentChangeId'],
        'parentDocumentMicroversionId': !exists(json, 'parentDocumentMicroversionId') ? undefined : json['parentDocumentMicroversionId'],
        'propertyEditsMerged': !exists(json, 'propertyEditsMerged') ? undefined : json['propertyEditsMerged'],
        'transactionId': !exists(json, 'transactionId') ? undefined : json['transactionId'],
    };
}

export function BTAppElementBulkModifyInfoToJSON(value?: BTAppElementBulkModifyInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'changeId': value.changeId,
        'documentMicroversionId': value.documentMicroversionId,
        'elementChangeResults': value.elementChangeResults === undefined ? undefined : ((value.elementChangeResults as Array<any>).map(BTAppElementModifyInfoToJSON)),
        'elementId': value.elementId,
        'elementIds': value.elementIds,
        'errorCode': value.errorCode,
        'errorDescription': value.errorDescription,
        'errorValue': BTAppElementErrorCodeToJSON(value.errorValue),
        'parentChangeId': value.parentChangeId,
        'parentDocumentMicroversionId': value.parentDocumentMicroversionId,
        'propertyEditsMerged': value.propertyEditsMerged,
        'transactionId': value.transactionId,
    };
}

