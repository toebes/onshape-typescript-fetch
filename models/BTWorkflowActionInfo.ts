/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTTransitionType } from './BTTransitionType';
import {
    BTTransitionTypeFromJSON,
    BTTransitionTypeFromJSONTyped,
    BTTransitionTypeToJSON,
} from './BTTransitionType';

/**
 * 
 * @export
 * @interface BTWorkflowActionInfo
 */
export interface BTWorkflowActionInfo {
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowActionInfo
     */
    action?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowActionInfo
     */
    allowIfApprovers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowActionInfo
     */
    allowIfNoApprovers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowActionInfo
     */
    alwaysAllow?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowActionInfo
     */
    isAdminOverride?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowActionInfo
     */
    isApproverAction?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTWorkflowActionInfo
     */
    isCreatorOverride?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowActionInfo
     */
    label?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof BTWorkflowActionInfo
     */
    requiredProperties?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowActionInfo
     */
    tooltip?: string;
    /**
     * 
     * @type {BTTransitionType}
     * @memberof BTWorkflowActionInfo
     */
    type?: BTTransitionType;
    /**
     * 
     * @type {string}
     * @memberof BTWorkflowActionInfo
     */
    uiHint?: string;
}

/**
 * Check if a given object implements the BTWorkflowActionInfo interface.
 */
export function instanceOfBTWorkflowActionInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTWorkflowActionInfoFromJSON(json: any): BTWorkflowActionInfo {
    return BTWorkflowActionInfoFromJSONTyped(json, false);
}

export function BTWorkflowActionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTWorkflowActionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': !exists(json, 'action') ? undefined : json['action'],
        'allowIfApprovers': !exists(json, 'allowIfApprovers') ? undefined : json['allowIfApprovers'],
        'allowIfNoApprovers': !exists(json, 'allowIfNoApprovers') ? undefined : json['allowIfNoApprovers'],
        'alwaysAllow': !exists(json, 'alwaysAllow') ? undefined : json['alwaysAllow'],
        'isAdminOverride': !exists(json, 'isAdminOverride') ? undefined : json['isAdminOverride'],
        'isApproverAction': !exists(json, 'isApproverAction') ? undefined : json['isApproverAction'],
        'isCreatorOverride': !exists(json, 'isCreatorOverride') ? undefined : json['isCreatorOverride'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'requiredProperties': !exists(json, 'requiredProperties') ? undefined : json['requiredProperties'],
        'tooltip': !exists(json, 'tooltip') ? undefined : json['tooltip'],
        'type': !exists(json, 'type') ? undefined : BTTransitionTypeFromJSON(json['type']),
        'uiHint': !exists(json, 'uiHint') ? undefined : json['uiHint'],
    };
}

export function BTWorkflowActionInfoToJSON(value?: BTWorkflowActionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'allowIfApprovers': value.allowIfApprovers,
        'allowIfNoApprovers': value.allowIfNoApprovers,
        'alwaysAllow': value.alwaysAllow,
        'isAdminOverride': value.isAdminOverride,
        'isApproverAction': value.isApproverAction,
        'isCreatorOverride': value.isCreatorOverride,
        'label': value.label,
        'requiredProperties': value.requiredProperties === undefined ? undefined : Array.from(value.requiredProperties as Set<any>),
        'tooltip': value.tooltip,
        'type': BTTransitionTypeToJSON(value.type),
        'uiHint': value.uiHint,
    };
}

