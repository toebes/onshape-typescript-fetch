/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTCurveDescription1583 } from './BTCurveDescription1583';
import {
    BTCurveDescription1583FromJSON,
    BTCurveDescription1583FromJSONTyped,
    BTCurveDescription1583ToJSON,
 BTCurveDescription1583SuperToJSON,
} from './BTCurveDescription1583';
import type { BTVector3d389 } from './BTVector3d389';
import {
    BTVector3d389FromJSON,
    BTVector3d389FromJSONTyped,
    BTVector3d389ToJSON,
} from './BTVector3d389';
import type { GBTCurveTypeEnum } from './GBTCurveTypeEnum';
import {
    GBTCurveTypeEnumFromJSON,
    GBTCurveTypeEnumFromJSONTyped,
    GBTCurveTypeEnumToJSON,
} from './GBTCurveTypeEnum';

/**
 * 
 * @export
 * @interface BTSplineDescription2118
 */
export interface BTSplineDescription2118 extends BTCurveDescription1583 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTSplineDescription2118
     */
    btType?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof BTSplineDescription2118
     */
    controlPoints?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof BTSplineDescription2118
     */
    degree?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BTSplineDescription2118
     */
    isPeriodic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTSplineDescription2118
     */
    isRational?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof BTSplineDescription2118
     */
    knots?: Array<number>;
}

/**
 * Check if a given object implements the BTSplineDescription2118 interface.
 */
export function instanceOfBTSplineDescription2118(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTSplineDescription2118FromJSON(json: any): BTSplineDescription2118 {
    return BTSplineDescription2118FromJSONTyped(json, false);
}

export function BTSplineDescription2118FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTSplineDescription2118 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTCurveDescription1583FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'controlPoints': !exists(json, 'controlPoints') ? undefined : json['controlPoints'],
        'degree': !exists(json, 'degree') ? undefined : json['degree'],
        'isPeriodic': !exists(json, 'isPeriodic') ? undefined : json['isPeriodic'],
        'isRational': !exists(json, 'isRational') ? undefined : json['isRational'],
        'knots': !exists(json, 'knots') ? undefined : json['knots'],
    };
}

export function BTSplineDescription2118ToJSON(value?: BTSplineDescription2118 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTCurveDescription1583SuperToJSON(value),
        'btType': value.btType,
        'controlPoints': value.controlPoints,
        'degree': value.degree,
        'isPeriodic': value.isPeriodic,
        'isRational': value.isRational,
        'knots': value.knots,
    };
}

