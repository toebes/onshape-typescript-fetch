/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMNode19 } from './BTMNode19';
import {
    BTMNode19FromJSON,
    BTMNode19FromJSONTyped,
    BTMNode19ToJSON,
 BTMNode19SuperToJSON,
} from './BTMNode19';
import type { BTMParameter1 } from './BTMParameter1';
import {
    BTMParameter1FromJSON,
    BTMParameter1FromJSONTyped,
    BTMParameter1ToJSON,
} from './BTMParameter1';

import {
     BTMConfiguredValueByBoolean1501FromJSONTyped,
    BTMConfiguredValueByBoolean1501ToJSON,
     BTMConfiguredValueByEnum1923FromJSONTyped,
    BTMConfiguredValueByEnum1923ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTMConfiguredValue1341
 */
export interface BTMConfiguredValue1341 extends BTMNode19 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTMConfiguredValue1341
     */
    btType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTMConfiguredValue1341
     */
    configurationValueString?: string;
    /**
     * 
     * @type {BTMParameter1}
     * @memberof BTMConfiguredValue1341
     */
    value?: BTMParameter1;
}

/**
 * Check if a given object implements the BTMConfiguredValue1341 interface.
 */
export function instanceOfBTMConfiguredValue1341(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTMConfiguredValue1341FromJSON(json: any): BTMConfiguredValue1341 {
    return BTMConfiguredValue1341FromJSONTyped(json, false);
}

export function BTMConfiguredValue1341FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTMConfiguredValue1341 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTMConfiguredValueByBoolean-1501') {
            return BTMConfiguredValueByBoolean1501FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTMConfiguredValueByEnum-1923') {
            return BTMConfiguredValueByEnum1923FromJSONTyped(json, true);
        }
    }
    return {
        ...BTMNode19FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'configurationValueString': !exists(json, 'configurationValueString') ? undefined : json['configurationValueString'],
        'value': !exists(json, 'value') ? undefined : BTMParameter1FromJSON(json['value']),
    };
}

export function BTMConfiguredValue1341SuperToJSON(value?: BTMConfiguredValue1341 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTMNode19SuperToJSON(value),
        'btType': value.btType,
        'configurationValueString': value.configurationValueString,
        'value': BTMParameter1ToJSON(value.value),
    };
}



export function BTMConfiguredValue1341ToJSON(value?: BTMConfiguredValue1341 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTMConfiguredValueByBoolean-1501') {
        return BTMConfiguredValueByBoolean1501ToJSON(value);
    }
    if (value.btType === 'BTMConfiguredValueByEnum-1923') {
        return BTMConfiguredValueByEnum1923ToJSON(value);
    }
    return BTMConfiguredValue1341SuperToJSON(value);
}
