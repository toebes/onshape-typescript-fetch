/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTPIdentifier8 } from './BTPIdentifier8';
import {
    BTPIdentifier8FromJSON,
    BTPIdentifier8FromJSONTyped,
    BTPIdentifier8ToJSON,
} from './BTPIdentifier8';
import type { BTPNode7 } from './BTPNode7';
import {
    BTPNode7FromJSON,
    BTPNode7FromJSONTyped,
    BTPNode7ToJSON,
 BTPNode7SuperToJSON,
} from './BTPNode7';
import type { BTPSpace10 } from './BTPSpace10';
import {
    BTPSpace10FromJSON,
    BTPSpace10FromJSONTyped,
    BTPSpace10ToJSON,
} from './BTPSpace10';
import type { BTPTypeName290 } from './BTPTypeName290';
import {
    BTPTypeName290FromJSON,
    BTPTypeName290FromJSONTyped,
    BTPTypeName290ToJSON,
} from './BTPTypeName290';
import type { GBTPDefinitionType } from './GBTPDefinitionType';
import {
    GBTPDefinitionTypeFromJSON,
    GBTPDefinitionTypeFromJSONTyped,
    GBTPDefinitionTypeToJSON,
} from './GBTPDefinitionType';
import type { GBTPType } from './GBTPType';
import {
    GBTPTypeFromJSON,
    GBTPTypeFromJSONTyped,
    GBTPTypeToJSON,
} from './GBTPType';

/**
 * 
 * @export
 * @interface BTPArgumentDeclaration232
 */
export interface BTPArgumentDeclaration232 extends BTPNode7 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTPArgumentDeclaration232
     */
    btType?: string;
    /**
     * 
     * @type {BTPIdentifier8}
     * @memberof BTPArgumentDeclaration232
     */
    identifier?: BTPIdentifier8;
    /**
     * 
     * @type {BTPIdentifier8}
     * @memberof BTPArgumentDeclaration232
     */
    name?: BTPIdentifier8;
    /**
     * 
     * @type {GBTPType}
     * @memberof BTPArgumentDeclaration232
     */
    standardType?: GBTPType;
    /**
     * 
     * @type {BTPTypeName290}
     * @memberof BTPArgumentDeclaration232
     */
    type?: BTPTypeName290;
    /**
     * 
     * @type {string}
     * @memberof BTPArgumentDeclaration232
     */
    typeName?: string;
}

/**
 * Check if a given object implements the BTPArgumentDeclaration232 interface.
 */
export function instanceOfBTPArgumentDeclaration232(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPArgumentDeclaration232FromJSON(json: any): BTPArgumentDeclaration232 {
    return BTPArgumentDeclaration232FromJSONTyped(json, false);
}

export function BTPArgumentDeclaration232FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPArgumentDeclaration232 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTPNode7FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'identifier': !exists(json, 'identifier') ? undefined : BTPIdentifier8FromJSON(json['identifier']),
        'name': !exists(json, 'name') ? undefined : BTPIdentifier8FromJSON(json['name']),
        'standardType': !exists(json, 'standardType') ? undefined : GBTPTypeFromJSON(json['standardType']),
        'type': !exists(json, 'type') ? undefined : BTPTypeName290FromJSON(json['type']),
        'typeName': !exists(json, 'typeName') ? undefined : json['typeName'],
    };
}

export function BTPArgumentDeclaration232ToJSON(value?: BTPArgumentDeclaration232 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTPNode7SuperToJSON(value),
        'btType': value.btType,
        'identifier': BTPIdentifier8ToJSON(value.identifier),
        'name': BTPIdentifier8ToJSON(value.name),
        'standardType': GBTPTypeToJSON(value.standardType),
        'type': BTPTypeName290ToJSON(value.type),
        'typeName': value.typeName,
    };
}

