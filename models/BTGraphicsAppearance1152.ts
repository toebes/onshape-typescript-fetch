/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GBTAppearanceType } from './GBTAppearanceType';
import {
    GBTAppearanceTypeFromJSON,
    GBTAppearanceTypeFromJSONTyped,
    GBTAppearanceTypeToJSON,
} from './GBTAppearanceType';

import {
     BTGeneratedGraphicsAppearance4159FromJSONTyped,
    BTGeneratedGraphicsAppearance4159ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTGraphicsAppearance1152
 */
export interface BTGraphicsAppearance1152 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTGraphicsAppearance1152
     */
    btType?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTGraphicsAppearance1152
     */
    color?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof BTGraphicsAppearance1152
     */
    nonTrivial?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTGraphicsAppearance1152
     */
    opacity?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BTGraphicsAppearance1152
     */
    reset?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTGraphicsAppearance1152
     */
    rgbaColor?: Array<string>;
    /**
     * 
     * @type {GBTAppearanceType}
     * @memberof BTGraphicsAppearance1152
     */
    type?: GBTAppearanceType;
    /**
     * 
     * @type {boolean}
     * @memberof BTGraphicsAppearance1152
     */
    usableAppearance?: boolean;
}

/**
 * Check if a given object implements the BTGraphicsAppearance1152 interface.
 */
export function instanceOfBTGraphicsAppearance1152(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTGraphicsAppearance1152FromJSON(json: any): BTGraphicsAppearance1152 {
    return BTGraphicsAppearance1152FromJSONTyped(json, false);
}

export function BTGraphicsAppearance1152FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTGraphicsAppearance1152 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTGeneratedGraphicsAppearance-4159') {
            return BTGeneratedGraphicsAppearance4159FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'nonTrivial': !exists(json, 'nonTrivial') ? undefined : json['nonTrivial'],
        'opacity': !exists(json, 'opacity') ? undefined : json['opacity'],
        'reset': !exists(json, 'reset') ? undefined : json['reset'],
        'rgbaColor': !exists(json, 'rgbaColor') ? undefined : json['rgbaColor'],
        'type': !exists(json, 'type') ? undefined : GBTAppearanceTypeFromJSON(json['type']),
        'usableAppearance': !exists(json, 'usableAppearance') ? undefined : json['usableAppearance'],
    };
}

export function BTGraphicsAppearance1152SuperToJSON(value?: BTGraphicsAppearance1152 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'color': value.color,
        'nonTrivial': value.nonTrivial,
        'opacity': value.opacity,
        'reset': value.reset,
        'rgbaColor': value.rgbaColor,
        'type': GBTAppearanceTypeToJSON(value.type),
        'usableAppearance': value.usableAppearance,
    };
}



export function BTGraphicsAppearance1152ToJSON(value?: BTGraphicsAppearance1152 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTGeneratedGraphicsAppearance-4159') {
        return BTGeneratedGraphicsAppearance4159ToJSON(value);
    }
    return BTGraphicsAppearance1152SuperToJSON(value);
}
