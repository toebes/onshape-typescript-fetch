/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GBTWeldJointType } from './GBTWeldJointType';
import {
    GBTWeldJointTypeFromJSON,
    GBTWeldJointTypeFromJSONTyped,
    GBTWeldJointTypeToJSON,
} from './GBTWeldJointType';
import type { GBTWeldType } from './GBTWeldType';
import {
    GBTWeldTypeFromJSON,
    GBTWeldTypeFromJSONTyped,
    GBTWeldTypeToJSON,
} from './GBTWeldType';

/**
 * 
 * @export
 * @interface BTAnnotationWeldDisplayData4919AllOf
 */
export interface BTAnnotationWeldDisplayData4919AllOf {
    /**
     * 
     * @type {string}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    btType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    isoFlip?: boolean;
    /**
     * 
     * @type {GBTWeldJointType}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    jointType?: GBTWeldJointType;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    lowerGroove?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    lowerRootOpening?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    lowerValueFour?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    lowerValueOne?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    lowerValueThree?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    lowerValueTwo?: number;
    /**
     * 
     * @type {GBTWeldType}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    lowerWeldType?: GBTWeldType;
    /**
     * 
     * @type {string}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    reference?: string;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    upperGroove?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    upperRootOpening?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    upperValueFour?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    upperValueOne?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    upperValueThree?: number;
    /**
     * 
     * @type {number}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    upperValueTwo?: number;
    /**
     * 
     * @type {GBTWeldType}
     * @memberof BTAnnotationWeldDisplayData4919AllOf
     */
    upperWeldType?: GBTWeldType;
}

/**
 * Check if a given object implements the BTAnnotationWeldDisplayData4919AllOf interface.
 */
export function instanceOfBTAnnotationWeldDisplayData4919AllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTAnnotationWeldDisplayData4919AllOfFromJSON(json: any): BTAnnotationWeldDisplayData4919AllOf {
    return BTAnnotationWeldDisplayData4919AllOfFromJSONTyped(json, false);
}

export function BTAnnotationWeldDisplayData4919AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAnnotationWeldDisplayData4919AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'isoFlip': !exists(json, 'isoFlip') ? undefined : json['isoFlip'],
        'jointType': !exists(json, 'jointType') ? undefined : GBTWeldJointTypeFromJSON(json['jointType']),
        'lowerGroove': !exists(json, 'lowerGroove') ? undefined : json['lowerGroove'],
        'lowerRootOpening': !exists(json, 'lowerRootOpening') ? undefined : json['lowerRootOpening'],
        'lowerValueFour': !exists(json, 'lowerValueFour') ? undefined : json['lowerValueFour'],
        'lowerValueOne': !exists(json, 'lowerValueOne') ? undefined : json['lowerValueOne'],
        'lowerValueThree': !exists(json, 'lowerValueThree') ? undefined : json['lowerValueThree'],
        'lowerValueTwo': !exists(json, 'lowerValueTwo') ? undefined : json['lowerValueTwo'],
        'lowerWeldType': !exists(json, 'lowerWeldType') ? undefined : GBTWeldTypeFromJSON(json['lowerWeldType']),
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'upperGroove': !exists(json, 'upperGroove') ? undefined : json['upperGroove'],
        'upperRootOpening': !exists(json, 'upperRootOpening') ? undefined : json['upperRootOpening'],
        'upperValueFour': !exists(json, 'upperValueFour') ? undefined : json['upperValueFour'],
        'upperValueOne': !exists(json, 'upperValueOne') ? undefined : json['upperValueOne'],
        'upperValueThree': !exists(json, 'upperValueThree') ? undefined : json['upperValueThree'],
        'upperValueTwo': !exists(json, 'upperValueTwo') ? undefined : json['upperValueTwo'],
        'upperWeldType': !exists(json, 'upperWeldType') ? undefined : GBTWeldTypeFromJSON(json['upperWeldType']),
    };
}

export function BTAnnotationWeldDisplayData4919AllOfToJSON(value?: BTAnnotationWeldDisplayData4919AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'isoFlip': value.isoFlip,
        'jointType': GBTWeldJointTypeToJSON(value.jointType),
        'lowerGroove': value.lowerGroove,
        'lowerRootOpening': value.lowerRootOpening,
        'lowerValueFour': value.lowerValueFour,
        'lowerValueOne': value.lowerValueOne,
        'lowerValueThree': value.lowerValueThree,
        'lowerValueTwo': value.lowerValueTwo,
        'lowerWeldType': GBTWeldTypeToJSON(value.lowerWeldType),
        'reference': value.reference,
        'upperGroove': value.upperGroove,
        'upperRootOpening': value.upperRootOpening,
        'upperValueFour': value.upperValueFour,
        'upperValueOne': value.upperValueOne,
        'upperValueThree': value.upperValueThree,
        'upperValueTwo': value.upperValueTwo,
        'upperWeldType': GBTWeldTypeToJSON(value.upperWeldType),
    };
}

