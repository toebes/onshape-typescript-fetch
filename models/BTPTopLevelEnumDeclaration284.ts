/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTPAnnotation231 } from './BTPAnnotation231';
import {
    BTPAnnotation231FromJSON,
    BTPAnnotation231FromJSONTyped,
    BTPAnnotation231ToJSON,
} from './BTPAnnotation231';
import type { BTPArgumentDeclaration232 } from './BTPArgumentDeclaration232';
import {
    BTPArgumentDeclaration232FromJSON,
    BTPArgumentDeclaration232FromJSONTyped,
    BTPArgumentDeclaration232ToJSON,
} from './BTPArgumentDeclaration232';
import type { BTPIdentifier8 } from './BTPIdentifier8';
import {
    BTPIdentifier8FromJSON,
    BTPIdentifier8FromJSONTyped,
    BTPIdentifier8ToJSON,
} from './BTPIdentifier8';
import type { BTPLiteralNumber258 } from './BTPLiteralNumber258';
import {
    BTPLiteralNumber258FromJSON,
    BTPLiteralNumber258FromJSONTyped,
    BTPLiteralNumber258ToJSON,
} from './BTPLiteralNumber258';
import type { BTPSpace10 } from './BTPSpace10';
import {
    BTPSpace10FromJSON,
    BTPSpace10FromJSONTyped,
    BTPSpace10ToJSON,
} from './BTPSpace10';
import type { BTPTopLevelTypeDeclaration287 } from './BTPTopLevelTypeDeclaration287';
import {
    BTPTopLevelTypeDeclaration287FromJSON,
    BTPTopLevelTypeDeclaration287FromJSONTyped,
    BTPTopLevelTypeDeclaration287ToJSON,
 BTPTopLevelTypeDeclaration287SuperToJSON,
} from './BTPTopLevelTypeDeclaration287';
import type { GBTPDefinitionType } from './GBTPDefinitionType';
import {
    GBTPDefinitionTypeFromJSON,
    GBTPDefinitionTypeFromJSONTyped,
    GBTPDefinitionTypeToJSON,
} from './GBTPDefinitionType';

/**
 * 
 * @export
 * @interface BTPTopLevelEnumDeclaration284
 */
export interface BTPTopLevelEnumDeclaration284 extends BTPTopLevelTypeDeclaration287 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTPTopLevelEnumDeclaration284
     */
    btType?: string;
    /**
     * 
     * @type {Array<BTPAnnotation231>}
     * @memberof BTPTopLevelEnumDeclaration284
     */
    annotations?: Array<BTPAnnotation231>;
    /**
     * 
     * @type {BTPSpace10}
     * @memberof BTPTopLevelEnumDeclaration284
     */
    spaceInEmptyList?: BTPSpace10;
    /**
     * 
     * @type {boolean}
     * @memberof BTPTopLevelEnumDeclaration284
     */
    trailingComma?: boolean;
    /**
     * 
     * @type {Array<BTPIdentifier8>}
     * @memberof BTPTopLevelEnumDeclaration284
     */
    values?: Array<BTPIdentifier8>;
}

/**
 * Check if a given object implements the BTPTopLevelEnumDeclaration284 interface.
 */
export function instanceOfBTPTopLevelEnumDeclaration284(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPTopLevelEnumDeclaration284FromJSON(json: any): BTPTopLevelEnumDeclaration284 {
    return BTPTopLevelEnumDeclaration284FromJSONTyped(json, false);
}

export function BTPTopLevelEnumDeclaration284FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPTopLevelEnumDeclaration284 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTPTopLevelTypeDeclaration287FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'annotations': !exists(json, 'annotations') ? undefined : ((json['annotations'] as Array<any>).map(BTPAnnotation231FromJSON)),
        'spaceInEmptyList': !exists(json, 'spaceInEmptyList') ? undefined : BTPSpace10FromJSON(json['spaceInEmptyList']),
        'trailingComma': !exists(json, 'trailingComma') ? undefined : json['trailingComma'],
        'values': !exists(json, 'values') ? undefined : ((json['values'] as Array<any>).map(BTPIdentifier8FromJSON)),
    };
}

export function BTPTopLevelEnumDeclaration284ToJSON(value?: BTPTopLevelEnumDeclaration284 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTPTopLevelTypeDeclaration287SuperToJSON(value),
        'btType': value.btType,
        'annotations': value.annotations === undefined ? undefined : ((value.annotations as Array<any>).map(BTPAnnotation231ToJSON)),
        'spaceInEmptyList': BTPSpace10ToJSON(value.spaceInEmptyList),
        'trailingComma': value.trailingComma,
        'values': value.values === undefined ? undefined : ((value.values as Array<any>).map(BTPIdentifier8ToJSON)),
    };
}

