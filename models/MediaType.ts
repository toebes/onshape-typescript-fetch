/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Encoding } from './Encoding';
import {
    EncodingFromJSON,
    EncodingFromJSONTyped,
    EncodingToJSON,
} from './Encoding';
import type { Example } from './Example';
import {
    ExampleFromJSON,
    ExampleFromJSONTyped,
    ExampleToJSON,
} from './Example';
import type { Schema } from './Schema';
import {
    SchemaFromJSON,
    SchemaFromJSONTyped,
    SchemaToJSON,
} from './Schema';

/**
 * 
 * @export
 * @interface MediaType
 */
export interface MediaType {
    /**
     * 
     * @type {{ [key: string]: Encoding; }}
     * @memberof MediaType
     */
    encoding?: { [key: string]: Encoding; };
    /**
     * 
     * @type {object}
     * @memberof MediaType
     */
    example?: object;
    /**
     * 
     * @type {boolean}
     * @memberof MediaType
     */
    exampleSetFlag?: boolean;
    /**
     * 
     * @type {{ [key: string]: Example; }}
     * @memberof MediaType
     */
    examples?: { [key: string]: Example; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MediaType
     */
    extensions?: { [key: string]: object; };
    /**
     * 
     * @type {Schema}
     * @memberof MediaType
     */
    schema?: Schema;
}

/**
 * Check if a given object implements the MediaType interface.
 */
export function instanceOfMediaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MediaTypeFromJSON(json: any): MediaType {
    return MediaTypeFromJSONTyped(json, false);
}

export function MediaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'encoding': !exists(json, 'encoding') ? undefined : (mapValues(json['encoding'], EncodingFromJSON)),
        'example': !exists(json, 'example') ? undefined : json['example'],
        'exampleSetFlag': !exists(json, 'exampleSetFlag') ? undefined : json['exampleSetFlag'],
        'examples': !exists(json, 'examples') ? undefined : (mapValues(json['examples'], ExampleFromJSON)),
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'schema': !exists(json, 'schema') ? undefined : SchemaFromJSON(json['schema']),
    };
}

export function MediaTypeToJSON(value?: MediaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'encoding': value.encoding === undefined ? undefined : (mapValues(value.encoding, EncodingToJSON)),
        'example': value.example,
        'exampleSetFlag': value.exampleSetFlag,
        'examples': value.examples === undefined ? undefined : (mapValues(value.examples, ExampleToJSON)),
        'extensions': value.extensions,
        'schema': SchemaToJSON(value.schema),
    };
}

