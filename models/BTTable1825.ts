/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTTableColumnInfo1222 } from './BTTableColumnInfo1222';
import {
    BTTableColumnInfo1222FromJSON,
    BTTableColumnInfo1222FromJSONTyped,
    BTTableColumnInfo1222ToJSON,
} from './BTTableColumnInfo1222';
import type { BTTableRow1054 } from './BTTableRow1054';
import {
    BTTableRow1054FromJSON,
    BTTableRow1054FromJSONTyped,
    BTTableRow1054ToJSON,
} from './BTTableRow1054';
import type { BTTableSortOrder4371 } from './BTTableSortOrder4371';
import {
    BTTableSortOrder4371FromJSON,
    BTTableSortOrder4371FromJSONTyped,
    BTTableSortOrder4371ToJSON,
} from './BTTableSortOrder4371';

import {
     BTAssemblySimulationStructuralLoadsTable3867FromJSONTyped,
    BTAssemblySimulationStructuralLoadsTable3867ToJSON,
     BTAssemblySimulationTable3236FromJSONTyped,
    BTAssemblySimulationTable3236ToJSON,
     BTBillOfMaterialsTable1073FromJSONTyped,
    BTBillOfMaterialsTable1073ToJSON,
     BTConfiguredPartPropertiesTable2740FromJSONTyped,
    BTConfiguredPartPropertiesTable2740ToJSON,
     BTFSTable953FromJSONTyped,
    BTFSTable953ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTTable1825
 */
export interface BTTable1825 {
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof BTTable1825
     */
    allRowValues?: Array<Array<string>>;
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTTable1825
     */
    btType?: string;
    /**
     * 
     * @type {number}
     * @memberof BTTable1825
     */
    columnCount?: number;
    /**
     * 
     * @type {number}
     * @memberof BTTable1825
     */
    frozenColumns?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BTTable1825
     */
    isFailed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTTable1825
     */
    nodeId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTTable1825
     */
    readOnly?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTTable1825
     */
    rowCount?: number;
    /**
     * 
     * @type {BTTableSortOrder4371}
     * @memberof BTTable1825
     */
    sortOrder?: BTTableSortOrder4371;
    /**
     * 
     * @type {Array<BTTableColumnInfo1222>}
     * @memberof BTTable1825
     */
    tableColumns?: Array<BTTableColumnInfo1222>;
    /**
     * 
     * @type {string}
     * @memberof BTTable1825
     */
    tableId?: string;
    /**
     * 
     * @type {Array<BTTableRow1054>}
     * @memberof BTTable1825
     */
    tableRows?: Array<BTTableRow1054>;
    /**
     * 
     * @type {string}
     * @memberof BTTable1825
     */
    title?: string;
}

/**
 * Check if a given object implements the BTTable1825 interface.
 */
export function instanceOfBTTable1825(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTTable1825FromJSON(json: any): BTTable1825 {
    return BTTable1825FromJSONTyped(json, false);
}

export function BTTable1825FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTTable1825 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTAssemblySimulationStructuralLoadsTable-3867') {
            return BTAssemblySimulationStructuralLoadsTable3867FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTAssemblySimulationTable-3236') {
            return BTAssemblySimulationTable3236FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTBillOfMaterialsTable-1073') {
            return BTBillOfMaterialsTable1073FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTConfiguredPartPropertiesTable-2740') {
            return BTConfiguredPartPropertiesTable2740FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTFSTable-953') {
            return BTFSTable953FromJSONTyped(json, true);
        }
    }
    return {
        
        'allRowValues': !exists(json, 'allRowValues') ? undefined : json['allRowValues'],
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'columnCount': !exists(json, 'columnCount') ? undefined : json['columnCount'],
        'frozenColumns': !exists(json, 'frozenColumns') ? undefined : json['frozenColumns'],
        'isFailed': !exists(json, 'isFailed') ? undefined : json['isFailed'],
        'nodeId': !exists(json, 'nodeId') ? undefined : json['nodeId'],
        'readOnly': !exists(json, 'readOnly') ? undefined : json['readOnly'],
        'rowCount': !exists(json, 'rowCount') ? undefined : json['rowCount'],
        'sortOrder': !exists(json, 'sortOrder') ? undefined : BTTableSortOrder4371FromJSON(json['sortOrder']),
        'tableColumns': !exists(json, 'tableColumns') ? undefined : ((json['tableColumns'] as Array<any>).map(BTTableColumnInfo1222FromJSON)),
        'tableId': !exists(json, 'tableId') ? undefined : json['tableId'],
        'tableRows': !exists(json, 'tableRows') ? undefined : ((json['tableRows'] as Array<any>).map(BTTableRow1054FromJSON)),
        'title': !exists(json, 'title') ? undefined : json['title'],
    };
}

export function BTTable1825SuperToJSON(value?: BTTable1825 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allRowValues': value.allRowValues,
        'btType': value.btType,
        'columnCount': value.columnCount,
        'frozenColumns': value.frozenColumns,
        'isFailed': value.isFailed,
        'nodeId': value.nodeId,
        'readOnly': value.readOnly,
        'rowCount': value.rowCount,
        'sortOrder': BTTableSortOrder4371ToJSON(value.sortOrder),
        'tableColumns': value.tableColumns === undefined ? undefined : ((value.tableColumns as Array<any>).map(BTTableColumnInfo1222ToJSON)),
        'tableId': value.tableId,
        'tableRows': value.tableRows === undefined ? undefined : ((value.tableRows as Array<any>).map(BTTableRow1054ToJSON)),
        'title': value.title,
    };
}



export function BTTable1825ToJSON(value?: BTTable1825 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTAssemblySimulationStructuralLoadsTable-3867') {
        return BTAssemblySimulationStructuralLoadsTable3867ToJSON(value);
    }
    if (value.btType === 'BTAssemblySimulationTable-3236') {
        return BTAssemblySimulationTable3236ToJSON(value);
    }
    if (value.btType === 'BTBillOfMaterialsTable-1073') {
        return BTBillOfMaterialsTable1073ToJSON(value);
    }
    if (value.btType === 'BTConfiguredPartPropertiesTable-2740') {
        return BTConfiguredPartPropertiesTable2740ToJSON(value);
    }
    if (value.btType === 'BTFSTable-953') {
        return BTFSTable953ToJSON(value);
    }
    return BTTable1825SuperToJSON(value);
}
