/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTPIdentifier8 } from './BTPIdentifier8';
import {
    BTPIdentifier8FromJSON,
    BTPIdentifier8FromJSONTyped,
    BTPIdentifier8ToJSON,
} from './BTPIdentifier8';
import type { BTPModuleId235 } from './BTPModuleId235';
import {
    BTPModuleId235FromJSON,
    BTPModuleId235FromJSONTyped,
    BTPModuleId235ToJSON,
} from './BTPModuleId235';
import type { BTPSpace10 } from './BTPSpace10';
import {
    BTPSpace10FromJSON,
    BTPSpace10FromJSONTyped,
    BTPSpace10ToJSON,
} from './BTPSpace10';

/**
 * 
 * @export
 * @interface BTPTopLevelImport285AllOf
 */
export interface BTPTopLevelImport285AllOf {
    /**
     * 
     * @type {string}
     * @memberof BTPTopLevelImport285AllOf
     */
    btType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPTopLevelImport285AllOf
     */
    combinedNamespacePathAndVersion?: string;
    /**
     * Element microversion that is being imported.
     * @type {string}
     * @memberof BTPTopLevelImport285AllOf
     */
    importMicroversion?: string;
    /**
     * 
     * @type {BTPModuleId235}
     * @memberof BTPTopLevelImport285AllOf
     */
    moduleId?: BTPModuleId235;
    /**
     * 
     * @type {Array<BTPIdentifier8>}
     * @memberof BTPTopLevelImport285AllOf
     */
    namespace?: Array<BTPIdentifier8>;
    /**
     * 
     * @type {string}
     * @memberof BTPTopLevelImport285AllOf
     */
    namespaceString?: string;
    /**
     * 
     * @type {BTPSpace10}
     * @memberof BTPTopLevelImport285AllOf
     */
    spaceBeforeImport?: BTPSpace10;
}

/**
 * Check if a given object implements the BTPTopLevelImport285AllOf interface.
 */
export function instanceOfBTPTopLevelImport285AllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPTopLevelImport285AllOfFromJSON(json: any): BTPTopLevelImport285AllOf {
    return BTPTopLevelImport285AllOfFromJSONTyped(json, false);
}

export function BTPTopLevelImport285AllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPTopLevelImport285AllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'combinedNamespacePathAndVersion': !exists(json, 'combinedNamespacePathAndVersion') ? undefined : json['combinedNamespacePathAndVersion'],
        'importMicroversion': !exists(json, 'importMicroversion') ? undefined : json['importMicroversion'],
        'moduleId': !exists(json, 'moduleId') ? undefined : BTPModuleId235FromJSON(json['moduleId']),
        'namespace': !exists(json, 'namespace') ? undefined : ((json['namespace'] as Array<any>).map(BTPIdentifier8FromJSON)),
        'namespaceString': !exists(json, 'namespaceString') ? undefined : json['namespaceString'],
        'spaceBeforeImport': !exists(json, 'spaceBeforeImport') ? undefined : BTPSpace10FromJSON(json['spaceBeforeImport']),
    };
}

export function BTPTopLevelImport285AllOfToJSON(value?: BTPTopLevelImport285AllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'combinedNamespacePathAndVersion': value.combinedNamespacePathAndVersion,
        'importMicroversion': value.importMicroversion,
        'moduleId': BTPModuleId235ToJSON(value.moduleId),
        'namespace': value.namespace === undefined ? undefined : ((value.namespace as Array<any>).map(BTPIdentifier8ToJSON)),
        'namespaceString': value.namespaceString,
        'spaceBeforeImport': BTPSpace10ToJSON(value.spaceBeforeImport),
    };
}

