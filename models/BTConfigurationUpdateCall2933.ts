/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMConfigurationParameter819 } from './BTMConfigurationParameter819';
import {
    BTMConfigurationParameter819FromJSON,
    BTMConfigurationParameter819FromJSONTyped,
    BTMConfigurationParameter819ToJSON,
} from './BTMConfigurationParameter819';
import type { BTMParameter1 } from './BTMParameter1';
import {
    BTMParameter1FromJSON,
    BTMParameter1FromJSONTyped,
    BTMParameter1ToJSON,
} from './BTMParameter1';

/**
 * 
 * @export
 * @interface BTConfigurationUpdateCall2933
 */
export interface BTConfigurationUpdateCall2933 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTConfigurationUpdateCall2933
     */
    btType?: string;
    /**
     * 
     * @type {Array<BTMConfigurationParameter819>}
     * @memberof BTConfigurationUpdateCall2933
     */
    configurationParameters?: Array<BTMConfigurationParameter819>;
    /**
     * 
     * @type {Array<BTMParameter1>}
     * @memberof BTConfigurationUpdateCall2933
     */
    currentConfiguration?: Array<BTMParameter1>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     * @type {number}
     * @memberof BTConfigurationUpdateCall2933
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     * @type {boolean}
     * @memberof BTConfigurationUpdateCall2933
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     * @type {boolean}
     * @memberof BTConfigurationUpdateCall2933
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     * @type {string}
     * @memberof BTConfigurationUpdateCall2933
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     * @type {string}
     * @memberof BTConfigurationUpdateCall2933
     */
    sourceMicroversion?: string;
}

/**
 * Check if a given object implements the BTConfigurationUpdateCall2933 interface.
 */
export function instanceOfBTConfigurationUpdateCall2933(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTConfigurationUpdateCall2933FromJSON(json: any): BTConfigurationUpdateCall2933 {
    return BTConfigurationUpdateCall2933FromJSONTyped(json, false);
}

export function BTConfigurationUpdateCall2933FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTConfigurationUpdateCall2933 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'configurationParameters': !exists(json, 'configurationParameters') ? undefined : ((json['configurationParameters'] as Array<any>).map(BTMConfigurationParameter819FromJSON)),
        'currentConfiguration': !exists(json, 'currentConfiguration') ? undefined : ((json['currentConfiguration'] as Array<any>).map(BTMParameter1FromJSON)),
        'libraryVersion': !exists(json, 'libraryVersion') ? undefined : json['libraryVersion'],
        'microversionSkew': !exists(json, 'microversionSkew') ? undefined : json['microversionSkew'],
        'rejectMicroversionSkew': !exists(json, 'rejectMicroversionSkew') ? undefined : json['rejectMicroversionSkew'],
        'serializationVersion': !exists(json, 'serializationVersion') ? undefined : json['serializationVersion'],
        'sourceMicroversion': !exists(json, 'sourceMicroversion') ? undefined : json['sourceMicroversion'],
    };
}

export function BTConfigurationUpdateCall2933ToJSON(value?: BTConfigurationUpdateCall2933 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'configurationParameters': value.configurationParameters === undefined ? undefined : ((value.configurationParameters as Array<any>).map(BTMConfigurationParameter819ToJSON)),
        'currentConfiguration': value.currentConfiguration === undefined ? undefined : ((value.currentConfiguration as Array<any>).map(BTMParameter1ToJSON)),
        'libraryVersion': value.libraryVersion,
        'microversionSkew': value.microversionSkew,
        'rejectMicroversionSkew': value.rejectMicroversionSkew,
        'serializationVersion': value.serializationVersion,
        'sourceMicroversion': value.sourceMicroversion,
    };
}

