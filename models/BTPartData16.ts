/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTClosedConstituentPartData2911 } from './BTClosedConstituentPartData2911';
import {
    BTClosedConstituentPartData2911FromJSON,
    BTClosedConstituentPartData2911FromJSONTyped,
    BTClosedConstituentPartData2911ToJSON,
} from './BTClosedConstituentPartData2911';
import type { BTVector3d389 } from './BTVector3d389';
import {
    BTVector3d389FromJSON,
    BTVector3d389FromJSONTyped,
    BTVector3d389ToJSON,
} from './BTVector3d389';
import type { GBTTessellationSettingEnum } from './GBTTessellationSettingEnum';
import {
    GBTTessellationSettingEnumFromJSON,
    GBTTessellationSettingEnumFromJSONTyped,
    GBTTessellationSettingEnumToJSON,
} from './GBTTessellationSettingEnum';

/**
 * 
 * @export
 * @interface BTPartData16
 */
export interface BTPartData16 {
    /**
     * 
     * @type {GBTTessellationSettingEnum}
     * @memberof BTPartData16
     */
    bestAvailableTessellationSetting?: GBTTessellationSettingEnum;
    /**
     * 
     * @type {number}
     * @memberof BTPartData16
     */
    boundsDiameter?: number;
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTPartData16
     */
    btType?: string;
    /**
     * 
     * @type {BTClosedConstituentPartData2911}
     * @memberof BTPartData16
     */
    closedConstituentPartData?: BTClosedConstituentPartData2911;
    /**
     * 
     * @type {number}
     * @memberof BTPartData16
     */
    coarsePlanarFaceTriangleCount?: number;
    /**
     * 
     * @type {number}
     * @memberof BTPartData16
     */
    coarseTriangleCount?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTPartData16
     */
    constituentBodyDeterministicIds?: Array<string>;
    /**
     * 
     * @type {BTPartData16}
     * @memberof BTPartData16
     */
    copyWithoutEntities?: BTPartData16;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTPartData16
     */
    entityDIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTPartData16
     */
    entityDeterministicIds?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof BTPartData16
     */
    flattenedToUnflattenedEntitiesMapping?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BTPartData16
     */
    flattenedToUnflattenedMapping?: { [key: string]: string; };
    /**
     * 
     * @type {BTVector3d389}
     * @memberof BTPartData16
     */
    highBoxCorner?: BTVector3d389;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isACopyForTessellationSettings?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isAssociatedWithFlat?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isBendCenterLineBody?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isClosedComposite?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isComposite?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isDeletion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isEntitylessPartData?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isFlattenedSheetMetalBody?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    isOpenComposite?: boolean;
    /**
     * 
     * @type {BTVector3d389}
     * @memberof BTPartData16
     */
    lowBoxCorner?: BTVector3d389;
    /**
     * 
     * @type {string}
     * @memberof BTPartData16
     */
    ownerFlattenedBodyId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPartData16
     */
    sheetMetalModelId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTPartData16
     */
    sheetMetalOrderId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTPartData16
     */
    shouldAlwaysUseHighestQualityTessellation?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof BTPartData16
     */
    tessellationSettings?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof BTPartData16
     */
    totalEntityCount?: number;
    /**
     * 
     * @type {GBTTessellationSettingEnum}
     * @memberof BTPartData16
     */
    userTessellationSetting?: GBTTessellationSettingEnum;
}

/**
 * Check if a given object implements the BTPartData16 interface.
 */
export function instanceOfBTPartData16(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPartData16FromJSON(json: any): BTPartData16 {
    return BTPartData16FromJSONTyped(json, false);
}

export function BTPartData16FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPartData16 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bestAvailableTessellationSetting': !exists(json, 'bestAvailableTessellationSetting') ? undefined : GBTTessellationSettingEnumFromJSON(json['bestAvailableTessellationSetting']),
        'boundsDiameter': !exists(json, 'boundsDiameter') ? undefined : json['boundsDiameter'],
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'closedConstituentPartData': !exists(json, 'closedConstituentPartData') ? undefined : BTClosedConstituentPartData2911FromJSON(json['closedConstituentPartData']),
        'coarsePlanarFaceTriangleCount': !exists(json, 'coarsePlanarFaceTriangleCount') ? undefined : json['coarsePlanarFaceTriangleCount'],
        'coarseTriangleCount': !exists(json, 'coarseTriangleCount') ? undefined : json['coarseTriangleCount'],
        'constituentBodyDeterministicIds': !exists(json, 'constituentBodyDeterministicIds') ? undefined : json['constituentBodyDeterministicIds'],
        'copyWithoutEntities': !exists(json, 'copyWithoutEntities') ? undefined : BTPartData16FromJSON(json['copyWithoutEntities']),
        'entityDIds': !exists(json, 'entityDIds') ? undefined : json['entityDIds'],
        'entityDeterministicIds': !exists(json, 'entityDeterministicIds') ? undefined : json['entityDeterministicIds'],
        'flattenedToUnflattenedEntitiesMapping': !exists(json, 'flattenedToUnflattenedEntitiesMapping') ? undefined : json['flattenedToUnflattenedEntitiesMapping'],
        'flattenedToUnflattenedMapping': !exists(json, 'flattenedToUnflattenedMapping') ? undefined : json['flattenedToUnflattenedMapping'],
        'highBoxCorner': !exists(json, 'highBoxCorner') ? undefined : BTVector3d389FromJSON(json['highBoxCorner']),
        'isACopyForTessellationSettings': !exists(json, 'isACopyForTessellationSettings') ? undefined : json['isACopyForTessellationSettings'],
        'isAssociatedWithFlat': !exists(json, 'isAssociatedWithFlat') ? undefined : json['isAssociatedWithFlat'],
        'isBendCenterLineBody': !exists(json, 'isBendCenterLineBody') ? undefined : json['isBendCenterLineBody'],
        'isClosedComposite': !exists(json, 'isClosedComposite') ? undefined : json['isClosedComposite'],
        'isComposite': !exists(json, 'isComposite') ? undefined : json['isComposite'],
        'isDeletion': !exists(json, 'isDeletion') ? undefined : json['isDeletion'],
        'isEntitylessPartData': !exists(json, 'isEntitylessPartData') ? undefined : json['isEntitylessPartData'],
        'isFlattenedSheetMetalBody': !exists(json, 'isFlattenedSheetMetalBody') ? undefined : json['isFlattenedSheetMetalBody'],
        'isOpenComposite': !exists(json, 'isOpenComposite') ? undefined : json['isOpenComposite'],
        'lowBoxCorner': !exists(json, 'lowBoxCorner') ? undefined : BTVector3d389FromJSON(json['lowBoxCorner']),
        'ownerFlattenedBodyId': !exists(json, 'ownerFlattenedBodyId') ? undefined : json['ownerFlattenedBodyId'],
        'sheetMetalModelId': !exists(json, 'sheetMetalModelId') ? undefined : json['sheetMetalModelId'],
        'sheetMetalOrderId': !exists(json, 'sheetMetalOrderId') ? undefined : json['sheetMetalOrderId'],
        'shouldAlwaysUseHighestQualityTessellation': !exists(json, 'shouldAlwaysUseHighestQualityTessellation') ? undefined : json['shouldAlwaysUseHighestQualityTessellation'],
        'tessellationSettings': !exists(json, 'tessellationSettings') ? undefined : json['tessellationSettings'],
        'totalEntityCount': !exists(json, 'totalEntityCount') ? undefined : json['totalEntityCount'],
        'userTessellationSetting': !exists(json, 'userTessellationSetting') ? undefined : GBTTessellationSettingEnumFromJSON(json['userTessellationSetting']),
    };
}

export function BTPartData16ToJSON(value?: BTPartData16 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bestAvailableTessellationSetting': GBTTessellationSettingEnumToJSON(value.bestAvailableTessellationSetting),
        'boundsDiameter': value.boundsDiameter,
        'btType': value.btType,
        'closedConstituentPartData': BTClosedConstituentPartData2911ToJSON(value.closedConstituentPartData),
        'coarsePlanarFaceTriangleCount': value.coarsePlanarFaceTriangleCount,
        'coarseTriangleCount': value.coarseTriangleCount,
        'constituentBodyDeterministicIds': value.constituentBodyDeterministicIds,
        'copyWithoutEntities': BTPartData16ToJSON(value.copyWithoutEntities),
        'entityDIds': value.entityDIds,
        'entityDeterministicIds': value.entityDeterministicIds,
        'flattenedToUnflattenedEntitiesMapping': value.flattenedToUnflattenedEntitiesMapping,
        'flattenedToUnflattenedMapping': value.flattenedToUnflattenedMapping,
        'highBoxCorner': BTVector3d389ToJSON(value.highBoxCorner),
        'isACopyForTessellationSettings': value.isACopyForTessellationSettings,
        'isAssociatedWithFlat': value.isAssociatedWithFlat,
        'isBendCenterLineBody': value.isBendCenterLineBody,
        'isClosedComposite': value.isClosedComposite,
        'isComposite': value.isComposite,
        'isDeletion': value.isDeletion,
        'isEntitylessPartData': value.isEntitylessPartData,
        'isFlattenedSheetMetalBody': value.isFlattenedSheetMetalBody,
        'isOpenComposite': value.isOpenComposite,
        'lowBoxCorner': BTVector3d389ToJSON(value.lowBoxCorner),
        'ownerFlattenedBodyId': value.ownerFlattenedBodyId,
        'sheetMetalModelId': value.sheetMetalModelId,
        'sheetMetalOrderId': value.sheetMetalOrderId,
        'shouldAlwaysUseHighestQualityTessellation': value.shouldAlwaysUseHighestQualityTessellation,
        'tessellationSettings': value.tessellationSettings,
        'totalEntityCount': value.totalEntityCount,
        'userTessellationSetting': GBTTessellationSettingEnumToJSON(value.userTessellationSetting),
    };
}

