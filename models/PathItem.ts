/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Operation } from './Operation';
import {
    OperationFromJSON,
    OperationFromJSONTyped,
    OperationToJSON,
} from './Operation';
import type { Parameter } from './Parameter';
import {
    ParameterFromJSON,
    ParameterFromJSONTyped,
    ParameterToJSON,
} from './Parameter';
import type { Server } from './Server';
import {
    ServerFromJSON,
    ServerFromJSONTyped,
    ServerToJSON,
} from './Server';

/**
 * 
 * @export
 * @interface PathItem
 */
export interface PathItem {
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    _delete?: Operation;
    /**
     * 
     * @type {string}
     * @memberof PathItem
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PathItem
     */
    extensions?: { [key: string]: object; };
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    get?: Operation;
    /**
     * 
     * @type {string}
     * @memberof PathItem
     */
    get$ref?: string;
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    head?: Operation;
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    options?: Operation;
    /**
     * 
     * @type {Array<Parameter>}
     * @memberof PathItem
     */
    parameters?: Array<Parameter>;
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    patch?: Operation;
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    post?: Operation;
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    put?: Operation;
    /**
     * 
     * @type {Array<Server>}
     * @memberof PathItem
     */
    servers?: Array<Server>;
    /**
     * 
     * @type {string}
     * @memberof PathItem
     */
    summary?: string;
    /**
     * 
     * @type {Operation}
     * @memberof PathItem
     */
    trace?: Operation;
}

/**
 * Check if a given object implements the PathItem interface.
 */
export function instanceOfPathItem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PathItemFromJSON(json: any): PathItem {
    return PathItemFromJSONTyped(json, false);
}

export function PathItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): PathItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_delete': !exists(json, 'delete') ? undefined : OperationFromJSON(json['delete']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'get': !exists(json, 'get') ? undefined : OperationFromJSON(json['get']),
        'get$ref': !exists(json, 'get$ref') ? undefined : json['get$ref'],
        'head': !exists(json, 'head') ? undefined : OperationFromJSON(json['head']),
        'options': !exists(json, 'options') ? undefined : OperationFromJSON(json['options']),
        'parameters': !exists(json, 'parameters') ? undefined : ((json['parameters'] as Array<any>).map(ParameterFromJSON)),
        'patch': !exists(json, 'patch') ? undefined : OperationFromJSON(json['patch']),
        'post': !exists(json, 'post') ? undefined : OperationFromJSON(json['post']),
        'put': !exists(json, 'put') ? undefined : OperationFromJSON(json['put']),
        'servers': !exists(json, 'servers') ? undefined : ((json['servers'] as Array<any>).map(ServerFromJSON)),
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'trace': !exists(json, 'trace') ? undefined : OperationFromJSON(json['trace']),
    };
}

export function PathItemToJSON(value?: PathItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'delete': OperationToJSON(value._delete),
        'description': value.description,
        'extensions': value.extensions,
        'get': OperationToJSON(value.get),
        'get$ref': value.get$ref,
        'head': OperationToJSON(value.head),
        'options': OperationToJSON(value.options),
        'parameters': value.parameters === undefined ? undefined : ((value.parameters as Array<any>).map(ParameterToJSON)),
        'patch': OperationToJSON(value.patch),
        'post': OperationToJSON(value.post),
        'put': OperationToJSON(value.put),
        'servers': value.servers === undefined ? undefined : ((value.servers as Array<any>).map(ServerToJSON)),
        'summary': value.summary,
        'trace': OperationToJSON(value.trace),
    };
}

