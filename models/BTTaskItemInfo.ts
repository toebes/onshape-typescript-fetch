/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTViewDataInfo } from './BTViewDataInfo';
import {
    BTViewDataInfoFromJSON,
    BTViewDataInfoFromJSONTyped,
    BTViewDataInfoToJSON,
} from './BTViewDataInfo';

/**
 * 
 * @export
 * @interface BTTaskItemInfo
 */
export interface BTTaskItemInfo {
    /**
     * 
     * @type {Array<string>}
     * @memberof BTTaskItemInfo
     */
    assemblyFeatures?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    bodyType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    _configuration?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    dataType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    elementFeature?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    elementId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTTaskItemInfo
     */
    elementOccurrences?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    elementQuery?: string;
    /**
     * 
     * @type {number}
     * @memberof BTTaskItemInfo
     */
    elementType?: number;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    fileName?: string;
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    mimeType?: string;
    /**
     * Name of the resource.
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    partId?: string;
    /**
     * 
     * @type {number}
     * @memberof BTTaskItemInfo
     */
    releaseState?: number;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    revisionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    versionId?: string;
    /**
     * 
     * @type {BTViewDataInfo}
     * @memberof BTTaskItemInfo
     */
    viewData?: BTViewDataInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    viewRef?: string;
    /**
     * 
     * @type {string}
     * @memberof BTTaskItemInfo
     */
    workspaceId?: string;
}

/**
 * Check if a given object implements the BTTaskItemInfo interface.
 */
export function instanceOfBTTaskItemInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTTaskItemInfoFromJSON(json: any): BTTaskItemInfo {
    return BTTaskItemInfoFromJSONTyped(json, false);
}

export function BTTaskItemInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTTaskItemInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assemblyFeatures': !exists(json, 'assemblyFeatures') ? undefined : json['assemblyFeatures'],
        'bodyType': !exists(json, 'bodyType') ? undefined : json['bodyType'],
        '_configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementFeature': !exists(json, 'elementFeature') ? undefined : json['elementFeature'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementOccurrences': !exists(json, 'elementOccurrences') ? undefined : json['elementOccurrences'],
        'elementQuery': !exists(json, 'elementQuery') ? undefined : json['elementQuery'],
        'elementType': !exists(json, 'elementType') ? undefined : json['elementType'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'partId': !exists(json, 'partId') ? undefined : json['partId'],
        'releaseState': !exists(json, 'releaseState') ? undefined : json['releaseState'],
        'revisionId': !exists(json, 'revisionId') ? undefined : json['revisionId'],
        'versionId': !exists(json, 'versionId') ? undefined : json['versionId'],
        'viewData': !exists(json, 'viewData') ? undefined : BTViewDataInfoFromJSON(json['viewData']),
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
        'workspaceId': !exists(json, 'workspaceId') ? undefined : json['workspaceId'],
    };
}

export function BTTaskItemInfoToJSON(value?: BTTaskItemInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assemblyFeatures': value.assemblyFeatures,
        'bodyType': value.bodyType,
        'configuration': value._configuration,
        'dataType': value.dataType,
        'documentId': value.documentId,
        'elementFeature': value.elementFeature,
        'elementId': value.elementId,
        'elementOccurrences': value.elementOccurrences,
        'elementQuery': value.elementQuery,
        'elementType': value.elementType,
        'fileName': value.fileName,
        'href': value.href,
        'id': value.id,
        'mimeType': value.mimeType,
        'name': value.name,
        'partId': value.partId,
        'releaseState': value.releaseState,
        'revisionId': value.revisionId,
        'versionId': value.versionId,
        'viewData': BTViewDataInfoToJSON(value.viewData),
        'viewRef': value.viewRef,
        'workspaceId': value.workspaceId,
    };
}

