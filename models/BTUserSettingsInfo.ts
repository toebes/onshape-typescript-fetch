/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTCommonUnitsInfo } from './BTCommonUnitsInfo';
import {
    BTCommonUnitsInfoFromJSON,
    BTCommonUnitsInfoFromJSONTyped,
    BTCommonUnitsInfoToJSON,
} from './BTCommonUnitsInfo';
import type { BTDefaultUnitsInfo } from './BTDefaultUnitsInfo';
import {
    BTDefaultUnitsInfoFromJSON,
    BTDefaultUnitsInfoFromJSONTyped,
    BTDefaultUnitsInfoToJSON,
} from './BTDefaultUnitsInfo';
import type { BTMaterialLibrarySettingsInfo } from './BTMaterialLibrarySettingsInfo';
import {
    BTMaterialLibrarySettingsInfoFromJSON,
    BTMaterialLibrarySettingsInfoFromJSONTyped,
    BTMaterialLibrarySettingsInfoToJSON,
} from './BTMaterialLibrarySettingsInfo';
import type { BTSelectItemViewStateInfo } from './BTSelectItemViewStateInfo';
import {
    BTSelectItemViewStateInfoFromJSON,
    BTSelectItemViewStateInfoFromJSONTyped,
    BTSelectItemViewStateInfoToJSON,
} from './BTSelectItemViewStateInfo';
import type { BTSubstituteApproverInfo } from './BTSubstituteApproverInfo';
import {
    BTSubstituteApproverInfoFromJSON,
    BTSubstituteApproverInfoFromJSONTyped,
    BTSubstituteApproverInfoToJSON,
} from './BTSubstituteApproverInfo';
import type { BTUnitsMaximumDisplayPrecisionInfo } from './BTUnitsMaximumDisplayPrecisionInfo';
import {
    BTUnitsMaximumDisplayPrecisionInfoFromJSON,
    BTUnitsMaximumDisplayPrecisionInfoFromJSONTyped,
    BTUnitsMaximumDisplayPrecisionInfoToJSON,
} from './BTUnitsMaximumDisplayPrecisionInfo';
import type { BTViewManipulationMouseKeyMappingInfo } from './BTViewManipulationMouseKeyMappingInfo';
import {
    BTViewManipulationMouseKeyMappingInfoFromJSON,
    BTViewManipulationMouseKeyMappingInfoFromJSONTyped,
    BTViewManipulationMouseKeyMappingInfoToJSON,
} from './BTViewManipulationMouseKeyMappingInfo';

/**
 * 
 * @export
 * @interface BTUserSettingsInfo
 */
export interface BTUserSettingsInfo {
    /**
     * 
     * @type {boolean}
     * @memberof BTUserSettingsInfo
     */
    axisRotationLock?: boolean;
    /**
     * 
     * @type {BTCommonUnitsInfo}
     * @memberof BTUserSettingsInfo
     */
    commonUnits?: BTCommonUnitsInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTUserSettingsInfo
     */
    customColors?: Array<string>;
    /**
     * 
     * @type {BTDefaultUnitsInfo}
     * @memberof BTUserSettingsInfo
     */
    defaultUnits?: BTDefaultUnitsInfo;
    /**
     * 
     * @type {boolean}
     * @memberof BTUserSettingsInfo
     */
    displayAssemblyProperties?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTUserSettingsInfo
     */
    drawingBackgroundId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BTUserSettingsInfo
     */
    enforceApplicationAcl?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    exportDrawingOptions?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    exportSolidOptions?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    graphicsRenderMode?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    graphicsSmoothEdge?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    highlightLaminarEdges?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    importOptions?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    isolateHideTransparent?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    isolateTranslucentMode?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    locale?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    makeTransparentTranslucentMode?: string;
    /**
     * 
     * @type {BTMaterialLibrarySettingsInfo}
     * @memberof BTUserSettingsInfo
     */
    materialLibrarySettings?: BTMaterialLibrarySettingsInfo;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    miniToolbarSettings?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    mouseActions?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    perspectiveModeOn?: string;
    /**
     * 
     * @type {string}
     * @memberof BTUserSettingsInfo
     */
    previousSketchFont?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTUserSettingsInfo
     */
    reverseScrollWheelZoomDirection?: boolean;
    /**
     * 
     * @type {Array<BTSelectItemViewStateInfo>}
     * @memberof BTUserSettingsInfo
     */
    selectItemViewStateInfos?: Array<BTSelectItemViewStateInfo>;
    /**
     * 
     * @type {number}
     * @memberof BTUserSettingsInfo
     */
    startupPage?: number;
    /**
     * 
     * @type {Array<BTSubstituteApproverInfo>}
     * @memberof BTUserSettingsInfo
     */
    substituteApprovers?: Array<BTSubstituteApproverInfo>;
    /**
     * 
     * @type {number}
     * @memberof BTUserSettingsInfo
     */
    theme?: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof BTUserSettingsInfo
     */
    unitsDisplayPrecision?: { [key: string]: number; };
    /**
     * 
     * @type {BTUnitsMaximumDisplayPrecisionInfo}
     * @memberof BTUserSettingsInfo
     */
    unitsMaximumDisplayPrecision?: BTUnitsMaximumDisplayPrecisionInfo;
    /**
     * 
     * @type {boolean}
     * @memberof BTUserSettingsInfo
     */
    use24HourTime?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTUserSettingsInfo
     */
    useDecimalComma?: boolean;
    /**
     * 
     * @type {BTViewManipulationMouseKeyMappingInfo}
     * @memberof BTUserSettingsInfo
     */
    viewManipulationMouseKeyMapping?: BTViewManipulationMouseKeyMappingInfo;
    /**
     * 
     * @type {number}
     * @memberof BTUserSettingsInfo
     */
    viewMappingId?: number;
}

/**
 * Check if a given object implements the BTUserSettingsInfo interface.
 */
export function instanceOfBTUserSettingsInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTUserSettingsInfoFromJSON(json: any): BTUserSettingsInfo {
    return BTUserSettingsInfoFromJSONTyped(json, false);
}

export function BTUserSettingsInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTUserSettingsInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'axisRotationLock': !exists(json, 'axisRotationLock') ? undefined : json['axisRotationLock'],
        'commonUnits': !exists(json, 'commonUnits') ? undefined : BTCommonUnitsInfoFromJSON(json['commonUnits']),
        'customColors': !exists(json, 'customColors') ? undefined : json['customColors'],
        'defaultUnits': !exists(json, 'defaultUnits') ? undefined : BTDefaultUnitsInfoFromJSON(json['defaultUnits']),
        'displayAssemblyProperties': !exists(json, 'displayAssemblyProperties') ? undefined : json['displayAssemblyProperties'],
        'drawingBackgroundId': !exists(json, 'drawingBackgroundId') ? undefined : json['drawingBackgroundId'],
        'enforceApplicationAcl': !exists(json, 'enforceApplicationAcl') ? undefined : json['enforceApplicationAcl'],
        'exportDrawingOptions': !exists(json, 'exportDrawingOptions') ? undefined : json['exportDrawingOptions'],
        'exportSolidOptions': !exists(json, 'exportSolidOptions') ? undefined : json['exportSolidOptions'],
        'graphicsRenderMode': !exists(json, 'graphicsRenderMode') ? undefined : json['graphicsRenderMode'],
        'graphicsSmoothEdge': !exists(json, 'graphicsSmoothEdge') ? undefined : json['graphicsSmoothEdge'],
        'highlightLaminarEdges': !exists(json, 'highlightLaminarEdges') ? undefined : json['highlightLaminarEdges'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'importOptions': !exists(json, 'importOptions') ? undefined : json['importOptions'],
        'isolateHideTransparent': !exists(json, 'isolateHideTransparent') ? undefined : json['isolateHideTransparent'],
        'isolateTranslucentMode': !exists(json, 'isolateTranslucentMode') ? undefined : json['isolateTranslucentMode'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'makeTransparentTranslucentMode': !exists(json, 'makeTransparentTranslucentMode') ? undefined : json['makeTransparentTranslucentMode'],
        'materialLibrarySettings': !exists(json, 'materialLibrarySettings') ? undefined : BTMaterialLibrarySettingsInfoFromJSON(json['materialLibrarySettings']),
        'miniToolbarSettings': !exists(json, 'miniToolbarSettings') ? undefined : json['miniToolbarSettings'],
        'mouseActions': !exists(json, 'mouseActions') ? undefined : json['mouseActions'],
        'perspectiveModeOn': !exists(json, 'perspectiveModeOn') ? undefined : json['perspectiveModeOn'],
        'previousSketchFont': !exists(json, 'previousSketchFont') ? undefined : json['previousSketchFont'],
        'reverseScrollWheelZoomDirection': !exists(json, 'reverseScrollWheelZoomDirection') ? undefined : json['reverseScrollWheelZoomDirection'],
        'selectItemViewStateInfos': !exists(json, 'selectItemViewStateInfos') ? undefined : ((json['selectItemViewStateInfos'] as Array<any>).map(BTSelectItemViewStateInfoFromJSON)),
        'startupPage': !exists(json, 'startupPage') ? undefined : json['startupPage'],
        'substituteApprovers': !exists(json, 'substituteApprovers') ? undefined : ((json['substituteApprovers'] as Array<any>).map(BTSubstituteApproverInfoFromJSON)),
        'theme': !exists(json, 'theme') ? undefined : json['theme'],
        'unitsDisplayPrecision': !exists(json, 'unitsDisplayPrecision') ? undefined : json['unitsDisplayPrecision'],
        'unitsMaximumDisplayPrecision': !exists(json, 'unitsMaximumDisplayPrecision') ? undefined : BTUnitsMaximumDisplayPrecisionInfoFromJSON(json['unitsMaximumDisplayPrecision']),
        'use24HourTime': !exists(json, 'use24HourTime') ? undefined : json['use24HourTime'],
        'useDecimalComma': !exists(json, 'useDecimalComma') ? undefined : json['useDecimalComma'],
        'viewManipulationMouseKeyMapping': !exists(json, 'viewManipulationMouseKeyMapping') ? undefined : BTViewManipulationMouseKeyMappingInfoFromJSON(json['viewManipulationMouseKeyMapping']),
        'viewMappingId': !exists(json, 'viewMappingId') ? undefined : json['viewMappingId'],
    };
}

export function BTUserSettingsInfoToJSON(value?: BTUserSettingsInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'axisRotationLock': value.axisRotationLock,
        'commonUnits': BTCommonUnitsInfoToJSON(value.commonUnits),
        'customColors': value.customColors,
        'defaultUnits': BTDefaultUnitsInfoToJSON(value.defaultUnits),
        'displayAssemblyProperties': value.displayAssemblyProperties,
        'drawingBackgroundId': value.drawingBackgroundId,
        'enforceApplicationAcl': value.enforceApplicationAcl,
        'exportDrawingOptions': value.exportDrawingOptions,
        'exportSolidOptions': value.exportSolidOptions,
        'graphicsRenderMode': value.graphicsRenderMode,
        'graphicsSmoothEdge': value.graphicsSmoothEdge,
        'highlightLaminarEdges': value.highlightLaminarEdges,
        'id': value.id,
        'importOptions': value.importOptions,
        'isolateHideTransparent': value.isolateHideTransparent,
        'isolateTranslucentMode': value.isolateTranslucentMode,
        'locale': value.locale,
        'makeTransparentTranslucentMode': value.makeTransparentTranslucentMode,
        'materialLibrarySettings': BTMaterialLibrarySettingsInfoToJSON(value.materialLibrarySettings),
        'miniToolbarSettings': value.miniToolbarSettings,
        'mouseActions': value.mouseActions,
        'perspectiveModeOn': value.perspectiveModeOn,
        'previousSketchFont': value.previousSketchFont,
        'reverseScrollWheelZoomDirection': value.reverseScrollWheelZoomDirection,
        'selectItemViewStateInfos': value.selectItemViewStateInfos === undefined ? undefined : ((value.selectItemViewStateInfos as Array<any>).map(BTSelectItemViewStateInfoToJSON)),
        'startupPage': value.startupPage,
        'substituteApprovers': value.substituteApprovers === undefined ? undefined : ((value.substituteApprovers as Array<any>).map(BTSubstituteApproverInfoToJSON)),
        'theme': value.theme,
        'unitsDisplayPrecision': value.unitsDisplayPrecision,
        'unitsMaximumDisplayPrecision': BTUnitsMaximumDisplayPrecisionInfoToJSON(value.unitsMaximumDisplayPrecision),
        'use24HourTime': value.use24HourTime,
        'useDecimalComma': value.useDecimalComma,
        'viewManipulationMouseKeyMapping': BTViewManipulationMouseKeyMappingInfoToJSON(value.viewManipulationMouseKeyMapping),
        'viewMappingId': value.viewMappingId,
    };
}

