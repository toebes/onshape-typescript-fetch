/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTUserState } from './BTUserState';
import {
    BTUserStateFromJSON,
    BTUserStateFromJSONTyped,
    BTUserStateToJSON,
} from './BTUserState';

/**
 * 
 * @export
 * @interface BTAclEntryInfo
 */
export interface BTAclEntryInfo {
    /**
     * 
     * @type {boolean}
     * @memberof BTAclEntryInfo
     */
    acceptOwnerTransfer?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTAclEntryInfo
     */
    companyName?: string;
    /**
     * 
     * @type {string}
     * @memberof BTAclEntryInfo
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTAclEntryInfo
     */
    enterpriseMember?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTAclEntryInfo
     */
    entryId?: string;
    /**
     * 
     * @type {BTUserState}
     * @memberof BTAclEntryInfo
     */
    entryState?: BTUserState;
    /**
     * 
     * @type {number}
     * @memberof BTAclEntryInfo
     */
    entryType?: number;
    /**
     * 
     * @type {string}
     * @memberof BTAclEntryInfo
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof BTAclEntryInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BTAclEntryInfo
     */
    objectId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTAclEntryInfo
     */
    pendingOwnerTransfer?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTAclEntryInfo
     */
    permission?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTAclEntryInfo
     */
    permissionSet?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof BTAclEntryInfo
     */
    proCompanySubtype?: number;
    /**
     * 
     * @type {string}
     * @memberof BTAclEntryInfo
     */
    teamName?: string;
}

/**
 * Check if a given object implements the BTAclEntryInfo interface.
 */
export function instanceOfBTAclEntryInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTAclEntryInfoFromJSON(json: any): BTAclEntryInfo {
    return BTAclEntryInfoFromJSONTyped(json, false);
}

export function BTAclEntryInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTAclEntryInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'acceptOwnerTransfer': !exists(json, 'acceptOwnerTransfer') ? undefined : json['acceptOwnerTransfer'],
        'companyName': !exists(json, 'companyName') ? undefined : json['companyName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'enterpriseMember': !exists(json, 'enterpriseMember') ? undefined : json['enterpriseMember'],
        'entryId': !exists(json, 'entryId') ? undefined : json['entryId'],
        'entryState': !exists(json, 'entryState') ? undefined : BTUserStateFromJSON(json['entryState']),
        'entryType': !exists(json, 'entryType') ? undefined : json['entryType'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'objectId': !exists(json, 'objectId') ? undefined : json['objectId'],
        'pendingOwnerTransfer': !exists(json, 'pendingOwnerTransfer') ? undefined : json['pendingOwnerTransfer'],
        'permission': !exists(json, 'permission') ? undefined : json['permission'],
        'permissionSet': !exists(json, 'permissionSet') ? undefined : json['permissionSet'],
        'proCompanySubtype': !exists(json, 'proCompanySubtype') ? undefined : json['proCompanySubtype'],
        'teamName': !exists(json, 'teamName') ? undefined : json['teamName'],
    };
}

export function BTAclEntryInfoToJSON(value?: BTAclEntryInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'acceptOwnerTransfer': value.acceptOwnerTransfer,
        'companyName': value.companyName,
        'email': value.email,
        'enterpriseMember': value.enterpriseMember,
        'entryId': value.entryId,
        'entryState': BTUserStateToJSON(value.entryState),
        'entryType': value.entryType,
        'image': value.image,
        'name': value.name,
        'objectId': value.objectId,
        'pendingOwnerTransfer': value.pendingOwnerTransfer,
        'permission': value.permission,
        'permissionSet': value.permissionSet,
        'proCompanySubtype': value.proCompanySubtype,
        'teamName': value.teamName,
    };
}

