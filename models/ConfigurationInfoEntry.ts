/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConfigurationInfoEntry
 */
export interface ConfigurationInfoEntry {
    /**
     * 
     * @type {boolean}
     * @memberof ConfigurationInfoEntry
     */
    explicit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigurationInfoEntry
     */
    isCosmetic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigurationInfoEntry
     */
    isVisible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationInfoEntry
     */
    parameterAbbreviatedDisplayValue?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationInfoEntry
     */
    parameterDisplayValue?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationInfoEntry
     */
    parameterId?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationInfoEntry
     */
    parameterName?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigurationInfoEntry
     */
    parameterType?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigurationInfoEntry
     */
    parameterValue?: string;
}

/**
 * Check if a given object implements the ConfigurationInfoEntry interface.
 */
export function instanceOfConfigurationInfoEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigurationInfoEntryFromJSON(json: any): ConfigurationInfoEntry {
    return ConfigurationInfoEntryFromJSONTyped(json, false);
}

export function ConfigurationInfoEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigurationInfoEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'explicit': !exists(json, 'explicit') ? undefined : json['explicit'],
        'isCosmetic': !exists(json, 'isCosmetic') ? undefined : json['isCosmetic'],
        'isVisible': !exists(json, 'isVisible') ? undefined : json['isVisible'],
        'parameterAbbreviatedDisplayValue': !exists(json, 'parameterAbbreviatedDisplayValue') ? undefined : json['parameterAbbreviatedDisplayValue'],
        'parameterDisplayValue': !exists(json, 'parameterDisplayValue') ? undefined : json['parameterDisplayValue'],
        'parameterId': !exists(json, 'parameterId') ? undefined : json['parameterId'],
        'parameterName': !exists(json, 'parameterName') ? undefined : json['parameterName'],
        'parameterType': !exists(json, 'parameterType') ? undefined : json['parameterType'],
        'parameterValue': !exists(json, 'parameterValue') ? undefined : json['parameterValue'],
    };
}

export function ConfigurationInfoEntryToJSON(value?: ConfigurationInfoEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'explicit': value.explicit,
        'isCosmetic': value.isCosmetic,
        'isVisible': value.isVisible,
        'parameterAbbreviatedDisplayValue': value.parameterAbbreviatedDisplayValue,
        'parameterDisplayValue': value.parameterDisplayValue,
        'parameterId': value.parameterId,
        'parameterName': value.parameterName,
        'parameterType': value.parameterType,
        'parameterValue': value.parameterValue,
    };
}

