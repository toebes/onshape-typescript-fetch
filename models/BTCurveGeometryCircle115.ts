/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.181.37085-cf05a13421a3
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTCurveGeometry114 } from './BTCurveGeometry114';
import {
    BTCurveGeometry114FromJSON,
    BTCurveGeometry114FromJSONTyped,
    BTCurveGeometry114ToJSON,
 BTCurveGeometry114SuperToJSON,
 BTCurveGeometry114SuperSuperToJSON,
} from './BTCurveGeometry114';

import {
     BTCurveGeometryEllipse1189FromJSONTyped,
    BTCurveGeometryEllipse1189ToJSON,
    BTCurveGeometryEllipse1189ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTCurveGeometryCircle115
 */
export interface BTCurveGeometryCircle115 extends BTCurveGeometry114 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTCurveGeometryCircle115
     */
    btType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTCurveGeometryCircle115
     */
    clockwise?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BTCurveGeometryCircle115
     */
    radius?: number;
    /**
     * 
     * @type {number}
     * @memberof BTCurveGeometryCircle115
     */
    xcenter?: number;
    /**
     * 
     * @type {number}
     * @memberof BTCurveGeometryCircle115
     */
    xdir?: number;
    /**
     * 
     * @type {number}
     * @memberof BTCurveGeometryCircle115
     */
    ycenter?: number;
    /**
     * 
     * @type {number}
     * @memberof BTCurveGeometryCircle115
     */
    ydir?: number;
}

/**
 * Check if a given object implements the BTCurveGeometryCircle115 interface.
 */
export function instanceOfBTCurveGeometryCircle115(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTCurveGeometryCircle115FromJSON(json: any): BTCurveGeometryCircle115 {
    return BTCurveGeometryCircle115FromJSONTyped(json, false);
}

export function BTCurveGeometryCircle115FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTCurveGeometryCircle115 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTCurveGeometryEllipse-1189') {
            return BTCurveGeometryEllipse1189FromJSONTyped(json, true);
        }
    }
    return {
        ...BTCurveGeometry114FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'clockwise': !exists(json, 'clockwise') ? undefined : json['clockwise'],
        'radius': !exists(json, 'radius') ? undefined : json['radius'],
        'xcenter': !exists(json, 'xcenter') ? undefined : json['xcenter'],
        'xdir': !exists(json, 'xdir') ? undefined : json['xdir'],
        'ycenter': !exists(json, 'ycenter') ? undefined : json['ycenter'],
        'ydir': !exists(json, 'ydir') ? undefined : json['ydir'],
    };
}

export function BTCurveGeometryCircle115SuperSuperToJSON(value?: BTCurveGeometryCircle115 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTCurveGeometry114SuperSuperToJSON(value),
        'btType': value.btType,
        'clockwise': value.clockwise,
        'radius': value.radius,
        'xcenter': value.xcenter,
        'xdir': value.xdir,
        'ycenter': value.ycenter,
        'ydir': value.ydir,
    };
}



export function BTCurveGeometryCircle115ToJSON(value?: BTCurveGeometryCircle115 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTCurveGeometryEllipse-1189') {
        return BTCurveGeometryEllipse1189ToJSON(value);
    }
    return BTCurveGeometryCircle115SuperToJSON(value);
}


export function BTCurveGeometryCircle115SuperToJSON(value?: BTCurveGeometryCircle115 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTCurveGeometryEllipse-1189') {
        return BTCurveGeometryEllipse1189ToJSON(value);
    }
    return BTCurveGeometryCircle115SuperSuperToJSON(value);
}
