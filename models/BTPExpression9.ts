/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTPPropertyAccessor23 } from './BTPPropertyAccessor23';
import {
    BTPPropertyAccessor23FromJSON,
    BTPPropertyAccessor23FromJSONTyped,
    BTPPropertyAccessor23ToJSON,
 BTPPropertyAccessor23SuperToJSON,
} from './BTPPropertyAccessor23';
import type { BTPSpace10 } from './BTPSpace10';
import {
    BTPSpace10FromJSON,
    BTPSpace10FromJSONTyped,
    BTPSpace10ToJSON,
} from './BTPSpace10';
import type { GBTPDefinitionType } from './GBTPDefinitionType';
import {
    GBTPDefinitionTypeFromJSON,
    GBTPDefinitionTypeFromJSONTyped,
    GBTPDefinitionTypeToJSON,
} from './GBTPDefinitionType';

import {
     BTPExpressionAccess237FromJSONTyped,
    BTPExpressionAccess237ToJSON,
     BTPExpressionAs238FromJSONTyped,
    BTPExpressionAs238ToJSON,
     BTPExpressionBuiltinCall239FromJSONTyped,
    BTPExpressionBuiltinCall239ToJSON,
     BTPExpressionCall240FromJSONTyped,
    BTPExpressionCall240ToJSON,
     BTPExpressionFunction1325FromJSONTyped,
    BTPExpressionFunction1325ToJSON,
     BTPExpressionGroup241FromJSONTyped,
    BTPExpressionGroup241ToJSON,
     BTPExpressionIs242FromJSONTyped,
    BTPExpressionIs242ToJSON,
     BTPExpressionNew243FromJSONTyped,
    BTPExpressionNew243ToJSON,
     BTPExpressionOperator244FromJSONTyped,
    BTPExpressionOperator244ToJSON,
     BTPExpressionSwitch2632FromJSONTyped,
    BTPExpressionSwitch2632ToJSON,
     BTPExpressionTry1271FromJSONTyped,
    BTPExpressionTry1271ToJSON,
     BTPExpressionVarReference245FromJSONTyped,
    BTPExpressionVarReference245ToJSON,
     BTPLiteral253FromJSONTyped,
    BTPLiteral253ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTPExpression9
 */
export interface BTPExpression9 extends BTPPropertyAccessor23 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTPExpression9
     */
    btType?: string;
}

/**
 * Check if a given object implements the BTPExpression9 interface.
 */
export function instanceOfBTPExpression9(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTPExpression9FromJSON(json: any): BTPExpression9 {
    return BTPExpression9FromJSONTyped(json, false);
}

export function BTPExpression9FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTPExpression9 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTPExpressionAccess-237') {
            return BTPExpressionAccess237FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionAs-238') {
            return BTPExpressionAs238FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionBuiltinCall-239') {
            return BTPExpressionBuiltinCall239FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionCall-240') {
            return BTPExpressionCall240FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionFunction-1325') {
            return BTPExpressionFunction1325FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionGroup-241') {
            return BTPExpressionGroup241FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionIs-242') {
            return BTPExpressionIs242FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionNew-243') {
            return BTPExpressionNew243FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionOperator-244') {
            return BTPExpressionOperator244FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionSwitch-2632') {
            return BTPExpressionSwitch2632FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionTry-1271') {
            return BTPExpressionTry1271FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPExpressionVarReference-245') {
            return BTPExpressionVarReference245FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTPLiteral-253') {
            return BTPLiteral253FromJSONTyped(json, true);
        }
    }
    return {
        ...BTPPropertyAccessor23FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
    };
}

export function BTPExpression9SuperToJSON(value?: BTPExpression9 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTPPropertyAccessor23SuperToJSON(value),
        'btType': value.btType,
    };
}



export function BTPExpression9ToJSON(value?: BTPExpression9 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTPExpressionAccess-237') {
        return BTPExpressionAccess237ToJSON(value);
    }
    if (value.btType === 'BTPExpressionAs-238') {
        return BTPExpressionAs238ToJSON(value);
    }
    if (value.btType === 'BTPExpressionBuiltinCall-239') {
        return BTPExpressionBuiltinCall239ToJSON(value);
    }
    if (value.btType === 'BTPExpressionCall-240') {
        return BTPExpressionCall240ToJSON(value);
    }
    if (value.btType === 'BTPExpressionFunction-1325') {
        return BTPExpressionFunction1325ToJSON(value);
    }
    if (value.btType === 'BTPExpressionGroup-241') {
        return BTPExpressionGroup241ToJSON(value);
    }
    if (value.btType === 'BTPExpressionIs-242') {
        return BTPExpressionIs242ToJSON(value);
    }
    if (value.btType === 'BTPExpressionNew-243') {
        return BTPExpressionNew243ToJSON(value);
    }
    if (value.btType === 'BTPExpressionOperator-244') {
        return BTPExpressionOperator244ToJSON(value);
    }
    if (value.btType === 'BTPExpressionSwitch-2632') {
        return BTPExpressionSwitch2632ToJSON(value);
    }
    if (value.btType === 'BTPExpressionTry-1271') {
        return BTPExpressionTry1271ToJSON(value);
    }
    if (value.btType === 'BTPExpressionVarReference-245') {
        return BTPExpressionVarReference245ToJSON(value);
    }
    if (value.btType === 'BTPLiteral-253') {
        return BTPLiteral253ToJSON(value);
    }
    return BTPExpression9SuperToJSON(value);
}
