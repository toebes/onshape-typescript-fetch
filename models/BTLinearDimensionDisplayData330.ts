/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTBSMatrix386 } from './BTBSMatrix386';
import {
    BTBSMatrix386FromJSON,
    BTBSMatrix386FromJSONTyped,
    BTBSMatrix386ToJSON,
} from './BTBSMatrix386';
import type { BTDimensionDisplayData323 } from './BTDimensionDisplayData323';
import {
    BTDimensionDisplayData323FromJSON,
    BTDimensionDisplayData323FromJSONTyped,
    BTDimensionDisplayData323ToJSON,
 BTDimensionDisplayData323SuperToJSON,
} from './BTDimensionDisplayData323';
import type { BTMatrix3x3340 } from './BTMatrix3x3340';
import {
    BTMatrix3x3340FromJSON,
    BTMatrix3x3340FromJSONTyped,
    BTMatrix3x3340ToJSON,
} from './BTMatrix3x3340';
import type { GBTTolerancePrecision } from './GBTTolerancePrecision';
import {
    GBTTolerancePrecisionFromJSON,
    GBTTolerancePrecisionFromJSONTyped,
    GBTTolerancePrecisionToJSON,
} from './GBTTolerancePrecision';
import type { GBTToleranceType } from './GBTToleranceType';
import {
    GBTToleranceTypeFromJSON,
    GBTToleranceTypeFromJSONTyped,
    GBTToleranceTypeToJSON,
} from './GBTToleranceType';

import {
     BTCenterlineDimensionDisplayData1798FromJSONTyped,
    BTCenterlineDimensionDisplayData1798ToJSON,
     BTEllipseDiameterDimensionDisplayData1301FromJSONTyped,
    BTEllipseDiameterDimensionDisplayData1301ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTLinearDimensionDisplayData330
 */
export interface BTLinearDimensionDisplayData330 extends BTDimensionDisplayData323 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTLinearDimensionDisplayData330
     */
    btType?: string;
    /**
     * 
     * @type {number}
     * @memberof BTLinearDimensionDisplayData330
     */
    positionX?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLinearDimensionDisplayData330
     */
    positionY?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLinearDimensionDisplayData330
     */
    witnessEndPoint0X?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLinearDimensionDisplayData330
     */
    witnessEndPoint0Y?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLinearDimensionDisplayData330
     */
    witnessEndPoint1X?: number;
    /**
     * 
     * @type {number}
     * @memberof BTLinearDimensionDisplayData330
     */
    witnessEndPoint1Y?: number;
}

/**
 * Check if a given object implements the BTLinearDimensionDisplayData330 interface.
 */
export function instanceOfBTLinearDimensionDisplayData330(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTLinearDimensionDisplayData330FromJSON(json: any): BTLinearDimensionDisplayData330 {
    return BTLinearDimensionDisplayData330FromJSONTyped(json, false);
}

export function BTLinearDimensionDisplayData330FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTLinearDimensionDisplayData330 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTCenterlineDimensionDisplayData-1798') {
            return BTCenterlineDimensionDisplayData1798FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTEllipseDiameterDimensionDisplayData-1301') {
            return BTEllipseDiameterDimensionDisplayData1301FromJSONTyped(json, true);
        }
    }
    return {
        ...BTDimensionDisplayData323FromJSONTyped(json, ignoreDiscriminator),
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'positionX': !exists(json, 'positionX') ? undefined : json['positionX'],
        'positionY': !exists(json, 'positionY') ? undefined : json['positionY'],
        'witnessEndPoint0X': !exists(json, 'witnessEndPoint0X') ? undefined : json['witnessEndPoint0X'],
        'witnessEndPoint0Y': !exists(json, 'witnessEndPoint0Y') ? undefined : json['witnessEndPoint0Y'],
        'witnessEndPoint1X': !exists(json, 'witnessEndPoint1X') ? undefined : json['witnessEndPoint1X'],
        'witnessEndPoint1Y': !exists(json, 'witnessEndPoint1Y') ? undefined : json['witnessEndPoint1Y'],
    };
}

export function BTLinearDimensionDisplayData330SuperToJSON(value?: BTLinearDimensionDisplayData330 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTDimensionDisplayData323SuperToJSON(value),
        'btType': value.btType,
        'positionX': value.positionX,
        'positionY': value.positionY,
        'witnessEndPoint0X': value.witnessEndPoint0X,
        'witnessEndPoint0Y': value.witnessEndPoint0Y,
        'witnessEndPoint1X': value.witnessEndPoint1X,
        'witnessEndPoint1Y': value.witnessEndPoint1Y,
    };
}



export function BTLinearDimensionDisplayData330ToJSON(value?: BTLinearDimensionDisplayData330 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTCenterlineDimensionDisplayData-1798') {
        return BTCenterlineDimensionDisplayData1798ToJSON(value);
    }
    if (value.btType === 'BTEllipseDiameterDimensionDisplayData-1301') {
        return BTEllipseDiameterDimensionDisplayData1301ToJSON(value);
    }
    return BTLinearDimensionDisplayData330SuperToJSON(value);
}
