/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTLocationInfo226 } from './BTLocationInfo226';
import {
    BTLocationInfo226FromJSON,
    BTLocationInfo226FromJSONTyped,
    BTLocationInfo226ToJSON,
} from './BTLocationInfo226';
import type { BTNodeReference21 } from './BTNodeReference21';
import {
    BTNodeReference21FromJSON,
    BTNodeReference21FromJSONTyped,
    BTNodeReference21ToJSON,
} from './BTNodeReference21';
import type { BTParameterExpressionErrorInfo2037 } from './BTParameterExpressionErrorInfo2037';
import {
    BTParameterExpressionErrorInfo2037FromJSON,
    BTParameterExpressionErrorInfo2037FromJSONTyped,
    BTParameterExpressionErrorInfo2037ToJSON,
} from './BTParameterExpressionErrorInfo2037';
import type { GBTNoticeLevel } from './GBTNoticeLevel';
import {
    GBTNoticeLevelFromJSON,
    GBTNoticeLevelFromJSONTyped,
    GBTNoticeLevelToJSON,
} from './GBTNoticeLevel';
import type { GBTNoticeType } from './GBTNoticeType';
import {
    GBTNoticeTypeFromJSON,
    GBTNoticeTypeFromJSONTyped,
    GBTNoticeTypeToJSON,
} from './GBTNoticeType';

/**
 * 
 * @export
 * @interface BTNotice227
 */
export interface BTNotice227 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTNotice227
     */
    btType?: string;
    /**
     * 
     * @type {BTParameterExpressionErrorInfo2037}
     * @memberof BTNotice227
     */
    expressionErrorInfo?: BTParameterExpressionErrorInfo2037;
    /**
     * 
     * @type {GBTNoticeLevel}
     * @memberof BTNotice227
     */
    level?: GBTNoticeLevel;
    /**
     * 
     * @type {Array<BTLocationInfo226>}
     * @memberof BTNotice227
     */
    locationInfos?: Array<BTLocationInfo226>;
    /**
     * 
     * @type {string}
     * @memberof BTNotice227
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNotice227
     */
    nodeId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNotice227
     */
    parameterId?: string;
    /**
     * 
     * @type {Array<BTLocationInfo226>}
     * @memberof BTNotice227
     */
    stackTrace?: Array<BTLocationInfo226>;
    /**
     * 
     * @type {BTNodeReference21}
     * @memberof BTNotice227
     */
    tryNode?: BTNodeReference21;
    /**
     * 
     * @type {GBTNoticeType}
     * @memberof BTNotice227
     */
    type?: GBTNoticeType;
}

/**
 * Check if a given object implements the BTNotice227 interface.
 */
export function instanceOfBTNotice227(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTNotice227FromJSON(json: any): BTNotice227 {
    return BTNotice227FromJSONTyped(json, false);
}

export function BTNotice227FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTNotice227 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'expressionErrorInfo': !exists(json, 'expressionErrorInfo') ? undefined : BTParameterExpressionErrorInfo2037FromJSON(json['expressionErrorInfo']),
        'level': !exists(json, 'level') ? undefined : GBTNoticeLevelFromJSON(json['level']),
        'locationInfos': !exists(json, 'locationInfos') ? undefined : ((json['locationInfos'] as Array<any>).map(BTLocationInfo226FromJSON)),
        'message': !exists(json, 'message') ? undefined : json['message'],
        'nodeId': !exists(json, 'nodeId') ? undefined : json['nodeId'],
        'parameterId': !exists(json, 'parameterId') ? undefined : json['parameterId'],
        'stackTrace': !exists(json, 'stackTrace') ? undefined : ((json['stackTrace'] as Array<any>).map(BTLocationInfo226FromJSON)),
        'tryNode': !exists(json, 'tryNode') ? undefined : BTNodeReference21FromJSON(json['tryNode']),
        'type': !exists(json, 'type') ? undefined : GBTNoticeTypeFromJSON(json['type']),
    };
}

export function BTNotice227ToJSON(value?: BTNotice227 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'expressionErrorInfo': BTParameterExpressionErrorInfo2037ToJSON(value.expressionErrorInfo),
        'level': GBTNoticeLevelToJSON(value.level),
        'locationInfos': value.locationInfos === undefined ? undefined : ((value.locationInfos as Array<any>).map(BTLocationInfo226ToJSON)),
        'message': value.message,
        'nodeId': value.nodeId,
        'parameterId': value.parameterId,
        'stackTrace': value.stackTrace === undefined ? undefined : ((value.stackTrace as Array<any>).map(BTLocationInfo226ToJSON)),
        'tryNode': BTNodeReference21ToJSON(value.tryNode),
        'type': GBTNoticeTypeToJSON(value.type),
    };
}

