/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BTCompanySummaryInfo
 */
export interface BTCompanySummaryInfo {
    /**
     * 
     * @type {boolean}
     * @memberof BTCompanySummaryInfo
     */
    admin?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    domainPrefix?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    enterpriseBaseUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof BTCompanySummaryInfo
     */
    enterpriseSubtype?: number;
    /**
     * URI to fetch complete information of the resource.
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    href?: string;
    /**
     * Id of the resource.
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    image?: string;
    /**
     * Name of the resource.
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTCompanySummaryInfo
     */
    noPublicDocuments?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    ownerId?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof BTCompanySummaryInfo
     */
    secondaryDomainPrefixes?: Set<string>;
    /**
     * 
     * @type {number}
     * @memberof BTCompanySummaryInfo
     */
    state?: number;
    /**
     * 
     * @type {number}
     * @memberof BTCompanySummaryInfo
     */
    type?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     * @type {string}
     * @memberof BTCompanySummaryInfo
     */
    viewRef?: string;
}

/**
 * Check if a given object implements the BTCompanySummaryInfo interface.
 */
export function instanceOfBTCompanySummaryInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTCompanySummaryInfoFromJSON(json: any): BTCompanySummaryInfo {
    return BTCompanySummaryInfoFromJSONTyped(json, false);
}

export function BTCompanySummaryInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTCompanySummaryInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'admin': !exists(json, 'admin') ? undefined : json['admin'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'domainPrefix': !exists(json, 'domainPrefix') ? undefined : json['domainPrefix'],
        'enterpriseBaseUrl': !exists(json, 'enterpriseBaseUrl') ? undefined : json['enterpriseBaseUrl'],
        'enterpriseSubtype': !exists(json, 'enterpriseSubtype') ? undefined : json['enterpriseSubtype'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'noPublicDocuments': !exists(json, 'noPublicDocuments') ? undefined : json['noPublicDocuments'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'secondaryDomainPrefixes': !exists(json, 'secondaryDomainPrefixes') ? undefined : json['secondaryDomainPrefixes'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'viewRef': !exists(json, 'viewRef') ? undefined : json['viewRef'],
    };
}

export function BTCompanySummaryInfoToJSON(value?: BTCompanySummaryInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'admin': value.admin,
        'description': value.description,
        'domainPrefix': value.domainPrefix,
        'enterpriseBaseUrl': value.enterpriseBaseUrl,
        'enterpriseSubtype': value.enterpriseSubtype,
        'href': value.href,
        'id': value.id,
        'image': value.image,
        'name': value.name,
        'noPublicDocuments': value.noPublicDocuments,
        'ownerId': value.ownerId,
        'secondaryDomainPrefixes': value.secondaryDomainPrefixes === undefined ? undefined : Array.from(value.secondaryDomainPrefixes as Set<any>),
        'state': value.state,
        'type': value.type,
        'viewRef': value.viewRef,
    };
}

