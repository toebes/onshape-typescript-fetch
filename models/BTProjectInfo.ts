/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTGlobalTreeNodeInfo } from './BTGlobalTreeNodeInfo';
import {
    BTGlobalTreeNodeInfoFromJSON,
    BTGlobalTreeNodeInfoFromJSONTyped,
    BTGlobalTreeNodeInfoToJSON,
 BTGlobalTreeNodeInfoSuperToJSON,
} from './BTGlobalTreeNodeInfo';
import type { BTOwnerInfo } from './BTOwnerInfo';
import {
    BTOwnerInfoFromJSON,
    BTOwnerInfoFromJSONTyped,
    BTOwnerInfoToJSON,
} from './BTOwnerInfo';
import type { BTRbacPermissionSchemeInfo } from './BTRbacPermissionSchemeInfo';
import {
    BTRbacPermissionSchemeInfoFromJSON,
    BTRbacPermissionSchemeInfoFromJSONTyped,
    BTRbacPermissionSchemeInfoToJSON,
} from './BTRbacPermissionSchemeInfo';
import type { BTUserBasicSummaryInfo } from './BTUserBasicSummaryInfo';
import {
    BTUserBasicSummaryInfoFromJSON,
    BTUserBasicSummaryInfoFromJSONTyped,
    BTUserBasicSummaryInfoToJSON,
} from './BTUserBasicSummaryInfo';
import type { RoleMapEntry } from './RoleMapEntry';
import {
    RoleMapEntryFromJSON,
    RoleMapEntryFromJSONTyped,
    RoleMapEntryToJSON,
} from './RoleMapEntry';

/**
 * 
 * @export
 * @interface BTProjectInfo
 */
export interface BTProjectInfo extends BTGlobalTreeNodeInfo {
    /**
     * 
     * @type {BTRbacPermissionSchemeInfo}
     * @memberof BTProjectInfo
     */
    permissionScheme?: BTRbacPermissionSchemeInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof BTProjectInfo
     */
    permissionSet?: Array<string>;
    /**
     * 
     * @type {Array<RoleMapEntry>}
     * @memberof BTProjectInfo
     */
    roleMapEntries?: Array<RoleMapEntry>;
    /**
     * 
     * @type {boolean}
     * @memberof BTProjectInfo
     */
    trash?: boolean;
}

/**
 * Check if a given object implements the BTProjectInfo interface.
 */
export function instanceOfBTProjectInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTProjectInfoFromJSON(json: any): BTProjectInfo {
    return BTProjectInfoFromJSONTyped(json, false);
}

export function BTProjectInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTProjectInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BTGlobalTreeNodeInfoFromJSONTyped(json, ignoreDiscriminator),
        'permissionScheme': !exists(json, 'permissionScheme') ? undefined : BTRbacPermissionSchemeInfoFromJSON(json['permissionScheme']),
        'permissionSet': !exists(json, 'permissionSet') ? undefined : json['permissionSet'],
        'roleMapEntries': !exists(json, 'roleMapEntries') ? undefined : ((json['roleMapEntries'] as Array<any>).map(RoleMapEntryFromJSON)),
        'trash': !exists(json, 'trash') ? undefined : json['trash'],
    };
}

export function BTProjectInfoToJSON(value?: BTProjectInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BTGlobalTreeNodeInfoSuperToJSON(value),
        'permissionScheme': BTRbacPermissionSchemeInfoToJSON(value.permissionScheme),
        'permissionSet': value.permissionSet,
        'roleMapEntries': value.roleMapEntries === undefined ? undefined : ((value.roleMapEntries as Array<any>).map(RoleMapEntryToJSON)),
        'trash': value.trash,
    };
}

