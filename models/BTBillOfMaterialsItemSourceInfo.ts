/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTThumbnailInfo } from './BTThumbnailInfo';
import {
    BTThumbnailInfoFromJSON,
    BTThumbnailInfoFromJSONTyped,
    BTThumbnailInfoToJSON,
} from './BTThumbnailInfo';

/**
 * 
 * @export
 * @interface BTBillOfMaterialsItemSourceInfo
 */
export interface BTBillOfMaterialsItemSourceInfo {
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    _configuration?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    elementId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    fullConfiguration?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    href?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    isStandardContent?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    nonGeometricItemId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    partId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    sourceElementMicroversionId?: string;
    /**
     * 
     * @type {BTThumbnailInfo}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    thumbnailInfo?: BTThumbnailInfo;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    versionMetadataWorkspaceMicroversionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    viewHref?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    wvmId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTBillOfMaterialsItemSourceInfo
     */
    wvmType?: string;
}

/**
 * Check if a given object implements the BTBillOfMaterialsItemSourceInfo interface.
 */
export function instanceOfBTBillOfMaterialsItemSourceInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTBillOfMaterialsItemSourceInfoFromJSON(json: any): BTBillOfMaterialsItemSourceInfo {
    return BTBillOfMaterialsItemSourceInfoFromJSONTyped(json, false);
}

export function BTBillOfMaterialsItemSourceInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTBillOfMaterialsItemSourceInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'fullConfiguration': !exists(json, 'fullConfiguration') ? undefined : json['fullConfiguration'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'isStandardContent': !exists(json, 'isStandardContent') ? undefined : json['isStandardContent'],
        'nonGeometricItemId': !exists(json, 'nonGeometricItemId') ? undefined : json['nonGeometricItemId'],
        'partId': !exists(json, 'partId') ? undefined : json['partId'],
        'sourceElementMicroversionId': !exists(json, 'sourceElementMicroversionId') ? undefined : json['sourceElementMicroversionId'],
        'thumbnailInfo': !exists(json, 'thumbnailInfo') ? undefined : BTThumbnailInfoFromJSON(json['thumbnailInfo']),
        'versionMetadataWorkspaceMicroversionId': !exists(json, 'versionMetadataWorkspaceMicroversionId') ? undefined : json['versionMetadataWorkspaceMicroversionId'],
        'viewHref': !exists(json, 'viewHref') ? undefined : json['viewHref'],
        'wvmId': !exists(json, 'wvmId') ? undefined : json['wvmId'],
        'wvmType': !exists(json, 'wvmType') ? undefined : json['wvmType'],
    };
}

export function BTBillOfMaterialsItemSourceInfoToJSON(value?: BTBillOfMaterialsItemSourceInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configuration': value._configuration,
        'documentId': value.documentId,
        'elementId': value.elementId,
        'fullConfiguration': value.fullConfiguration,
        'href': value.href,
        'isStandardContent': value.isStandardContent,
        'nonGeometricItemId': value.nonGeometricItemId,
        'partId': value.partId,
        'sourceElementMicroversionId': value.sourceElementMicroversionId,
        'thumbnailInfo': BTThumbnailInfoToJSON(value.thumbnailInfo),
        'versionMetadataWorkspaceMicroversionId': value.versionMetadataWorkspaceMicroversionId,
        'viewHref': value.viewHref,
        'wvmId': value.wvmId,
        'wvmType': value.wvmType,
    };
}

