/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTRigidOrLockedSubAssemblyOutputInfo3860 } from './BTRigidOrLockedSubAssemblyOutputInfo3860';
import {
    BTRigidOrLockedSubAssemblyOutputInfo3860FromJSON,
    BTRigidOrLockedSubAssemblyOutputInfo3860FromJSONTyped,
    BTRigidOrLockedSubAssemblyOutputInfo3860ToJSON,
} from './BTRigidOrLockedSubAssemblyOutputInfo3860';
import type { GBTSubAssemblyLockType } from './GBTSubAssemblyLockType';
import {
    GBTSubAssemblyLockTypeFromJSON,
    GBTSubAssemblyLockTypeFromJSONTyped,
    GBTSubAssemblyLockTypeToJSON,
} from './GBTSubAssemblyLockType';

import {
     BTLockedAtCurrentPosition4006FromJSONTyped,
    BTLockedAtCurrentPosition4006ToJSON,
     BTLockedAtNamedPosition3201FromJSONTyped,
    BTLockedAtNamedPosition3201ToJSON,
     BTLockedAtSubAssemblyPosition3885FromJSONTyped,
    BTLockedAtSubAssemblyPosition3885ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTLockedSubAssembly4590
 */
export interface BTLockedSubAssembly4590 {
    /**
     * Type of JSON object.
     * @type {string}
     * @memberof BTLockedSubAssembly4590
     */
    btType?: string;
    /**
     * 
     * @type {GBTSubAssemblyLockType}
     * @memberof BTLockedSubAssembly4590
     */
    lockType?: GBTSubAssemblyLockType;
    /**
     * 
     * @type {BTRigidOrLockedSubAssemblyOutputInfo3860}
     * @memberof BTLockedSubAssembly4590
     */
    lockedSubAssemblyOutputInfo?: BTRigidOrLockedSubAssemblyOutputInfo3860;
}

/**
 * Check if a given object implements the BTLockedSubAssembly4590 interface.
 */
export function instanceOfBTLockedSubAssembly4590(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTLockedSubAssembly4590FromJSON(json: any): BTLockedSubAssembly4590 {
    return BTLockedSubAssembly4590FromJSONTyped(json, false);
}

export function BTLockedSubAssembly4590FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTLockedSubAssembly4590 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTLockedAtCurrentPosition-4006') {
            return BTLockedAtCurrentPosition4006FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTLockedAtNamedPosition-3201') {
            return BTLockedAtNamedPosition3201FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTLockedAtSubAssemblyPosition-3885') {
            return BTLockedAtSubAssemblyPosition3885FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'lockType': !exists(json, 'lockType') ? undefined : GBTSubAssemblyLockTypeFromJSON(json['lockType']),
        'lockedSubAssemblyOutputInfo': !exists(json, 'lockedSubAssemblyOutputInfo') ? undefined : BTRigidOrLockedSubAssemblyOutputInfo3860FromJSON(json['lockedSubAssemblyOutputInfo']),
    };
}

export function BTLockedSubAssembly4590SuperToJSON(value?: BTLockedSubAssembly4590 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'lockType': GBTSubAssemblyLockTypeToJSON(value.lockType),
        'lockedSubAssemblyOutputInfo': BTRigidOrLockedSubAssemblyOutputInfo3860ToJSON(value.lockedSubAssemblyOutputInfo),
    };
}



export function BTLockedSubAssembly4590ToJSON(value?: BTLockedSubAssembly4590 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTLockedAtCurrentPosition-4006') {
        return BTLockedAtCurrentPosition4006ToJSON(value);
    }
    if (value.btType === 'BTLockedAtNamedPosition-3201') {
        return BTLockedAtNamedPosition3201ToJSON(value);
    }
    if (value.btType === 'BTLockedAtSubAssemblyPosition-3885') {
        return BTLockedAtSubAssemblyPosition3885ToJSON(value);
    }
    return BTLockedSubAssembly4590SuperToJSON(value);
}
