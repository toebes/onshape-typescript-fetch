/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.196.54436-927372740f35
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTCategoryParam } from './BTCategoryParam';
import {
    BTCategoryParamFromJSON,
    BTCategoryParamFromJSONTyped,
    BTCategoryParamToJSON,
} from './BTCategoryParam';

/**
 * 
 * @export
 * @interface BTNextPartNumberParam
 */
export interface BTNextPartNumberParam {
    /**
     * 
     * @type {Array<BTCategoryParam>}
     * @memberof BTNextPartNumberParam
     */
    categories?: Array<BTCategoryParam>;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    _configuration?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    elementId?: string;
    /**
     * 
     * @type {number}
     * @memberof BTNextPartNumberParam
     */
    elementType?: number;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    mimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    numberSchemeResourceTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    partId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    partNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    versionId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTNextPartNumberParam
     */
    workspaceId?: string;
}

/**
 * Check if a given object implements the BTNextPartNumberParam interface.
 */
export function instanceOfBTNextPartNumberParam(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTNextPartNumberParamFromJSON(json: any): BTNextPartNumberParam {
    return BTNextPartNumberParamFromJSONTyped(json, false);
}

export function BTNextPartNumberParamFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTNextPartNumberParam {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'categories': !exists(json, 'categories') ? undefined : ((json['categories'] as Array<any>).map(BTCategoryParamFromJSON)),
        '_configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'elementId': !exists(json, 'elementId') ? undefined : json['elementId'],
        'elementType': !exists(json, 'elementType') ? undefined : json['elementType'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'numberSchemeResourceTypeId': !exists(json, 'numberSchemeResourceTypeId') ? undefined : json['numberSchemeResourceTypeId'],
        'partId': !exists(json, 'partId') ? undefined : json['partId'],
        'partNumber': !exists(json, 'partNumber') ? undefined : json['partNumber'],
        'versionId': !exists(json, 'versionId') ? undefined : json['versionId'],
        'workspaceId': !exists(json, 'workspaceId') ? undefined : json['workspaceId'],
    };
}

export function BTNextPartNumberParamToJSON(value?: BTNextPartNumberParam | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'categories': value.categories === undefined ? undefined : ((value.categories as Array<any>).map(BTCategoryParamToJSON)),
        'configuration': value._configuration,
        'documentId': value.documentId,
        'elementId': value.elementId,
        'elementType': value.elementType,
        'id': value.id,
        'mimeType': value.mimeType,
        'numberSchemeResourceTypeId': value.numberSchemeResourceTypeId,
        'partId': value.partId,
        'partNumber': value.partNumber,
        'versionId': value.versionId,
        'workspaceId': value.workspaceId,
    };
}

